/*
 Navicat Premium Data Transfer

 Source Server         : 本地
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : myblog

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 19/05/2021 17:48:03
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for admins
-- ----------------------------
DROP TABLE IF EXISTS `admins`;
CREATE TABLE `admins`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '管理员编号',
  `username` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '萌新' COMMENT '管理员名称',
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '管理员权限',
  `is_super` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of admins
-- ----------------------------
INSERT INTO `admins` VALUES (14, '小阮', '2501706076@qq.com', '$2a$08$z4swIiJmbNY50MTImd95qO5FVpFifnLce4eGcz7XBoNcfivb6zN7e', 0, 1);

-- ----------------------------
-- Table structure for articles
-- ----------------------------
DROP TABLE IF EXISTS `articles`;
CREATE TABLE `articles`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '文章编号',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章标题',
  `content_md` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章内容markdown格式',
  `content_html` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章内容html格式',
  `clicks` int(0) NOT NULL DEFAULT 0 COMMENT '阅读量',
  `theme` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '主题',
  `type` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类',
  `createTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `isTop` tinyint(1) NOT NULL DEFAULT 0 COMMENT '置顶标志',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of articles
-- ----------------------------
INSERT INTO `articles` VALUES (12, 'vue滚动监听动画事件', '## 在项目中，我们时常要用到固定侧边栏、广告等，但是仅仅用position:fixed;太单调了，我们就需要给它加一个动画\n### 那么怎么给它加一个好看的动画呢？\n+ `<div class=\"new_message\" ref=\"newMessage\">`\n+ `<div class=\"about_me\" ref=\"aboutMe\">`\n\n+ 这是我实现的一个超级简单的向下滚动的动画，虽然简单但是很好看。\n```js\n// 1.在mounted中添加滚动事件\nmounted() {\n    window.addEventListener(\'scroll\', this.toScoll)\n}\n//2.在方法中写处理事件\n    methods: {\n      toScoll(){//向下滑动动画\n        let newMessage = this.$refs.newMessage\n        let aboutMe = this.$refs.aboutMe\n        let long = document.documentElement.scrollTop\n        if (long > 100) {\n          newMessage.style.top = long + \"px\";\n          aboutMe.style.top = long + \"px\";\n        }else if (long < 100) {\n          newMessage.style.top = \"0px\";\n          aboutMe.style.top = \"0px\";\n        }\n      }\n    }\n```\n**记住不要给元素加==position:fixed==;并css给将要进行动画的元素，添加上==transition: all 0.5s ease-in-out;==**，这里设置绝对定位，需要给父元素(最好自己设个div)设置 **position:relative;width:100%;** 把div撑起来\n+ `      .new_message{\n		position:absolute;\n        transition: all 0.5s ease-in-out;}`\n+ `      .about_me{\n		position:absolute;\n        transition: all 0.5s ease-in-out;\n      }`\n\n### 遇到的问题\n注意，如果离开该页面需要移除这个监听的事件，不然会报错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191105152803356.png)\n+ 解决方案\n	```js\n	destroyed () {\n      window.removeEventListener(\'scroll\', this.toScoll)\n    },\n	```\n', '<h2><a id=\"positionfixed_0\"></a>在项目中，我们时常要用到固定侧边栏、广告等，但是仅仅用position:fixed;太单调了，我们就需要给它加一个动画</h2>\n<h3><a id=\"_1\"></a>那么怎么给它加一个好看的动画呢？</h3>\n<ul>\n<li>\n<p><code>&lt;div class=&quot;new_message&quot; ref=&quot;newMessage&quot;&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;div class=&quot;about_me&quot; ref=&quot;aboutMe&quot;&gt;</code></p>\n</li>\n<li>\n<p>这是我实现的一个超级简单的向下滚动的动画，虽然简单但是很好看。</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 1.在mounted中添加滚动事件</span>\nmounted() {\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'scroll\'</span>, <span class=\"hljs-keyword\">this</span>.toScoll)\n}\n<span class=\"hljs-comment\">//2.在方法中写处理事件</span>\n    methods: {\n      toScoll(){<span class=\"hljs-comment\">//向下滑动动画</span>\n        <span class=\"hljs-keyword\">let</span> newMessage = <span class=\"hljs-keyword\">this</span>.$refs.newMessage\n        <span class=\"hljs-keyword\">let</span> aboutMe = <span class=\"hljs-keyword\">this</span>.$refs.aboutMe\n        <span class=\"hljs-keyword\">let</span> long = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop\n        <span class=\"hljs-keyword\">if</span> (long &gt; <span class=\"hljs-number\">100</span>) {\n          newMessage.style.top = long + <span class=\"hljs-string\">\"px\"</span>;\n          aboutMe.style.top = long + <span class=\"hljs-string\">\"px\"</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (long &lt; <span class=\"hljs-number\">100</span>) {\n          newMessage.style.top = <span class=\"hljs-string\">\"0px\"</span>;\n          aboutMe.style.top = <span class=\"hljs-string\">\"0px\"</span>;\n        }\n      }\n    }\n</code></div></pre>\n<p><strong>记住不要给元素加<mark>position:fixed</mark>;并css给将要进行动画的元素，添加上<mark>transition: all 0.5s ease-in-out;</mark></strong>，这里设置绝对定位，需要给父元素(最好自己设个div)设置 <strong>position:relative;width:100%;</strong> 把div撑起来</p>\n<ul>\n<li><code>.new_message{ 	position:absolute; transition: all 0.5s ease-in-out;}</code></li>\n<li><code>.about_me{ 	position:absolute; transition: all 0.5s ease-in-out; }</code></li>\n</ul>\n<h3><a id=\"_36\"></a>遇到的问题</h3>\n<p>注意，如果离开该页面需要移除这个监听的事件，不然会报错。<br />\n<img src=\"https://img-blog.csdnimg.cn/20191105152803356.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>解决方案<pre><div class=\"hljs\"><code class=\"lang-js\">destroyed () {\n  <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">\'scroll\'</span>, <span class=\"hljs-keyword\">this</span>.toScoll)\n},\n</code></div></pre>\n</li>\n</ul>\n', 5, '实用', 'vue,js', '2020-04-03 17:12:20', '2020-04-03 17:12:20', 0, 0);
INSERT INTO `articles` VALUES (13, 'vue运用animate.css设置transition动画', '### vue的transition动画\n+ 关于vue中animation动画问题\n    - 1.找到要用动画的元素。我是想要实现切换页面的动画效果，所以找到app.vue中的router-view，用transition将它包裹起来。\n    - 2.用动画库animate.css，需要==npm install animate.css --save==\n    - 3.在main.js中引入动画\n    ```js\n    import animated from \'animate.css\'//引入动画\n    Vue.use(animated)\n    ```\n    - 4.开始写transition动画了\n    ```js\n    <template>\n        <div id=\"app\">\n            <Navbar></Navbar>\n            <!-- 设置进入、离开动画 -->\n            <transition\n            enter-active-class=\"animated zoomIn faster\"\n            leave-active-class=\"animated zoomOut faster\"\n            class=\"tran\"\n            mode=\"out-in\"\n            >\n            <router-view class=\"show_animate\"/>\n            </transition>\n        </div>\n    </template>\n    ```\n    **注意：需要给transition加一个class类,设置==position: relative==，然后给将要进行动画的元素设置==position: absolute==，否则动画位置会很乱。还需要设置给transition设置==mode=\"out-in\"==，是上个动画结束再执行下一个，不然看起来会很怪。**\n\n+ transition-group也同理\n    - [这里就给个链接](https://blog.csdn.net/weixin_42218847/article/details/81474923)', '<h3><a id=\"vuetransition_0\"></a>vue的transition动画</h3>\n<ul>\n<li>\n<p>关于vue中animation动画问题</p>\n<ul>\n<li>1.找到要用动画的元素。我是想要实现切换页面的动画效果，所以找到app.vue中的router-view，用transition将它包裹起来。</li>\n<li>2.用动画库animate.css，需要<mark>npm install animate.css --save</mark></li>\n<li>3.在main.js中引入动画</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> animated <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'animate.css\'</span><span class=\"hljs-comment\">//引入动画</span>\nVue.use(animated)\n</code></div></pre>\n<ul>\n<li>4.开始写transition动画了</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">&lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navbar</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navbar</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 设置进入、离开动画 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n        <span class=\"hljs-attr\">enter-active-class</span>=<span class=\"hljs-string\">\"animated zoomIn faster\"</span>\n        <span class=\"hljs-attr\">leave-active-class</span>=<span class=\"hljs-string\">\"animated zoomOut faster\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tran\"</span>\n        <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">\"out-in\"</span>\n        &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"show_animate\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n</code></div></pre>\n<p><strong>注意：需要给transition加一个class类,设置<mark>position: relative</mark>，然后给将要进行动画的元素设置<mark>position: absolute</mark>，否则动画位置会很乱。还需要设置给transition设置<mark>mode=“out-in”</mark>，是上个动画结束再执行下一个，不然看起来会很怪。</strong></p>\n</li>\n<li>\n<p>transition-group也同理</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_42218847/article/details/81474923\" target=\"_blank\">这里就给个链接</a></li>\n</ul>\n</li>\n</ul>\n', 10, '实用', 'vue,css', '2020-04-03 17:12:20', '2020-04-03 17:12:20', 0, 0);
INSERT INTO `articles` VALUES (14, '关于elementUI使用el-date-picker时问题', '#### 当我们在使用el-date-picker，会存在一些问题\n##### 1.数据格式化问题\n* **format**	显示在输入框中的格式	string	见日期格式	yyyy-MM-dd\n* **value-format**	可选，绑定值的格式。不指定则绑定值为 Date 对象	string	见日期格式	— **==这是后台传输时的数据格式==**\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/2019122110035736.png)\n* 这是显示的时间格式\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221100657657.png)\n* 这是后台拿到的时间格式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221100827634.png)\n\n#### 2.时间回显问题\n* 我尝试从数据库拿到时间，进行回显，作修改用，但是一直不行。\n* 原因：当你用**v-model**绑定数据时，绑定时间的数据，一定要命名为**==date==**，否则不能回显。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101320880.png)\n* 我们看下别的命名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101432536.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101453819.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101518850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n* **==最关键就是date==**\n', '<h4><a id=\"eldatepicker_0\"></a>当我们在使用el-date-picker，会存在一些问题</h4>\n<h5><a id=\"1_1\"></a>1.数据格式化问题</h5>\n<ul>\n<li><strong>format</strong>	显示在输入框中的格式	string	见日期格式	yyyy-MM-dd</li>\n<li><strong>value-format</strong>	可选，绑定值的格式。不指定则绑定值为 Date 对象	string	见日期格式	— <strong><mark>这是后台传输时的数据格式</mark></strong><br />\n<img src=\"https://img-blog.csdnimg.cn/2019122110035736.png\" alt=\"在这里插入图片描述\" /></li>\n<li>这是显示的时间格式<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221100657657.png\" alt=\"在这里插入图片描述\" /></li>\n<li>这是后台拿到的时间格式<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221100827634.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h4><a id=\"2_10\"></a>2.时间回显问题</h4>\n<ul>\n<li>我尝试从数据库拿到时间，进行回显，作修改用，但是一直不行。</li>\n<li>原因：当你用<strong>v-model</strong>绑定数据时，绑定时间的数据，一定要命名为**<mark>date</mark>**，否则不能回显。<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101320880.png\" alt=\"在这里插入图片描述\" /></li>\n<li>我们看下别的命名<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101432536.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101453819.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101518850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><strong><mark>最关键就是date</mark></strong></li>\n</ul>\n', 5, '问题及解决方案', 'vue,elementUI', '2020-11-19 15:54:13', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (15, 'express+mongodb开发通用 CRUD 接口', '**通用 CRUD 接口，就是后台通过前端的URL，动态获取到里面的需要的参数，将参数处理成我们的DB模型接口，就可以使用了**\n#### 1.改造接口，形成动态接口\n```js\n// 改造前\nconst express = require(\"express\");\nconst router = express.Router();\nconst Category = require(\"../models/Category\");\nrouter.get(\"/categories\", async (req, res) => {\n  let result = await Category.create(req.body);\n  res.send(result);\n});\n\n// 改造后\nconst express = require(\"express\");\nconst router = express.Router({\n  mergeParams: true //合并url参数，获取url传的{:resource}\n});\nrouter.get(\"/\", async (req, res) => {\n  let Model = require(`../../models/${req.params.resource}`);\n  res.send(result);\n});\napp.use(\"/admin/api/rest/:resource\", router);\n```\n==改造后的请求接口==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191923236.png)会报错![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202190255305.png)\n==因为我们拿到的是categories==，但是我们要的是Category。\n\n#### 2.处理接口参数\n- npm i inflection(处理格式的插件)，这里我们要拿到**Category**，因为我们model定义的是**Category**。\n![-](https://img-blog.csdnimg.cn/20200202192524149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n-下面是获取 **Category**\n```js\nconst modelName = require(\"inflection\").classify(req.params.resource); //复数转单数，首字母大写\nres.send(modelName);\nreq.Model = require(`../../models/${modelName}`); //req.Model表示给请求对象上加上Model，之后的req都可以引用\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191013748.png)\n- **为了避免给每个接口添加这两句，所以要在app.use()中使用中间件**\n\n```javascript\n    // 通用CRUD接口\n    app.use(\"/admin/api/rest/:resource\",async (req, res, next) => {\n	    const modelName = require(\"inflection\").classify(req.params.resource); //复数转单数，首字母大写\n	    req.Model = require(`../../models/${modelName}`); //req.Model表示给请求对象上加上Model，之后的req都可以引用\n	    next();\n      }, router);\n```\n#### 改造完成\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191747256.png)\n之后我们就可以通过**Request URL**，进行通用的增删改查，大大简化代码。\n', '<p><strong>通用 CRUD 接口，就是后台通过前端的URL，动态获取到里面的需要的参数，将参数处理成我们的DB模型接口，就可以使用了</strong></p>\n<h4><a id=\"1_1\"></a>1.改造接口，形成动态接口</h4>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 改造前</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> router = express.Router();\n<span class=\"hljs-keyword\">const</span> Category = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../models/Category\"</span>);\nrouter.get(<span class=\"hljs-string\">\"/categories\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> Category.create(req.body);\n  res.send(result);\n});\n\n<span class=\"hljs-comment\">// 改造后</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> router = express.Router({\n  <span class=\"hljs-attr\">mergeParams</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">//合并url参数，获取url传的{:resource}</span>\n});\nrouter.get(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">let</span> Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${req.params.resource}</span>`</span>);\n  res.send(result);\n});\napp.use(<span class=\"hljs-string\">\"/admin/api/rest/:resource\"</span>, router);\n</code></div></pre>\n<p><mark>改造后的请求接口</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200202191923236.png\" alt=\"在这里插入图片描述\" />会报错<img src=\"https://img-blog.csdnimg.cn/20200202190255305.png\" alt=\"在这里插入图片描述\" /><br />\n<mark>因为我们拿到的是categories</mark>，但是我们要的是Category。</p>\n<h4><a id=\"2_27\"></a>2.处理接口参数</h4>\n<ul>\n<li>npm i inflection(处理格式的插件)，这里我们要拿到<strong>Category</strong>，因为我们model定义的是<strong>Category</strong>。<br />\n<img src=\"https://img-blog.csdnimg.cn/20200202192524149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"-\" /><br />\n-下面是获取 <strong>Category</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> modelName = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"inflection\"</span>).classify(req.params.resource); <span class=\"hljs-comment\">//复数转单数，首字母大写</span>\nres.send(modelName);\nreq.Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${modelName}</span>`</span>); <span class=\"hljs-comment\">//req.Model表示给请求对象上加上Model，之后的req都可以引用</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200202191013748.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li><strong>为了避免给每个接口添加这两句，所以要在app.use()中使用中间件</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    <span class=\"hljs-comment\">// 通用CRUD接口</span>\n    app.use(<span class=\"hljs-string\">\"/admin/api/rest/:resource\"</span>,<span class=\"hljs-keyword\">async</span> (req, res, next) =&gt; {\n	    <span class=\"hljs-keyword\">const</span> modelName = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"inflection\"</span>).classify(req.params.resource); <span class=\"hljs-comment\">//复数转单数，首字母大写</span>\n	    req.Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${modelName}</span>`</span>); <span class=\"hljs-comment\">//req.Model表示给请求对象上加上Model，之后的req都可以引用</span>\n	    next();\n      }, router);\n</code></div></pre>\n<h4><a id=\"_47\"></a>改造完成</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20200202191747256.png\" alt=\"在这里插入图片描述\" /><br />\n之后我们就可以通过<strong>Request URL</strong>，进行通用的增删改查，大大简化代码。</p>\n', 1, '技术', 'node,mongoDB', '2020-04-03 17:12:20', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (16, 'vue封装一个卡片组件', '### **会用到的知识**\n- 父组件向子组件传值\n- slot插槽\n##### 我想要做一个这样的组件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200203153357958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 头部基本不变，只需要改变图标和标题\n- 下面的内容需要我们改变，可以是视频、资料、新闻等。\n\n#### 1.先定义一个Card.vue的组件\n接收父组件动态传过来的图标和标题\n\n```javascript\n<template>\n  <div>\n    <!-- card -->\n    <div class=\"card p-3 mt-3 bg-white\">\n      <div class=\"card-header d-flex pb-3\">\n        <!-- 图标 -->\n        <i class=\"iconfont\" :class=\"`icon-${icon}`\"></i>\n        <!-- 标题 -->\n        <div class=\"fs-xl flex-1 ml-2\">{{ title }}</div>\n        <i class=\"iconfont icon-menu\"></i>\n      </div>\n      <div class=\"card-body pt-3\">\n      <!-- slot用来接收之后的自己定义的内容，就是下面body的内容 -->\n        <slot></slot>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  props: {//父组件传来的值\n    title: { type: String, required: true },\n    icon: { type: String, required: true }\n  },\n</script>\n```\n==记得把组件挂载到**main.js**上，方便全局引用==\n```javascript\nimport Card from \"./components/Card\";\nVue.component(\"m-card\", Card);\n```\n\n#### 2.再定义一个，CardList.vue组件\n接收父组件传过来列表的数据，进行展示。并把图标和标题传给Card.vue。\n\n```javascript\n<template>\n  <div>\n    <m-card :icon=\"icon\" :title=\"title\">\n      <div class=\"body\">\n        <!-- 导航栏 -->\n        <div class=\"nav pt-3 jc-between\">\n          <div\n            class=\"nav-item\"\n            :class=\"{active:active===index}\"\n            v-for=\"(category,index) in categories\"\n            :key=\"index\"\n            @click=\"active = index\"\n          >\n            <div class=\"nav-link\">{{category.name}}</div>\n          </div>\n        </div>\n        <!-- 轮播图 -->\n        <div class=\"pt-2\">\n          <swiper>\n            <swiper-slide v-for=\"(category,index) in categories\" :key=\"index\">\n            <!-- slot接收显示的列表数据，这里要用具名的solt父组件需要拿到category这个值 -->\n              <slot name=\"items\" :category=\"category\"></slot>\n            </swiper-slide>\n          </swiper>\n        </div>\n      </div>\n    </m-card>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: { type: String, require: true },\n    icon: { type: String, require: true },\n    categories: { type: Array, require: true }//这是父组件传的列表数据，是个数组\n  },\n  data() {\n    return {\n      active: 0\n    };\n  },\n};\n</script>\n```\n==再挂载到**main.js**上，方便全局引用==\n```javascript\nimport ListCard from \'./components/ListCard\'\nVue.component(\"m-list-card\", ListCard);\n```\n**注意：这两个组件的slot各自的作用**\n\n#### 3.父组件传值\n\n```javascript\n    <!-- 卡片组件 -->\n    <m-list-card title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\">\n      <template v-slot:items=\"{ category }\">\n        <div\n          v-for=\"(item, index) in category.newsList\"\n          :key=\"index\"\n          class=\"py-2\"\n        >\n          <span>[{{ item.categoryName }}]</span>\n          <span>|</span>\n          <span>{{ item.title }}</span>\n          <span>{{ item.date }}</span>\n        </div>\n      </template>\n    </m-list-card>\n    \n    //列表数据\n      newsCat: [\n        {\n          name: \"热门\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"公告\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"新闻\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"新闻\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"活动\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"活动\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"赛事\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"赛事\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        }\n      ]\n```\n父组件需要传3个值`<m-list-card title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\">`。\n- 父组件传（**title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\"**）==> *CardList.vue*（**props**）接收\n- *CardList.vue*（**title=\"新闻资讯\" icon=\"menu1\"**）==> *Card.vue*（**props**）接收展示\n- *CardList.vue*（**:categories=\"newsCat\"**）v-for循环展示，但是为了复用性，我们需要把`<slot name=\"items\" :category=\"category\"></slot>`里面的数据传给父组件，让父组件展示来。\n- 最后父组件通过`<template v-slot:items=\"{ category }\">`拿到**CardList.vue**传过来的列表数据，进行循环展示。==v-slot:items==是用来绑定slot的==name==，数据则是==category==\n- **注意**：每个子组件的==slot==的用处，和父组件的==template==用处', '<h3><a id=\"_0\"></a><strong>会用到的知识</strong></h3>\n<ul>\n<li>父组件向子组件传值</li>\n<li>slot插槽</li>\n</ul>\n<h5><a id=\"_3\"></a>我想要做一个这样的组件</h5>\n<p><img src=\"https://img-blog.csdnimg.cn/20200203153357958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>头部基本不变，只需要改变图标和标题</li>\n<li>下面的内容需要我们改变，可以是视频、资料、新闻等。</li>\n</ul>\n<h4><a id=\"1Cardvue_8\"></a>1.先定义一个Card.vue的组件</h4>\n<p>接收父组件动态传过来的图标和标题</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- card --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card p-3 mt-3 bg-white\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-header d-flex pb-3\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 图标 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"iconfont\"</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"`icon-${icon}`\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 标题 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fs-xl flex-1 ml-2\"</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"iconfont icon-menu\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-body pt-3\"</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- slot用来接收之后的自己定义的内容，就是下面body的内容 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/template&gt;\n&lt;script&gt;\nexport default {\n  props: {/</span><span class=\"hljs-regexp\">/父组件传来的值\n    title: { type: String, required: true },\n    icon: { type: String, required: true }\n  },\n&lt;/</span>script&gt;\n</code></div></pre>\n<p><mark>记得把组件挂载到<strong>main.js</strong>上，方便全局引用</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> Card <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/Card\"</span>;\nVue.component(<span class=\"hljs-string\">\"m-card\"</span>, Card);\n</code></div></pre>\n<h4><a id=\"2CardListvue_44\"></a>2.再定义一个，CardList.vue组件</h4>\n<p>接收父组件传过来列表的数据，进行展示。并把图标和标题传给Card.vue。</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-card</span> <span class=\"hljs-attr\">:icon</span>=<span class=\"hljs-string\">\"icon\"</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"body\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 导航栏 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav pt-3 jc-between\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-item\"</span>\n            <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{active:active===index}\"</span>\n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(category,index) in categories\"</span>\n            <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n            @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"active = index\"</span>\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-link\"</span>&gt;</span>{{category.name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 轮播图 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pt-2\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper-slide</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(category,index) in categories\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- slot接收显示的列表数据，这里要用具名的solt父组件需要拿到category这个值 --&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"items\"</span> <span class=\"hljs-attr\">:category</span>=<span class=\"hljs-string\">\"category\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper-slide</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">m-card</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">title</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> },\n    <span class=\"hljs-attr\">icon</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> },\n    <span class=\"hljs-attr\">categories</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Array</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> }<span class=\"hljs-comment\">//这是父组件传的列表数据，是个数组</span>\n  },\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">active</span>: <span class=\"hljs-number\">0</span>\n    };\n  },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></div></pre>\n<p><mark>再挂载到<strong>main.js</strong>上，方便全局引用</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> ListCard <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./components/ListCard\'</span>\nVue.component(<span class=\"hljs-string\">\"m-list-card\"</span>, ListCard);\n</code></div></pre>\n<p><strong>注意：这两个组件的slot各自的作用</strong></p>\n<h4><a id=\"3_99\"></a>3.父组件传值</h4>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    &lt;!-- 卡片组件 --&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-list-card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"新闻资讯\"</span> <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"menu1\"</span> <span class=\"hljs-attr\">:categories</span>=<span class=\"hljs-string\">\"newsCat\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:items</span>=<span class=\"hljs-string\">\"{ category }\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n          <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in category.newsList\"</span>\n          <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"py-2\"</span>\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>[{{ item.categoryName }}]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ item.title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ item.date }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">m-list-card</span>&gt;</span>\n    \n    //列表数据\n      newsCat: [\n        {\n          name: \"热门\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"公告\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"新闻\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"新闻\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"活动\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"活动\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"赛事\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"赛事\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        }\n      ]\n</span></code></div></pre>\n<p>父组件需要传3个值<code>&lt;m-list-card title=&quot;新闻资讯&quot; icon=&quot;menu1&quot; :categories=&quot;newsCat&quot;&gt;</code>。</p>\n<ul>\n<li>父组件传（<strong>title=“新闻资讯” icon=“menu1” :categories=“newsCat”</strong>）==&gt; <em>CardList.vue</em>（<strong>props</strong>）接收</li>\n<li><em>CardList.vue</em>（<strong>title=“新闻资讯” icon=“menu1”</strong>）==&gt; <em>Card.vue</em>（<strong>props</strong>）接收展示</li>\n<li><em>CardList.vue</em>（<strong>:categories=“newsCat”</strong>）v-for循环展示，但是为了复用性，我们需要把<code>&lt;slot name=&quot;items&quot; :category=&quot;category&quot;&gt;&lt;/slot&gt;</code>里面的数据传给父组件，让父组件展示来。</li>\n<li>最后父组件通过<code>&lt;template v-slot:items=&quot;{ category }&quot;&gt;</code>拿到<strong>CardList.vue</strong>传过来的列表数据，进行循环展示。<mark>v-slot:items</mark>是用来绑定slot的<mark>name</mark>，数据则是<mark>category</mark></li>\n<li><strong>注意</strong>：每个子组件的<mark>slot</mark>的用处，和父组件的<mark>template</mark>用处</li>\n</ul>\n', 0, '组件', 'vue', '2020-04-03 17:12:20', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (17, 'VUE项目发布和部署 (阿里云)', '## 以下是我看[全栈之巅](https://www.bilibili.com/video/av58969687?p=1)整理的，有兴趣可以看一下\n这是我写好的项目（后台管理：admin，前台展示：web，服务端：server）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214133603624.png)\n### 1. 生产环境编译\n- 1.修改axios的**baseURL**\n```js\nconst http = axios.create({\n    // baseURL: \"http://localhost:3000/admin/api\"\n    baseURL: process.env.VUE_APP_API_URL || \'/admin/api\',\n});\n```\n- 2.在admin的根目录添加环境变量文件 ==.env.development==，添加 ==VUE_APP_API_URL = http://localhost:3000/admin/api==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135501887.png)\n- 3.在==server==的==main.js==，中添加`app.use(\'/admin\', express.static(__dirname + \'/admin\')) //静态文件 `\n- 4.在==admin==中，创建==vue.config.js==配置文件，进行配置![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135532853.png)\n```js\nmodule.exports = {\n  outputDir: __dirname + \"/../server/admin/\", //将文件输出到server/admin\n  publicPath: process.env.NODE_ENV === \"production\" ? \"/admin/\" : \"/\" //当生产环境，就会使用/admin的publicPath\n}\n```\n- 5.==admin==中`npm run build`，就会在server中生成之前配置的admin文件夹\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135840340.png)\n- 6.成功访问\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140034453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 7. 在==web==文件夹下执行上面相同的步骤。就会在==server==文件夹，生成**build**的web文件夹。 \n注意：==vue.config.js==，配置不同，我们访问的根路径就是前台，所以不用加**web**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140646720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140612153.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140712345.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140842324.png?x-ossprocess=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 2. 购买域名和服务器\n- 1.购买域名![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141247340.png)\n- 2.购买服务器（境内要备案，境外可以不用备案），选择镜像==Ubuntu18==\n		![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141441695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141557328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141633714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142314210.png)\n### 3. 域名解析\n- 记录值为服务器的**公网IP**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142153148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 在==git bash here==中执行`ssh root@test.topfullstack.com`![在这里插入图片描述](https://img-blog.csdnimg.cn/202002141426170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n\n### 4. Nginx 安装和配置\n- `apt update`\n- `apt install nginx -y`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142953450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- **如果没有显示，去阿里云安全组，开启80端口**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214143209193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 5. MongoDB数据库的安装和配置\n- `apt install mongodb-server -y`\n### 6. git 安装、配置ssh-key\n- `apt install -y git`\n- `ssh-keygen`\n- `cat /root/.ssh/id_rsa.pub`，获取到的==ssh-key==，要保存下来![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214143851820.png)\n### 7. Node.js 安装、配置淘宝镜像\n- `apt install -y nodejs`\n- `apt install -y npm`\n- `npm config set registry https://registry.npm.taobao.org`\n- `npm i -g nrm`\n- `npm i -g n`\n- `n use latest`\n- 退出重新连接`exit`，`ssh root@test.topfullstack.com`\n### 8. 拉取代码，安装pm2并启动项目\n- 向github或者gitee提交代码\n- 把ssh-keygen，添加到仓库的公钥，拉取克隆代码![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145050916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 创建一个文件夹，进入文件夹![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145221939.png)\n- clone代码![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145308802.png)\n- 进入==moba==文件夹的==server==文件夹，运行`npm i`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145433737.png)\n- `npm i -g pm2`\n- `pm2 start index.js`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145609924.png)\n### 9. 配置 Nginx 的反向代理\n- 在vscode中找到 ==remote-ssh==插件![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150029557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 点击设置配置文件，点击小窗口进入![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150146826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150227218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 输入密码，连接![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415033060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 进入==/etc/nginx/==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150435516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 去nginx配置网站，**https://www.digitalocean.com/community/tools/nginx**\n- 选择==nodejs==，进入==server==，填入自己域名，==https==不启用，最后下载。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151113624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415124556.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151327721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 把==nginxconfig.io==文件夹复制过去，把==available==里面的文件复制过去，把==enabled==里面的文件复制过去![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151426540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 重载nginx的配置文件，`service nginx reload` ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152040485.png)\n- 重启服务器`pm2 start server/index.js`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152027428.png)\n- 成功显示出来![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152125435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 10. 迁移本地数据到服务器 (mongodump)\n- 导出数据库，`mongodump -d node-vue-moba`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152323399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152613482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 进入服务器/root/，将dump文件夹复制过去![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152543341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152814216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- `mongorestore`，恢复数据库	![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152943894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 重启服务器![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415301627.png)\n- 后台就有数据了![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153042919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 后台的图片链接还是**localhost:3000**，需要**修改上传图片的接口**![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415324789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 先上传git，再服务器上去拉取![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153404367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153532403.png)\n- 重启服务器，`pm2 reload index`\n- 通过ssh登录数据库，修改图片链接![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153849916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153954849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)', '<h2><a id=\"httpswwwbilibilicomvideoav58969687p1_0\"></a>以下是我看<a href=\"https://www.bilibili.com/video/av58969687?p=1\" target=\"_blank\">全栈之巅</a>整理的，有兴趣可以看一下</h2>\n<p>这是我写好的项目（后台管理：admin，前台展示：web，服务端：server）<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214133603624.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"1__3\"></a>1. 生产环境编译</h3>\n<ul>\n<li>1.修改axios的<strong>baseURL</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> http = axios.create({\n    <span class=\"hljs-comment\">// baseURL: \"http://localhost:3000/admin/api\"</span>\n    baseURL: process.env.VUE_APP_API_URL || <span class=\"hljs-string\">\'/admin/api\'</span>,\n});\n</code></div></pre>\n<ul>\n<li>2.在admin的根目录添加环境变量文件 <mark>.env.development</mark>，添加 <mark>VUE_APP_API_URL = http://localhost:3000/admin/api</mark><img src=\"https://img-blog.csdnimg.cn/20200214135501887.png\" alt=\"在这里插入图片描述\" /></li>\n<li>3.在<mark>server</mark>的<mark>main.js</mark>，中添加<code>app.use(\'/admin\', express.static(__dirname + \'/admin\')) //静态文件</code></li>\n<li>4.在<mark>admin</mark>中，创建<mark>vue.config.js</mark>配置文件，进行配置<img src=\"https://img-blog.csdnimg.cn/20200214135532853.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">outputDir</span>: __dirname + <span class=\"hljs-string\">\"/../server/admin/\"</span>, <span class=\"hljs-comment\">//将文件输出到server/admin</span>\n  publicPath: process.env.NODE_ENV === <span class=\"hljs-string\">\"production\"</span> ? <span class=\"hljs-string\">\"/admin/\"</span> : <span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-comment\">//当生产环境，就会使用/admin的publicPath</span>\n}\n</code></div></pre>\n<ul>\n<li>5.<mark>admin</mark>中<code>npm run build</code>，就会在server中生成之前配置的admin文件夹<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214135840340.png\" alt=\"在这里插入图片描述\" /></li>\n<li>6.成功访问<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214140034453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>\n<ol start=\"7\">\n<li>在<mark>web</mark>文件夹下执行上面相同的步骤。就会在<mark>server</mark>文件夹，生成<strong>build</strong>的web文件夹。<br />\n注意：<mark>vue.config.js</mark>，配置不同，我们访问的根路径就是前台，所以不用加<strong>web</strong><img src=\"https://img-blog.csdnimg.cn/20200214140646720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140612153.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140712345.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140842324.png?x-ossprocess=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n</li>\n</ul>\n<h3><a id=\"2__26\"></a>2. 购买域名和服务器</h3>\n<ul>\n<li>1.购买域名<img src=\"https://img-blog.csdnimg.cn/20200214141247340.png\" alt=\"在这里插入图片描述\" /></li>\n<li>2.购买服务器（境内要备案，境外可以不用备案），选择镜像<mark>Ubuntu18</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214141441695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214141557328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214141633714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214142314210.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"3__30\"></a>3. 域名解析</h3>\n<ul>\n<li>记录值为服务器的<strong>公网IP</strong><img src=\"https://img-blog.csdnimg.cn/20200214142153148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>在<mark>git bash here</mark>中执行<code>ssh root@test.topfullstack.com</code><img src=\"https://img-blog.csdnimg.cn/202002141426170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"4_Nginx__34\"></a>4. Nginx 安装和配置</h3>\n<ul>\n<li><code>apt update</code></li>\n<li><code>apt install nginx -y</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214142953450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><strong>如果没有显示，去阿里云安全组，开启80端口</strong><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214143209193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"5_MongoDB_40\"></a>5. MongoDB数据库的安装和配置</h3>\n<ul>\n<li><code>apt install mongodb-server -y</code></li>\n</ul>\n<h3><a id=\"6_git_sshkey_42\"></a>6. git 安装、配置ssh-key</h3>\n<ul>\n<li><code>apt install -y git</code></li>\n<li><code>ssh-keygen</code></li>\n<li><code>cat /root/.ssh/id_rsa.pub</code>，获取到的<mark>ssh-key</mark>，要保存下来<img src=\"https://img-blog.csdnimg.cn/20200214143851820.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"7_Nodejs__46\"></a>7. Node.js 安装、配置淘宝镜像</h3>\n<ul>\n<li><code>apt install -y nodejs</code></li>\n<li><code>apt install -y npm</code></li>\n<li><code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li><code>npm i -g nrm</code></li>\n<li><code>npm i -g n</code></li>\n<li><code>n use latest</code></li>\n<li>退出重新连接<code>exit</code>，<code>ssh root@test.topfullstack.com</code></li>\n</ul>\n<h3><a id=\"8_pm2_54\"></a>8. 拉取代码，安装pm2并启动项目</h3>\n<ul>\n<li>向github或者gitee提交代码</li>\n<li>把ssh-keygen，添加到仓库的公钥，拉取克隆代码<img src=\"https://img-blog.csdnimg.cn/20200214145050916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>创建一个文件夹，进入文件夹<img src=\"https://img-blog.csdnimg.cn/20200214145221939.png\" alt=\"在这里插入图片描述\" /></li>\n<li>clone代码<img src=\"https://img-blog.csdnimg.cn/20200214145308802.png\" alt=\"在这里插入图片描述\" /></li>\n<li>进入<mark>moba</mark>文件夹的<mark>server</mark>文件夹，运行<code>npm i</code><img src=\"https://img-blog.csdnimg.cn/20200214145433737.png\" alt=\"在这里插入图片描述\" /></li>\n<li><code>npm i -g pm2</code></li>\n<li><code>pm2 start index.js</code><img src=\"https://img-blog.csdnimg.cn/20200214145609924.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"9__Nginx__62\"></a>9. 配置 Nginx 的反向代理</h3>\n<ul>\n<li>在vscode中找到 <mark>remote-ssh</mark>插件<img src=\"https://img-blog.csdnimg.cn/20200214150029557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>点击设置配置文件，点击小窗口进入<img src=\"https://img-blog.csdnimg.cn/20200214150146826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214150227218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>输入密码，连接<img src=\"https://img-blog.csdnimg.cn/2020021415033060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>进入==/etc/nginx/==<img src=\"https://img-blog.csdnimg.cn/20200214150435516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>去nginx配置网站，<strong>https://www.digitalocean.com/community/tools/nginx</strong></li>\n<li>选择<mark>nodejs</mark>，进入<mark>server</mark>，填入自己域名，<mark>https</mark>不启用，最后下载。<img src=\"https://img-blog.csdnimg.cn/20200214151113624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/2020021415124556.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214151327721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>把<mark>nginxconfig.io</mark>文件夹复制过去，把<mark>available</mark>里面的文件复制过去，把<mark>enabled</mark>里面的文件复制过去<img src=\"https://img-blog.csdnimg.cn/20200214151426540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>重载nginx的配置文件，<code>service nginx reload</code> <img src=\"https://img-blog.csdnimg.cn/20200214152040485.png\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器<code>pm2 start server/index.js</code><img src=\"https://img-blog.csdnimg.cn/20200214152027428.png\" alt=\"在这里插入图片描述\" /></li>\n<li>成功显示出来<img src=\"https://img-blog.csdnimg.cn/20200214152125435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"10__mongodump_73\"></a>10. 迁移本地数据到服务器 (mongodump)</h3>\n<ul>\n<li>导出数据库，<code>mongodump -d node-vue-moba</code><img src=\"https://img-blog.csdnimg.cn/20200214152323399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214152613482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>进入服务器/root/，将dump文件夹复制过去<img src=\"https://img-blog.csdnimg.cn/20200214152543341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214152814216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><code>mongorestore</code>，恢复数据库	<img src=\"https://img-blog.csdnimg.cn/20200214152943894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器<img src=\"https://img-blog.csdnimg.cn/2020021415301627.png\" alt=\"在这里插入图片描述\" /></li>\n<li>后台就有数据了<img src=\"https://img-blog.csdnimg.cn/20200214153042919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>后台的图片链接还是<strong>localhost:3000</strong>，需要<strong>修改上传图片的接口</strong><img src=\"https://img-blog.csdnimg.cn/2020021415324789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>先上传git，再服务器上去拉取<img src=\"https://img-blog.csdnimg.cn/20200214153404367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214153532403.png\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器，<code>pm2 reload index</code></li>\n<li>通过ssh登录数据库，修改图片链接<img src=\"https://img-blog.csdnimg.cn/20200214153849916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214153954849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n', 2, '其他', '其他', '2020-04-03 17:12:20', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (18, '使用免费SSL证书启用HTTPS安全连接', '#### 前提：需要我们把项目已经完全部署在了服务器上\n- 1.进入[certbot](https://certbot.eff.org/)\n- 2.选择自己配置的服务器和系统（我的是Nginx和Ubuntu18）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213195906144.png)\n- 3.在服务器上依次运行\n	- `apt-get update`\n	- `apt-get install software-properties-common`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200524813.png)\n	- `add-apt-repository universe`\n	- `add-apt-repository ppa:certbot/certbot`\n	- `apt-get update`\n	- `apt-get install certbot python-certbot-nginx`\n	- `certbot --nginx`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200842344.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200910564.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200933337.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200956813.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202002132010339.png)\n- 4.最后你需要在阿里云安全组配置443端口，==不然刷新网站之后无响应==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213201153958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n	- 在刷新网站就可以了![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213201315452.png)', '<h4><a id=\"_0\"></a>前提：需要我们把项目已经完全部署在了服务器上</h4>\n<ul>\n<li>1.进入<a href=\"https://certbot.eff.org/\" target=\"_blank\">certbot</a></li>\n<li>2.选择自己配置的服务器和系统（我的是Nginx和Ubuntu18）<img src=\"https://img-blog.csdnimg.cn/20200213195906144.png\" alt=\"在这里插入图片描述\" /></li>\n<li>3.在服务器上依次运行\n<ul>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install software-properties-common</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200524813.png\" alt=\"在这里插入图片描述\" /></li>\n<li><code>add-apt-repository universe</code></li>\n<li><code>add-apt-repository ppa:certbot/certbot</code></li>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install certbot python-certbot-nginx</code></li>\n<li><code>certbot --nginx</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200842344.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200910564.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200933337.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200956813.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/202002132010339.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n</li>\n<li>4.最后你需要在阿里云安全组配置443端口，<mark>不然刷新网站之后无响应</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213201153958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<ul>\n<li>在刷新网站就可以了<img src=\"https://img-blog.csdnimg.cn/20200213201315452.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n</li>\n</ul>\n', 0, '其他', '其他', '2020-04-03 17:12:20', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (19, '阿里云OSS文件上传', '### 如何把文件上传到阿里云的OSS存储\n1. npm一个支持阿里云oss存储的包\n2. `npm install --save multer-aliyun-oss`\n3. mian中引入包，在multer模块中将本地存储换成oss存储\n```js\nconst multer = require(\'multer\');\nconst MAO = require(\'multer-aliyun-oss\');\n \nconst upload = multer({\n    storage: MAO({\n        config: {\n            region: \'<region>\',\n            accessKeyId: \'<accessKeyId>\',\n            accessKeySecret: \'<accessKeySecret>\',\n            bucket: \'<bucket>\'\n        }\n    })\n});\n```\n4. 创建oss存储\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307174626689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n5. 圈是==bucket==，线是==region==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307174914591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n6. 创建AccessKey\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175128563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020030717522281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175254265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175516502.png)\n7.添加权限，否则上传会报500\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175649747.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175710279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n8.完成\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175851400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)', '<h3><a id=\"OSS_0\"></a>如何把文件上传到阿里云的OSS存储</h3>\n<ol>\n<li>npm一个支持阿里云oss存储的包</li>\n<li><code>npm install --save multer-aliyun-oss</code></li>\n<li>mian中引入包，在multer模块中将本地存储换成oss存储</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> multer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'multer\'</span>);\n<span class=\"hljs-keyword\">const</span> MAO = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'multer-aliyun-oss\'</span>);\n \n<span class=\"hljs-keyword\">const</span> upload = multer({\n    <span class=\"hljs-attr\">storage</span>: MAO({\n        <span class=\"hljs-attr\">config</span>: {\n            <span class=\"hljs-attr\">region</span>: <span class=\"hljs-string\">\'&lt;region&gt;\'</span>,\n            <span class=\"hljs-attr\">accessKeyId</span>: <span class=\"hljs-string\">\'&lt;accessKeyId&gt;\'</span>,\n            <span class=\"hljs-attr\">accessKeySecret</span>: <span class=\"hljs-string\">\'&lt;accessKeySecret&gt;\'</span>,\n            <span class=\"hljs-attr\">bucket</span>: <span class=\"hljs-string\">\'&lt;bucket&gt;\'</span>\n        }\n    })\n});\n</code></div></pre>\n<ol start=\"4\">\n<li>创建oss存储<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307174626689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>圈是<mark>bucket</mark>，线是<mark>region</mark><img src=\"https://img-blog.csdnimg.cn/20200307174914591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>创建AccessKey<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175128563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/2020030717522281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175254265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175516502.png\" alt=\"在这里插入图片描述\" /><br />\n7.添加权限，否则上传会报500<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175649747.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175710279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n8.完成<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175851400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n', 2, '其他', '其他', '2020-04-03 16:56:32', '2020-04-03 16:56:32', 0, 0);
INSERT INTO `articles` VALUES (25, '面试复习一', '### var/let/const\n\n*   ==let==不存在变量提升，var存在变量提升\n*   ==let==在同一作用域下，不允许重复声明\n*   ==var==是函数作用域，==let==是块级作用域\n*   ==const==声明只读常量，一旦声明不能再改变，也是块级作用域\n\n### 箭头函数\n\n`let f = v=>{\nreturn v;\n}\nf(10)\n//10\n谁调用箭头函数，this指向谁` \n\n### set与map\n\n*   set数组去重\n\n```js  \n    //const s = new Set();\n    //s.add(1).add(2);\n    var a = [1,2,3,4,4,5,1,2];\n    var b = [...new Set(a)];\n    console.log(b)\n    //[1, 2, 3, 4, 5]\n```\n\n    \n\n*   map\n\n```js\nconst m = new Map();\nm.set(\'name\',\'rmq\').set(\'age\',\'18\');\nfor(let [key,value] of m){}\n```\n### 字符串中大写改小写，小写改大写\n```js\nlet str = \"fdaFDSADF&*(df对方是否sdfoDF\";\nstr = str.replace(/[a-zA-Z]/g, (c) => {\n  return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n});\nconsole.log(str);\n```\n### 手写indexOf（实现字符串匹配算法，从字符串S中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1；不能用内置方法）\n```js\n(function () {\n  //方法一\n  // function index(T) {\n  //   let Slength = this.length;\n  //   let Tlength = T.length;\n  //   let res = -1;\n  //   if (Tlength > Slength) {\n  //     return res;\n  //   }\n  //   for (let i = 0; i <= Slength - Tlength; i++) {\n  //     if (this.substr(i, Tlength) === T) {\n  //       res = i;\n  //       break;\n  //     }\n  //   }\n  //   return res;\n  // }\n  //方法二\n  function index(T) {\n    let reg = new RegExp(T);\n    let res = reg.exec(this);\n    return res === null ? -1 : res.index;\n  }\n  String.prototype.index = index;\n})();\nlet S = \"seffdnnnewfgwhwpjm\";\nlet T = \"new\";\nconsole.log(S.index(T));\n```\n### 正则匹配网址\n```js\nlet url = \"https://www.xiaoruan.com/index.html?name=xr&pwd=123#video\";\nlet reg = /^(?:(http|https|ftp):\\/\\/)?((?:[\\w-]+\\.)+[a-z0-9]+)((?:\\/[^/?#]*)+)?(\\?[^#]+)?(#.+)?$/i;\nconsole.log(reg.exec(url));\n```\n### 公有私有的属性方法\n```js\nfunction Foo() {\n  Foo.a = function () {\n    console.log(1);\n  };\n  this.a = function () {\n    console.log(2);\n  };\n}\n// 把Foo当做类，在原型上设置实例公有的属性方法 =》 实例.a();\nFoo.prototype.a = function () {\n  console.log(3);\n};\n// 把Foo当做普通对象设置私有的属性方法 =》 Foo.a();\nFoo.a = function () {\n  console.log(4);\n};\nFoo.a(); //4\nlet obj = new Foo(); //obj可以调取原型上的方法，Foo.a:f=>1 obj.a:f=>2\nobj.a(); //2 //私有属性中有a\nFoo.a(); //1\n```', '<h3><a id=\"varletconst_0\"></a>var/let/const</h3>\n<ul>\n<li><mark>let</mark>不存在变量提升，var存在变量提升</li>\n<li><mark>let</mark>在同一作用域下，不允许重复声明</li>\n<li><mark>var</mark>是函数作用域，<mark>let</mark>是块级作用域</li>\n<li><mark>const</mark>声明只读常量，一旦声明不能再改变，也是块级作用域</li>\n</ul>\n<h3><a id=\"_7\"></a>箭头函数</h3>\n<p><code>let f = v=&gt;{ return v; } f(10) //10 谁调用箭头函数，this指向谁</code></p>\n<h3><a id=\"setmap_16\"></a>set与map</h3>\n<ul>\n<li>set数组去重</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    <span class=\"hljs-comment\">//const s = new Set();</span>\n    <span class=\"hljs-comment\">//s.add(1).add(2);</span>\n    <span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">var</span> b = [...new <span class=\"hljs-built_in\">Set</span>(a)];\n    <span class=\"hljs-built_in\">console</span>.log(b)\n    <span class=\"hljs-comment\">//[1, 2, 3, 4, 5]</span>\n</code></div></pre>\n<ul>\n<li>map</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nm.set(<span class=\"hljs-string\">\'name\'</span>,<span class=\"hljs-string\">\'rmq\'</span>).set(<span class=\"hljs-string\">\'age\'</span>,<span class=\"hljs-string\">\'18\'</span>);\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [key,value] <span class=\"hljs-keyword\">of</span> m){}\n</code></div></pre>\n<h3><a id=\"_38\"></a>字符串中大写改小写，小写改大写</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"fdaFDSADF&amp;*(df对方是否sdfoDF\"</span>;\nstr = str.replace(<span class=\"hljs-regexp\">/[a-zA-Z]/g</span>, (c) =&gt; {\n  <span class=\"hljs-keyword\">return</span> c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n});\n<span class=\"hljs-built_in\">console</span>.log(str);\n</code></div></pre>\n<h3><a id=\"indexOfST1_46\"></a>手写indexOf（实现字符串匹配算法，从字符串S中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1；不能用内置方法）</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">//方法一</span>\n  <span class=\"hljs-comment\">// function index(T) {</span>\n  <span class=\"hljs-comment\">//   let Slength = this.length;</span>\n  <span class=\"hljs-comment\">//   let Tlength = T.length;</span>\n  <span class=\"hljs-comment\">//   let res = -1;</span>\n  <span class=\"hljs-comment\">//   if (Tlength &gt; Slength) {</span>\n  <span class=\"hljs-comment\">//     return res;</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   for (let i = 0; i &lt;= Slength - Tlength; i++) {</span>\n  <span class=\"hljs-comment\">//     if (this.substr(i, Tlength) === T) {</span>\n  <span class=\"hljs-comment\">//       res = i;</span>\n  <span class=\"hljs-comment\">//       break;</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   return res;</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">//方法二</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">T</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(T);\n    <span class=\"hljs-keyword\">let</span> res = reg.exec(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">return</span> res === <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-number\">-1</span> : res.index;\n  }\n  <span class=\"hljs-built_in\">String</span>.prototype.index = index;\n})();\n<span class=\"hljs-keyword\">let</span> S = <span class=\"hljs-string\">\"seffdnnnewfgwhwpjm\"</span>;\n<span class=\"hljs-keyword\">let</span> T = <span class=\"hljs-string\">\"new\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(S.index(T));\n</code></div></pre>\n<h3><a id=\"_77\"></a>正则匹配网址</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-string\">\"https://www.xiaoruan.com/index.html?name=xr&amp;pwd=123#video\"</span>;\n<span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/^(?:(http|https|ftp):\\/\\/)?((?:[\\w-]+\\.)+[a-z0-9]+)((?:\\/[^/?#]*)+)?(\\?[^#]+)?(#.+)?$/i</span>;\n<span class=\"hljs-built_in\">console</span>.log(reg.exec(url));\n</code></div></pre>\n<h3><a id=\"_83\"></a>公有私有的属性方法</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  Foo.a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);\n  };\n  <span class=\"hljs-keyword\">this</span>.a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);\n  };\n}\n<span class=\"hljs-comment\">// 把Foo当做类，在原型上设置实例公有的属性方法 =》 实例.a();</span>\nFoo.prototype.a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);\n};\n<span class=\"hljs-comment\">// 把Foo当做普通对象设置私有的属性方法 =》 Foo.a();</span>\nFoo.a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);\n};\nFoo.a(); <span class=\"hljs-comment\">//4</span>\n<span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-keyword\">new</span> Foo(); <span class=\"hljs-comment\">//obj可以调取原型上的方法，Foo.a:f=&gt;1 obj.a:f=&gt;2</span>\nobj.a(); <span class=\"hljs-comment\">//2 //私有属性中有a</span>\nFoo.a(); <span class=\"hljs-comment\">//1</span>\n</code></div></pre>\n', 2, '面试', 'es6,js', '2020-04-17 10:22:47', '2021-04-12 20:32:33', 0, 1);
INSERT INTO `articles` VALUES (26, '原生js实现瀑布流', '### 原理\n图片定位：\n- `position:absolute;`\n- `top:最小图片的高度;`\n- `left:最小图片索引*图片的宽度`\n![img5.jpg](http://localhost:3002/uploads/a505f3808438641f6c77a976d3fb1c2d)\n```language\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    .img {\n      position: relative;\n    }\n\n    .img div {\n      width: 22rem;\n      float: left;\n    }\n\n    .img img {\n      width: 22rem;\n      height: auto;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"img\">\n    <div><img src=\"./img/img (1).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (2).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (3).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (4).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (5).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (6).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (7).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (8).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (9).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (10).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (11).jpg\" alt=\"\"></div>\n    <div><img src=\"./img/img (12).jpg\" alt=\"\"></div>\n  </div>\n</body>\n\n<script>\n  window.onload = function () {\n    this.pubu();\n  }\n\n  function pubu() {\n    let imgs = document.getElementsByTagName(\'img\')\n    imgs = [...imgs]\n    let imgW = imgs[0].offsetWidth //当前图片宽度\n    let windowW = window.innerWidth //当前屏幕宽度\n    let cols = parseInt(windowW / imgW) //列数\n    let heightArr = []\n    // 遍历第一排不需要定位\n    for (let i = 0; i < imgs.length; i++) {\n      // heightArr.push(imgs[i].height)\n      var imgH = imgs[i].height;\n      if (i < cols) { //是不是第一排\n        heightArr[i] = imgH;\n      } else {\n        //  求出数组最小值\n        var minImgH = Math.min(...heightArr);\n        console.log(heightArr);\n        var index = heightArr.findIndex((value) => {\n          return value == minImgH\n        })\n\n        imgs[i].style.position = \'absolute\';\n        imgs[i].style.left = index * imgW + \'px\';\n        imgs[i].style.top = minImgH + \'px\';\n      }\n      // 高度追加\n      heightArr[index] += imgH;\n    }\n  }\n</script>\n\n</html>\n```\n**实现效果**\n![img6.jpg](http://localhost:3002/uploads/514f26326dbd4f5fb01be72bd1600009)', '<h3><a id=\"_0\"></a>原理</h3>\n<p>图片定位：</p>\n<ul>\n<li><code>position:absolute;</code></li>\n<li><code>top:最小图片的高度;</code></li>\n<li><code>left:最小图片索引*图片的宽度</code><br />\n<img src=\"http://localhost:3002/uploads/a505f3808438641f6c77a976d3fb1c2d\" alt=\"img5.jpg\" /></li>\n</ul>\n<pre><code class=\"lang-language\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n  &lt;style&gt;\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    .img {\n      position: relative;\n    }\n\n    .img div {\n      width: 22rem;\n      float: left;\n    }\n\n    .img img {\n      width: 22rem;\n      height: auto;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;img&quot;&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (1).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (2).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (3).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (4).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (5).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (6).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (7).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (8).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (9).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (10).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (11).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;img src=&quot;./img/img (12).jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n  window.onload = function () {\n    this.pubu();\n  }\n\n  function pubu() {\n    let imgs = document.getElementsByTagName(\'img\')\n    imgs = [...imgs]\n    let imgW = imgs[0].offsetWidth //当前图片宽度\n    let windowW = window.innerWidth //当前屏幕宽度\n    let cols = parseInt(windowW / imgW) //列数\n    let heightArr = []\n    // 遍历第一排不需要定位\n    for (let i = 0; i &lt; imgs.length; i++) {\n      // heightArr.push(imgs[i].height)\n      var imgH = imgs[i].height;\n      if (i &lt; cols) { //是不是第一排\n        heightArr[i] = imgH;\n      } else {\n        //  求出数组最小值\n        var minImgH = Math.min(...heightArr);\n        console.log(heightArr);\n        var index = heightArr.findIndex((value) =&gt; {\n          return value == minImgH\n        })\n\n        imgs[i].style.position = \'absolute\';\n        imgs[i].style.left = index * imgW + \'px\';\n        imgs[i].style.top = minImgH + \'px\';\n      }\n      // 高度追加\n      heightArr[index] += imgH;\n    }\n  }\n&lt;/script&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><strong>实现效果</strong><br />\n<img src=\"http://localhost:3002/uploads/514f26326dbd4f5fb01be72bd1600009\" alt=\"img6.jpg\" /></p>\n', 1, '实用', 'js', '2020-04-06 20:26:00', '2021-04-12 21:20:49', 0, 0);
INSERT INTO `articles` VALUES (27, '防抖与节流', '防抖：事件在n秒内执行一次，若再次触发则==重新计算时间==，常用在input即时搜索。\n节流：事件在n秒内只执行一次，不管怎么再次触发，也只执行一次，常用在点击按钮。\n```js\n  let content = document.getElementById(\'content\');\n\n  function count() {\n    content.innerHTML = num++;\n  }\n```\n\n### **防抖**\n- 事件触发后1秒再执行（延迟执行）\n```js\n  function debounce(func, wait) {\n    let time;\n    return function () {\n      if (time) {//如果有定时器，清除\n        clearTimeout(time);\n      }\n      time = setTimeout(() => {//没有定时器增加一个，1秒后执行函数\n        func();\n      }, wait);\n    }\n  }\ncontent.onmousemove = debounce(count, 1000);\n```\n- 事件触发后，立即执行，1秒后才能再次执行（立即执行）\n```js\n  function debounce(func, wait) {\n    let time;\n    return function () {\n      if (time) {\n        clearTimeout(time) //取消之前任务\n      }\n      let flag = !time; //用来标记time状态\n      time = setTimeout(() => { //增加一个定时器\n        time = null; //1秒后清空定时器\n      }, wait);\n      if (flag) { //第一次执行\n        func();\n      }\n    }\n  }\n  content.onmousemove = debounce(count, 1000);\n```\n### **节流**\n- 固定时间去发送请求\n```js\n  function throttle(func, wait) {\n    let time;\n    return function () {\n      if (!time) { //是否有定时器\n        time = setTimeout(() => {\n          time = null; //2秒后清空定时器\n          func(); //执行函数\n        }, wait);\n      }\n    }\n  }\ncontent.onmousemove= throttle(count, 2000);\n```\n- 时间戳\n```js\n  function throttle(func, wait) {\n    let prev = 0; //之前的时间\n    return function () {\n      let now = Date.now() //现在的时间\n      if (now - prev > wait) { //现在时间减去之前时间\n        func();\n        prev = now; //重新赋值\n      }\n    }\n  }\n  content.onmousemove= throttle(count, 2000);\n```\n', '<p>防抖：事件在n秒内执行一次，若再次触发则<mark>重新计算时间</mark>，常用在input即时搜索。<br />\n节流：事件在n秒内只执行一次，不管怎么再次触发，也只执行一次，常用在点击按钮。</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-keyword\">let</span> content = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'content\'</span>);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\"></span>) </span>{\n    content.innerHTML = num++;\n  }\n</code></div></pre>\n<h3><a id=\"_10\"></a><strong>防抖</strong></h3>\n<ul>\n<li>事件触发后1秒再执行（延迟执行）</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">func, wait</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> time;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (time) {<span class=\"hljs-comment\">//如果有定时器，清除</span>\n        clearTimeout(time);\n      }\n      time = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {<span class=\"hljs-comment\">//没有定时器增加一个，1秒后执行函数</span>\n        func();\n      }, wait);\n    }\n  }\ncontent.onmousemove = debounce(count, <span class=\"hljs-number\">1000</span>);\n</code></div></pre>\n<ul>\n<li>事件触发后，立即执行，1秒后才能再次执行（立即执行）</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">func, wait</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> time;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (time) {\n        clearTimeout(time) <span class=\"hljs-comment\">//取消之前任务</span>\n      }\n      <span class=\"hljs-keyword\">let</span> flag = !time; <span class=\"hljs-comment\">//用来标记time状态</span>\n      time = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { <span class=\"hljs-comment\">//增加一个定时器</span>\n        time = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">//1秒后清空定时器</span>\n      }, wait);\n      <span class=\"hljs-keyword\">if</span> (flag) { <span class=\"hljs-comment\">//第一次执行</span>\n        func();\n      }\n    }\n  }\n  content.onmousemove = debounce(count, <span class=\"hljs-number\">1000</span>);\n</code></div></pre>\n<h3><a id=\"_45\"></a><strong>节流</strong></h3>\n<ul>\n<li>固定时间去发送请求</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">func, wait</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> time;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (!time) { <span class=\"hljs-comment\">//是否有定时器</span>\n        time = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n          time = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">//2秒后清空定时器</span>\n          func(); <span class=\"hljs-comment\">//执行函数</span>\n        }, wait);\n      }\n    }\n  }\ncontent.onmousemove= throttle(count, <span class=\"hljs-number\">2000</span>);\n</code></div></pre>\n<ul>\n<li>时间戳</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">func, wait</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//之前的时间</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-built_in\">Date</span>.now() <span class=\"hljs-comment\">//现在的时间</span>\n      <span class=\"hljs-keyword\">if</span> (now - prev &gt; wait) { <span class=\"hljs-comment\">//现在时间减去之前时间</span>\n        func();\n        prev = now; <span class=\"hljs-comment\">//重新赋值</span>\n      }\n    }\n  }\n  content.onmousemove= throttle(count, <span class=\"hljs-number\">2000</span>);\n</code></div></pre>\n', 3, '技术', 'js', '2020-04-11 15:54:51', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (28, 'apply/call/bind的区别', '**每个函数都包含两个非继承而来的方法：call()和apply()；**\n**在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。**\n**bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。**\n\n\napply/call/bind可以动态改变this指向\n```js\n  var o = {name:\'abc\'};\n  function f() {\n    console.log(this.name);\n  }\n  f();//undefined\n  f.apply(o);//abc\n  f.call(o);//abc\n  f.bind(o)();//abc(bind 返回的是一个新的函数，你必须调用它才会被执行。)\n//f()=f.apply()=f.call()\n```\n**区别：参数书写方式不同\ncall(thisObj, arg1, arg2, arg3);\napply(thisObj, [args]);\nbind(this.Obj,arg1, arg2, arg3)();**\n- apply\n\n```js\n  function f(s) {\n    console.log(this.a, s);\n    return this.a + s;\n  }\n  var obj = {\n    a: 2\n  }\n  var f2 = function () {\n    return f.apply(obj, arguments);//arguments==[3]\n  }\n  var b = f2(3);\n  console.log(b);\n//2 3 5\n```\n- call\n```js\n  function f(s) {\n    console.log(this.a, s);\n    return this.a + s;\n  }\n  var obj = {\n    a: 2\n  }\n  var f2 = function () {\n    return f.call(obj, ...arguments);//...arguments==3\n  }\n  var b = f2(3);\n  console.log(b);\n//2 3 5\n```\n- bind\n```js\n  function f(s) {\n    console.log(this.a, s);\n    return this.a + s;\n  }\n  var obj = {\n    a: 2\n  }\n  var f2 = function () {\n    return f.bind(obj, ...arguments)();//传参与call一样，只是多了()\n  }\n  var b = f2(3);\n  console.log(b);\n//2 3 5\n```\n\n\n\n', '<p><strong>每个函数都包含两个非继承而来的方法：call()和apply()；</strong><br />\n<strong>在JavaScript中，call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向。</strong><br />\n<strong>bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</strong></p>\n<p>apply/call/bind可以动态改变this指向</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-keyword\">var</span> o = {<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'abc\'</span>};\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name);\n  }\n  f();<span class=\"hljs-comment\">//undefined</span>\n  f.apply(o);<span class=\"hljs-comment\">//abc</span>\n  f.call(o);<span class=\"hljs-comment\">//abc</span>\n  f.bind(o)();<span class=\"hljs-comment\">//abc(bind 返回的是一个新的函数，你必须调用它才会被执行。)</span>\n<span class=\"hljs-comment\">//f()=f.apply()=f.call()</span>\n</code></div></pre>\n<p><strong>区别：参数书写方式不同<br />\ncall(thisObj, arg1, arg2, arg3);<br />\napply(thisObj, [args]);<br />\nbind(this.Obj,arg1, arg2, arg3)();</strong></p>\n<ul>\n<li>apply</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a, s);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + s;\n  }\n  <span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>\n  }\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> f.apply(obj, <span class=\"hljs-built_in\">arguments</span>);<span class=\"hljs-comment\">//arguments==[3]</span>\n  }\n  <span class=\"hljs-keyword\">var</span> b = f2(<span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-built_in\">console</span>.log(b);\n<span class=\"hljs-comment\">//2 3 5</span>\n</code></div></pre>\n<ul>\n<li>call</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a, s);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + s;\n  }\n  <span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>\n  }\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> f.call(obj, ...arguments);<span class=\"hljs-comment\">//...arguments==3</span>\n  }\n  <span class=\"hljs-keyword\">var</span> b = f2(<span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-built_in\">console</span>.log(b);\n<span class=\"hljs-comment\">//2 3 5</span>\n</code></div></pre>\n<ul>\n<li>bind</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a, s);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + s;\n  }\n  <span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>\n  }\n  <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> f.bind(obj, ...arguments)();<span class=\"hljs-comment\">//传参与call一样，只是多了()</span>\n  }\n  <span class=\"hljs-keyword\">var</span> b = f2(<span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-built_in\">console</span>.log(b);\n<span class=\"hljs-comment\">//2 3 5</span>\n</code></div></pre>\n', 2, '基础', 'js', '2020-04-12 16:21:06', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (29, '数组扁平化（包含去重和排序）', '- 方法一：使用es6中的Array.prototype.flat处理\n```js\nlet arr = [1, 2, 3, [7, 6],\n  [5, 4, [3, 1, [9, 10, 11]],\n    [1, 2, 8]\n  ], 2, 3\n];\nlet arr1 = arr.flat(Infinity);\n// 去重\narr1 = [...new Set(arr1)];\n// arr1 = Array.from(new Set(arr1));\n// 排序\narr1 = arr1.sort((a, b) => a - b);\nconsole.log(arr1);\n//(11) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n```\n- 方法二：数组toString之后，不管你有多少级，最后都会变为逗号分隔的字符串\n```js\nlet arr = [1, 2, 3, [7, 6],\n  [5, 4, [3, 1, [9, 10, 11]],\n    [1, 2, 8]\n  ], 2, 3\n];\nlet arr2 = arr.toString();\narr2 = arr2.split(\',\').map(v => Number(v));\nconsole.log(arr2);\n//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]\n```\n- 方法三：通过JSON.stringify\n```js\nlet arr = [1, 2, 3, [7, 6],\n  [5, 4, [3, 1, [9, 10, 11]],\n    [1, 2, 8]\n  ], 2, 3\n];\nlet arr3 = JSON.stringify(arr).replace(/\\[|\\]/g, \'\'); //\"[1,2,3,[7,6],[5,4,[3,1,[9,10,11]],[1,2,8]],2,3]\".replace(/\\[|\\]/g, \'\')\narr3 = arr3.split(\',\').map(v => Number(v))\nconsole.log(arr3);\n//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]\n```\n- 方法四：通过concat与...arr\n```js\nlet arr4 = [1, 2, 3, [7, 6],\n  [5, 4, [3, 1, [9, 10, 11]],\n    [1, 2, 8]\n  ], 2, 3\n];\nwhile (arr4.some(item => Array.isArray(item))) {\n  arr4 = [].concat(...arr4);\n}\nconsole.log(arr4);\n//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]\n```\n- 方法五：自己处理\n```js\n~ function () {\n  function myFlat() {\n    let result = [];\n    let _this = this;\n    let fn = (array) => {\n      for (let i = 0; i < array.length; i++) {\n        if (Array.isArray(array[i])) {\n          fn(array[i]);\n        } else {\n          result.push(array[i]);\n        }\n      }\n    };\n    fn(_this);\n    return result;\n  }\n  Array.prototype.myFlat = myFlat;\n}()\nlet arr = [1, 2, 3, [7, 6],\n  [5, 4, [3, 1, [9, 10, 11]],\n    [1, 2, 8]\n  ], 2, 3\n];\narr.myFlat();\n//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]\n```', '<ul>\n<li>方法一：使用es6中的Array.prototype.flat处理</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>]\n  ], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>\n];\n<span class=\"hljs-keyword\">let</span> arr1 = arr.flat(<span class=\"hljs-literal\">Infinity</span>);\n<span class=\"hljs-comment\">// 去重</span>\narr1 = [...new <span class=\"hljs-built_in\">Set</span>(arr1)];\n<span class=\"hljs-comment\">// arr1 = Array.from(new Set(arr1));</span>\n<span class=\"hljs-comment\">// 排序</span>\narr1 = arr1.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a - b);\n<span class=\"hljs-built_in\">console</span>.log(arr1);\n<span class=\"hljs-comment\">//(11) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span>\n</code></div></pre>\n<ul>\n<li>方法二：数组toString之后，不管你有多少级，最后都会变为逗号分隔的字符串</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>]\n  ], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>\n];\n<span class=\"hljs-keyword\">let</span> arr2 = arr.toString();\narr2 = arr2.split(<span class=\"hljs-string\">\',\'</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> <span class=\"hljs-built_in\">Number</span>(v));\n<span class=\"hljs-built_in\">console</span>.log(arr2);\n<span class=\"hljs-comment\">//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]</span>\n</code></div></pre>\n<ul>\n<li>方法三：通过JSON.stringify</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>]\n  ], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>\n];\n<span class=\"hljs-keyword\">let</span> arr3 = <span class=\"hljs-built_in\">JSON</span>.stringify(arr).replace(<span class=\"hljs-regexp\">/\\[|\\]/g</span>, <span class=\"hljs-string\">\'\'</span>); <span class=\"hljs-comment\">//\"[1,2,3,[7,6],[5,4,[3,1,[9,10,11]],[1,2,8]],2,3]\".replace(/\\[|\\]/g, \'\')</span>\narr3 = arr3.split(<span class=\"hljs-string\">\',\'</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> <span class=\"hljs-built_in\">Number</span>(v))\n<span class=\"hljs-built_in\">console</span>.log(arr3);\n<span class=\"hljs-comment\">//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]</span>\n</code></div></pre>\n<ul>\n<li>方法四：通过concat与…arr</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr4 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>]\n  ], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>\n];\n<span class=\"hljs-keyword\">while</span> (arr4.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-built_in\">Array</span>.isArray(item))) {\n  arr4 = [].concat(...arr4);\n}\n<span class=\"hljs-built_in\">console</span>.log(arr4);\n<span class=\"hljs-comment\">//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]</span>\n</code></div></pre>\n<ul>\n<li>方法五：自己处理</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">~ <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFlat</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">let</span> result = [];\n    <span class=\"hljs-keyword\">let</span> _this = <span class=\"hljs-keyword\">this</span>;\n    <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\">(<span class=\"hljs-params\">array</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(array[i])) {\n          fn(array[i]);\n        } <span class=\"hljs-keyword\">else</span> {\n          result.push(array[i]);\n        }\n      }\n    };\n    fn(_this);\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n  <span class=\"hljs-built_in\">Array</span>.prototype.myFlat = myFlat;\n}()\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>]\n  ], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>\n];\narr.myFlat();\n<span class=\"hljs-comment\">//(17) [1, 2, 3, 7, 6, 5, 4, 3, 1, 9, 10, 11, 1, 2, 8, 2, 3]</span>\n</code></div></pre>\n', 2, '基础', 'js,es6', '2020-04-17 10:22:47', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (30, '三大排序算法', '+ 冒泡排序\n思路：从第一项开始，与它后面的一项进行比较，如果大于后面的项，则交换位置，第二项又与第三项比较，直到判断完。第二轮也是同样，但比较次数会少一次，因为第一次已经排好了。（比较轮数是length-1，比较次数是length-1-i）\n```js\nlet arr = [12, 8, 24, 16, 1];\n\nfunction bubbleSort(arr) {\n  let temp = null\n  for (let i = 0; i < arr.length - 1; i++) { //轮数\n    for (let j = 0; j <= arr.length - 1 - i; j++) { //次数\n      if (arr[j] > arr[j + 1]) { //前一项与后一项比较，大的交换，小的不变\n        temp = arr[j]\n        arr[j] = arr[j + 1]\n        arr[j + 1] = temp\n      }\n    }\n  }\n  return arr;\n}\narr = bubbleSort(arr)\nconsole.log(arr);//[ 1, 8, 12, 16, 24 ]\n```\n+ 插入排序\n思路：取出数组的第一项放到新数组里，让剩余的每一项与新数组的每一项进行比较，小的放左边，大的放右边。（类似于拿牌）\n```js\nlet arr = [12, 8, 24, 16, 1];\n\nfunction insertSort(arr) {\n  let res = []\n  res.push(arr[0]) //手里的牌\n  for (let i = 1; i < arr.length; i++) {\n    // 新抓的牌\n    let A = arr[i]\n    for (let j = res.length - 1; j >= 0; j--) {\n      // 循环手里牌\n      let B = res[j]\n      if (A > B) {\n        // 如果新抓的牌大于手里的牌，排右边，小于不变\n        res.splice(j + 1, 0, A);\n        break;\n      }\n      if (j === 0) { //如果循环完，新的排都比手中的小，排最左边\n        res.unshift(A)\n      }\n    }\n  }\n  return res\n}\narr = insertSort(arr);\nconsole.log(arr);//[ 1, 8, 12, 16, 24 ]\n```\n+ 快速排序\n思路：取出数组中间项，把小于中间项的放左边数组，大于中间项的放右边数组，再把左边和右边数组递归，连接左边+中间值+右边，得到最终结果。\n```js\nlet arr = [12, 8, 24, 16, 1];\n\nfunction quickSort(arr) {\n  if (arr.length <= 0) {\n    return arr\n  }\n  let middleIndex = Math.floor(arr.length / 2) //找到中间位置索引\n  let middleValue = arr.splice(middleIndex, 1)[0] //找到中间值\n  let leftArr = [],\n    rightArr = []\n  for (let i = 0; i < arr.length; i++) {\n    // 小于中间值，排左边，大于排右边\n    arr[i] < middleValue ? leftArr.push(arr[i]) : rightArr.push(arr[i])\n  }\n  // 递归左边+中间值+递归右边\n  return quickSort(leftArr).concat(middleValue, quickSort(rightArr))\n}\narr = quickSort(arr);\nconsole.log(arr);//[ 1, 8, 12, 16, 24 ]\n```\n\n\n', '<ul>\n<li>冒泡排序<br />\n思路：从第一项开始，与它后面的一项进行比较，如果大于后面的项，则交换位置，第二项又与第三项比较，直到判断完。第二轮也是同样，但比较次数会少一次，因为第一次已经排好了。（比较轮数是length-1，比较次数是length-1-i）</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; i++) { <span class=\"hljs-comment\">//轮数</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= arr.length - <span class=\"hljs-number\">1</span> - i; j++) { <span class=\"hljs-comment\">//次数</span>\n      <span class=\"hljs-keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"hljs-number\">1</span>]) { <span class=\"hljs-comment\">//前一项与后一项比较，大的交换，小的不变</span>\n        temp = arr[j]\n        arr[j] = arr[j + <span class=\"hljs-number\">1</span>]\n        arr[j + <span class=\"hljs-number\">1</span>] = temp\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> arr;\n}\narr = bubbleSort(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[ 1, 8, 12, 16, 24 ]</span>\n</code></div></pre>\n<ul>\n<li>插入排序<br />\n思路：取出数组的第一项放到新数组里，让剩余的每一项与新数组的每一项进行比较，小的放左边，大的放右边。（类似于拿牌）</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertSort</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res = []\n  res.push(arr[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">//手里的牌</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; arr.length; i++) {\n    <span class=\"hljs-comment\">// 新抓的牌</span>\n    <span class=\"hljs-keyword\">let</span> A = arr[i]\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = res.length - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span>; j--) {\n      <span class=\"hljs-comment\">// 循环手里牌</span>\n      <span class=\"hljs-keyword\">let</span> B = res[j]\n      <span class=\"hljs-keyword\">if</span> (A &gt; B) {\n        <span class=\"hljs-comment\">// 如果新抓的牌大于手里的牌，排右边，小于不变</span>\n        res.splice(j + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, A);\n        <span class=\"hljs-keyword\">break</span>;\n      }\n      <span class=\"hljs-keyword\">if</span> (j === <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">//如果循环完，新的排都比手中的小，排最左边</span>\n        res.unshift(A)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n}\narr = insertSort(arr);\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[ 1, 8, 12, 16, 24 ]</span>\n</code></div></pre>\n<ul>\n<li>快速排序<br />\n思路：取出数组中间项，把小于中间项的放左边数组，大于中间项的放右边数组，再把左边和右边数组递归，连接左边+中间值+右边，得到最终结果。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (arr.length &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> arr\n  }\n  <span class=\"hljs-keyword\">let</span> middleIndex = <span class=\"hljs-built_in\">Math</span>.floor(arr.length / <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">//找到中间位置索引</span>\n  <span class=\"hljs-keyword\">let</span> middleValue = arr.splice(middleIndex, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">//找到中间值</span>\n  <span class=\"hljs-keyword\">let</span> leftArr = [],\n    rightArr = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n    <span class=\"hljs-comment\">// 小于中间值，排左边，大于排右边</span>\n    arr[i] &lt; middleValue ? leftArr.push(arr[i]) : rightArr.push(arr[i])\n  }\n  <span class=\"hljs-comment\">// 递归左边+中间值+递归右边</span>\n  <span class=\"hljs-keyword\">return</span> quickSort(leftArr).concat(middleValue, quickSort(rightArr))\n}\narr = quickSort(arr);\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[ 1, 8, 12, 16, 24 ]</span>\n</code></div></pre>\n', 1, '技术', '算法,js', '2020-05-26 09:16:34', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (31, '一次完整的HTTP服务过程', '分析：当我在浏览器输入`www.baidu.com`，具体发生了什么？\n- 首先对`www.baidu.com`这个网址进行DNS域名解析，得到对应的IP地址。（解析域名）\n- 根据IP找到对应的服务器，发起TCP的三次握手。（发起连接）\n- 建立TCP连接，发起HTTP请求。（建立连接）\n- 服务器响应HTTP请求，发送HTML代码，浏览器得到代码。（响应请求）\n- 浏览器解析HTML代码，并请求HTML中的资源（css，js，图片等）。（解析代码）\n- 浏览器对页面进行渲染，呈现给用户。（渲染页面）\n- 服务器关闭TCP连接。（关闭连接）\n\n**注：**\n1. DNS怎么找到域名？\n> DNS域名解析采用的是递归查询的方式，先去找DNS缓存-->缓存找不到就去找根域名服务器-->根域名又会去找下一级，找到了就会给浏览器。\n> - 浏览器自身域名缓存区查找\n> - 浏览器搜索系统自身的DNS缓存\n> - 从hosts文件里面找\n> - 递归去域名服务器找\n2. 为什么HTTP协议要基于TCP来实现？\n> TCP是端到端的可靠的面向连接的协议，HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，会重传）。\n3. 浏览器是如何对页面进行渲染的？\n> 1. 解析html文件构成DOM树。\n> 2. 解析css文件构成渲染树。\n> 3. 边解析，边渲染。\n> 4. JS是单线程运行，JS可能修改DOM结构，意味着JS执行完成前，后续的所有资源下载是没有必要的，所以JS是单线程，会阻塞后续资源下载。\n>> - DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其**位置和大小等**，**直接影响**到了其父元素以及往上追溯很多祖先元素（包括兄弟元素），这个过程称为==reflow==（回流，重排）。如果只是改变某个元素的背景色、文字颜色、边框颜色等等**不影响它周围或内部布局的属性**，将只会引起浏览器==repaint==（重绘）。**repaint 的速度明显快于 reflow**\n>> - 减少回流要注意哪些方式呢？\n>>> - 1：不要通过父级来改变子元素样式，最好直接改变子元素样式，改变子元素样式尽可能不要影响父元素和兄弟元素的大小和尺寸\n>>> - 2：尽量通过class来设计元素样式，切忌用style\n>>> - 3：实现元素的动画，对于经常要进行回流的组件，要抽离出来，它的position属性应当设为fixed或absolute\n>>> - 4：尽量采取批量更新元素样式的方式，可以减少回流的次数。\n', '<p>分析：当我在浏览器输入<code>www.baidu.com</code>，具体发生了什么？</p>\n<ul>\n<li>首先对<code>www.baidu.com</code>这个网址进行DNS域名解析，得到对应的IP地址。（解析域名）</li>\n<li>根据IP找到对应的服务器，发起TCP的三次握手。（发起连接）</li>\n<li>建立TCP连接，发起HTTP请求。（建立连接）</li>\n<li>服务器响应HTTP请求，发送HTML代码，浏览器得到代码。（响应请求）</li>\n<li>浏览器解析HTML代码，并请求HTML中的资源（css，js，图片等）。（解析代码）</li>\n<li>浏览器对页面进行渲染，呈现给用户。（渲染页面）</li>\n<li>服务器关闭TCP连接。（关闭连接）</li>\n</ul>\n<p><strong>注：</strong></p>\n<ol>\n<li>DNS怎么找到域名？</li>\n</ol>\n<blockquote>\n<p>DNS域名解析采用的是递归查询的方式，先去找DNS缓存–&gt;缓存找不到就去找根域名服务器–&gt;根域名又会去找下一级，找到了就会给浏览器。</p>\n<ul>\n<li>浏览器自身域名缓存区查找</li>\n<li>浏览器搜索系统自身的DNS缓存</li>\n<li>从hosts文件里面找</li>\n<li>递归去域名服务器找</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li>为什么HTTP协议要基于TCP来实现？</li>\n</ol>\n<blockquote>\n<p>TCP是端到端的可靠的面向连接的协议，HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，会重传）。</p>\n</blockquote>\n<ol start=\"3\">\n<li>浏览器是如何对页面进行渲染的？</li>\n</ol>\n<blockquote>\n<ol>\n<li>解析html文件构成DOM树。</li>\n<li>解析css文件构成渲染树。</li>\n<li>边解析，边渲染。</li>\n<li>JS是单线程运行，JS可能修改DOM结构，意味着JS执行完成前，后续的所有资源下载是没有必要的，所以JS是单线程，会阻塞后续资源下载。</li>\n</ol>\n<blockquote>\n<ul>\n<li>DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其<strong>位置和大小等</strong>，<strong>直接影响</strong>到了其父元素以及往上追溯很多祖先元素（包括兄弟元素），这个过程称为<mark>reflow</mark>（回流，重排）。如果只是改变某个元素的背景色、文字颜色、边框颜色等等<strong>不影响它周围或内部布局的属性</strong>，将只会引起浏览器<mark>repaint</mark>（重绘）。<strong>repaint 的速度明显快于 reflow</strong></li>\n<li>减少回流要注意哪些方式呢？</li>\n</ul>\n<blockquote>\n<ul>\n<li>1：不要通过父级来改变子元素样式，最好直接改变子元素样式，改变子元素样式尽可能不要影响父元素和兄弟元素的大小和尺寸</li>\n<li>2：尽量通过class来设计元素样式，切忌用style</li>\n<li>3：实现元素的动画，对于经常要进行回流的组件，要抽离出来，它的position属性应当设为fixed或absolute</li>\n<li>4：尽量采取批量更新元素样式的方式，可以减少回流的次数。</li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n', 14, '基础', '其他', '2020-04-30 15:29:22', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (32, 'vue的watch监听', '\n```html\n<template>\n  <div class=\"hello\">\n    <button @click=\"change1\">改变msg</button>\n    <h1>{{msg}}</h1>\n    <hr>\n    <button @click=\"change2\">改变obj</button>\n    <h2>{{obj.a}}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'HelloWorld\',\n  data () {\n    return {\n      msg: \'hello\',\n      obj: {\n        a: \'123\'\n      }\n    }\n  },\n  methods: {\n    change1 () {\n      this.msg = \'world\'\n    },\n    change2 () {\n      this.obj.a = \'456\'\n    }\n  },\n}\n</script>\n```\n### 普通监听\n- 可以触发监听，拿到新的值和旧的值\n```js\n  watch: {\n    // 浅监听,可以监听到值的变化\n    msg (newVal, oldVal) {\n      console.log(\'new:\' + newVal);\n      console.log(\'old:\' + oldVal);\n    }\n  }\n```\n![img1.jpg](http://localhost:3002/uploads/c3390ccf6e89c99ec6bc08d79347d140)\n\n\n### 深度监听\n- 受 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。\n- 当我们改变obj.a的值时，我们发现是无效的。没有深度监听对象，是无法触发监听。\n```js\n  watch: {\n    obj: {\n      handler (newVal, oldVal) {\n        console.log(\'watch1\');\n        console.log(\'new:\' + newVal);\n        console.log(\'old:\' + oldVal);\n      },\n      // deep: true\n    }\n  }\n```\n![img4.jpg](http://localhost:3002/uploads/78a86ad3a2d9832895421a9fbdfbf94a)\n\n\n- deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler。\n- 引用类型需要深度监听才会触发监听，但是拿不到oldVal值\n```js\n  watch: {\n    obj: {\n      handler (newVal, oldVal) {\n        console.log(\'watch1\');\n        console.log(\'new:\' + newVal.a);\n        console.log(\'old:\' + oldVal.a);\n      },\n      deep: true\n    }\n  }\n```\n![img3.jpg](http://localhost:3002/uploads/65226e2629b1cc3dae81ca5fbbd0b45f)\n\n\n- 优化，我们可以是使用字符串形式监听，可以不用深度监听。\n- 可以出发监听，可以拿到oldVal值\n```js\n  watch: {\n    \'obj.a\': {\n      handler (newVal, oldVal) {\n        console.log(\'watch2\');\n        console.log(\'newVal:\' + newVal);\n        console.log(\'oldVal:\' + oldVal);\n      },\n      // deep: true\n    }\n  }\n```\n![img4.jpg](http://localhost:3002/uploads/4e6ab1c2632d0112e27a59e6a8f00522)', '<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"change1\"</span>&gt;</span>改变msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{msg}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"change2\"</span>&gt;</span>改变obj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{obj.a}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'HelloWorld\'</span>,\n  data () {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">\'hello\'</span>,\n      <span class=\"hljs-attr\">obj</span>: {\n        <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">\'123\'</span>\n      }\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    change1 () {\n      <span class=\"hljs-keyword\">this</span>.msg = <span class=\"hljs-string\">\'world\'</span>\n    },\n    change2 () {\n      <span class=\"hljs-keyword\">this</span>.obj.a = <span class=\"hljs-string\">\'456\'</span>\n    }\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"_34\"></a>普通监听</h3>\n<ul>\n<li>可以触发监听，拿到新的值和旧的值</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  watch: {\n    <span class=\"hljs-comment\">// 浅监听,可以监听到值的变化</span>\n    msg (newVal, oldVal) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'new:\'</span> + newVal);\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'old:\'</span> + oldVal);\n    }\n  }\n</code></div></pre>\n<p><img src=\"http://localhost:3002/uploads/c3390ccf6e89c99ec6bc08d79347d140\" alt=\"img1.jpg\" /></p>\n<h3><a id=\"_48\"></a>深度监听</h3>\n<ul>\n<li>受 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</li>\n<li>当我们改变obj.a的值时，我们发现是无效的。没有深度监听对象，是无法触发监听。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  watch: {\n    <span class=\"hljs-attr\">obj</span>: {\n      handler (newVal, oldVal) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'watch1\'</span>);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'new:\'</span> + newVal);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'old:\'</span> + oldVal);\n      },\n      <span class=\"hljs-comment\">// deep: true</span>\n    }\n  }\n</code></div></pre>\n<p><img src=\"http://localhost:3002/uploads/78a86ad3a2d9832895421a9fbdfbf94a\" alt=\"img4.jpg\" /></p>\n<ul>\n<li>deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler。</li>\n<li>引用类型需要深度监听才会触发监听，但是拿不到oldVal值</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  watch: {\n    <span class=\"hljs-attr\">obj</span>: {\n      handler (newVal, oldVal) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'watch1\'</span>);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'new:\'</span> + newVal.a);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'old:\'</span> + oldVal.a);\n      },\n      <span class=\"hljs-attr\">deep</span>: <span class=\"hljs-literal\">true</span>\n    }\n  }\n</code></div></pre>\n<p><img src=\"http://localhost:3002/uploads/65226e2629b1cc3dae81ca5fbbd0b45f\" alt=\"img3.jpg\" /></p>\n<ul>\n<li>优化，我们可以是使用字符串形式监听，可以不用深度监听。</li>\n<li>可以出发监听，可以拿到oldVal值</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  watch: {\n    <span class=\"hljs-string\">\'obj.a\'</span>: {\n      handler (newVal, oldVal) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'watch2\'</span>);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'newVal:\'</span> + newVal);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'oldVal:\'</span> + oldVal);\n      },\n      <span class=\"hljs-comment\">// deep: true</span>\n    }\n  }\n</code></div></pre>\n<p><img src=\"http://localhost:3002/uploads/4e6ab1c2632d0112e27a59e6a8f00522\" alt=\"img4.jpg\" /></p>\n', 9, '基础', 'vue', '2020-04-11 20:25:06', '2021-04-12 21:21:16', 0, 0);
INSERT INTO `articles` VALUES (33, 'VUE的高级特性', '- 自定义 v-model\n- $nextTick\n- slot使用\n- 动态、异步加载组件\n- keep-alive缓存组件\n- mixin混入\n### 自定义 v-model\n\n> 在 vue 中，v-model 是用来进行数据双向绑定的一个语法糖，比如说用在 input 上，输入框数据变化，v-model 绑定的对应的值也会跟着变化，无需单独获取。\n> 其实 v-model 还可以在自定义组件中使用，可以被拆解为 props:value 和 event：input，也就是说组件必须接收一个 value 值以及名为 input 的自定义事件，就可以在自定义组件上使用 v-model 了。\n\n- 新建一个组件**UseVModel.vue**\n\n```html\n<template>\n  <input\n    type=\"text\"\n    :value=\"textVal\"\n    @input=\"$emit(\'changeMethod\', $event.target.value)\"\n  />\n  <!-- \n    1. 上面的 input 使用了 :value 而不是 v-model\n    2. 上面的 changeMethod 和 model.event 要对应起来\n    3. textVal 属性对应起来\n   -->\n</template>\n\n<script>\nexport default {\n  props: {\n    textVal: {\n      type: String,\n      default: () => \'\',\n    },\n  },\n  model: {\n    props: \'textVal\',\n    event: \'changeMethod\',\n  },\n}\n</script>\n```\n\n- 引用组件\n\n```html\n<template>\n  <p>{{ name }}</p>\n  <UseVModel v-model=\"name\" />\n</template>\n\n<script>\nimport UseVModel from \'@/components/UseVModel.vue\'\nexport default {\n  components: {\n    UseVModel,\n  },\n  data() {\n    return {\n      name: \'rmq\',\n    }\n  },\n}\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020051216344914.png)\n> 我个人觉得有点类似于父子组件传值，父组件通过==v-model==传值，子组件==props==接收，通过 `:value`，绑定值,然后通过 `$emit()` 触发事件又传值给父组件，实现双向绑定。\n- 可以不写model，但是需要改 `$emit(\'input\',$event.target.value)`。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512163553786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512163624627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### $nextTick\n> $nextTick() 是在下次DOM更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的DOM（DOM的改变是发生在 $nextTick()之后），这个方法作用是当数据被修改后使用这个方法，会回调获取更新后的DOM再render出来。\n> $nextTick()作用：在下次DOM更新循环结束之后，执行延迟回调。在修改数据之后立即使用这个方法，获得更新后的DOM。\n- 创建一个组件==NextTick==\n\n```html\n<template>\n  <div>\n    <ul ref=\"ul1\">\n      <li v-for=\"(item, index) in list\" :key=\"index\">{{ item }}</li>\n    </ul>\n    <button @click=\"change\">添加</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      list: [\'a\', \'b\', \'c\'],\n    }\n  },\n  methods: {\n    change() {\n      this.list.push(`${Date.now()}`)\n      this.list.push(`${Date.now()}`)\n      this.list.push(`${Date.now()}`)\n      // 直接这样写，获取到的是渲染之前的3个\n      // const ul = this.$refs.ul1\n      // console.log(ul.childNodes.length)\n\n      //this.$nextTick()\n      // vue 是 异步渲染，this.$nextTick()待 DOM 渲染完成后再回调\n      // 页面渲染时会将 data 修改整合， 多次的 data 修改 只会渲染一次\n      this.$nextTick(() => {\n        const ul = this.$refs.ul1\n        console.log(ul.childNodes.length)\n      })\n    },\n  },\n}\n</script>\n```\n- 引用组件\n\n```html\n<template>\n  <div class=\"home\">\n    <!-- nextTick -->\n    <NextTick />\n  </div>\n</template>\n```\n- 我们**不用$nextTick**时，是拿不到push之后的DOM节点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512164910523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 但是**用$nextTick**，就可以拿到渲染之后的DOM节点\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512165010638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n\n### slot使用\n- 创建子组件==SlotDemo==\n```html\n<template>\n  <div>\n    <a :href=\"url\">\n      <slot :slotData1=\"slotData1\"\n            name=\"rmq\">父组件没有东西时显示默认内容</slot>\n    </a>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      slotData1: {\n        url: \'www.baidu.com1\',\n        title: \'slot1\',\n        subTitle: \'hello slot1\',\n      },\n    }\n  },\n  props: {\n    url: {\n      type: String,\n      default: \'\',\n    },\n  },\n}\n</script>\n```\n- 引用\n```html\n<template>\n  <div class=\"home\">\n    <!-- slot -->\n    <!-- 父组件没有内容 -->\n    <SlotDemo :url=\"slotData.url\"\n              #rmq></SlotDemo>\n    <!-- 父组件有内容 -->\n    <SlotDemo :url=\"slotData.url\"\n              #rmq>\n      <template>{{ slotData.title }}</template>\n    </SlotDemo>\n    <!-- 父组件接收子组件传过来的slotData1的值，用 SlotProps 接收-->\n    <SlotDemo :url=\"slotData.url\">\n      <template #rmq=\"SlotProps\">\n        {{ SlotProps.slotData1.subTitle }}\n      </template>\n    </SlotDemo>\n  </div>\n</template>\n<script>\nimport SlotDemo from \'@/components/SlotDemo.vue\'\nexport default {\n  components: {\n    SlotDemo,\n  },\n  data() {\n    return {\n      slotData: {\n        url: \'www.baidu.com\',\n        title: \'slot\',\n        subTitle: \'hello slot\',\n      },\n    }\n  },\n}\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512170938433.png)\n>  `props` 和 ` v-slot`配合也可以用来父子组件之间传值\n\n### 动态、异步加载组件\n- 动态组件\n> 一个页面的构成可以动态控制\n```html\n<template>\n  <div>\n    <!-- 动态组件 -->\n    <div v-for=\"(val, key) in comList\" :key=\"key\">\n      <component :is=\"val.componentName\"></component>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      comList: {\n        1: { componentName: \'text\' },\n        2: { componentName: \'text\' },\n        3: { componentName: \'image\' },\n      },\n    }\n  },\n}\n</script>\n```\n> 通过`<component :is=\"componentName\"></component>`，来动态加载组件\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512172506730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 异步加载组件\n> 对于大的组件或者有异步加载组件需求的时候可以用\n```html\n<template>\n  <div class=\"home\">\n    <!-- 异步加载组件 -->\n    <WatchEventCom v-if=\"showCom\"></WatchEventCom>\n    <button @click=\"showCom = true\">异步加载组件</button>\n    <hr />\n  </div>\n</template>\n<script>\nexport default {\n  components: {\n    WatchEventCom: () => import(\'@/components/WatchEvent\'), //如果同时引入2个相同组件，则不会异步加载，没有效果 \n    Mixin,\n  },\n    data() {\n    return {\n      showCom: false,\n    }\n  },\n}\n</script>\n```\n- 异步加载之前\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512174107797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 异步加载之后\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512174217514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### keep-alive缓存组件\n- Props：\n>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。\nexclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。\nmax - 数字。最多可以缓存多少组件实例。\n- 用法：\n> `<keep-alive>` 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 `<transition>` 相似，`<keep-alive>` 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。\n当组件在 `<keep-alive>` 内被切换，它的 `activated` 和 `deactivated` 这两个生命周期钩子函数将会被对应执行。\n```html\n<!-- 基本 -->\n<keep-alive>\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 多个条件判断的子组件 -->\n<keep-alive>\n  <comp-a v-if=\"a > 1\"></comp-a>\n  <comp-b v-else></comp-b>\n</keep-alive>\n\n<!-- 和 `<transition>` 一起使用 -->\n<transition>\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n</transition>\n\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"[\'a\', \'b\']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<keep-alive :max=\"10\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n> 注意，`<keep-alive>` 是用在其一个直属的子组件被开关的情形。如果你在其中有 v-for 则不会工作。如果有上述的多个条件性的子元素，`<keep-alive>` 要求同时只有一个子元素被渲染。\n\n### mixin混入\n- 写一个mixin.js\n```js\nexport default {\n  data() {\n    return {\n      name: \'rmq\'\n    }\n  },\n  mounted() {\n    console.log(\'mixin\');\n  },\n  methods: {\n    mixinMethod() {\n      console.log(\'点击了mixin\');\n    }\n  },\n}\n```\n- 引入组件中\n```html\n<template>\n  <div>\n    <p>name:{{name}}</p>\n    <p>age:{{age}}</p>\n    <button @click=\"mixinMethod\">click</button>\n  </div>\n</template>\n\n<script>\nimport mixin from \'../assets/mixin\';\nexport default {\n  mixins: [mixin],\n  data () {\n    return {\n      age: \'18\'\n    };\n  },\n}\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200512180551996.png)\n> 可以看到组件中能够使用==mixin,js==中的data/methods等的数据方法。相当于把2个合并了。\n> 这样可以抽离一些相同的逻辑，但是会有数据冲突\n- 全局混入\n```js\n// 为自定义的选项 \'myOption\' 注入一个处理器。\nVue.mixin({\n  created: function () {\n    var myOption = this.$options.myOption\n    if (myOption) {\n      console.log(myOption)\n    }\n  }\n})\n\nnew Vue({\n  myOption: \'hello!\'\n})\n// => \"hello!\"\n```', '<ul>\n<li>自定义 v-model</li>\n<li>$nextTick</li>\n<li>slot使用</li>\n<li>动态、异步加载组件</li>\n<li>keep-alive缓存组件</li>\n<li>mixin混入</li>\n</ul>\n<h3><a id=\"_vmodel_6\"></a>自定义 v-model</h3>\n<blockquote>\n<p>在 vue 中，v-model 是用来进行数据双向绑定的一个语法糖，比如说用在 input 上，输入框数据变化，v-model 绑定的对应的值也会跟着变化，无需单独获取。<br />\n其实 v-model 还可以在自定义组件中使用，可以被拆解为 props:value 和 event：input，也就是说组件必须接收一个 value 值以及名为 input 的自定义事件，就可以在自定义组件上使用 v-model 了。</p>\n</blockquote>\n<ul>\n<li>新建一个组件<strong>UseVModel.vue</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n    <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n    <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"textVal\"</span>\n    @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"$emit(\'changeMethod\', $event.target.value)\"</span>\n  /&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- \n    1. 上面的 input 使用了 :value 而不是 v-model\n    2. 上面的 changeMethod 和 model.event 要对应起来\n    3. textVal 属性对应起来\n   --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">textVal</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-string\">\'\'</span>,\n    },\n  },\n  <span class=\"hljs-attr\">model</span>: {\n    <span class=\"hljs-attr\">props</span>: <span class=\"hljs-string\">\'textVal\'</span>,\n    <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">\'changeMethod\'</span>,\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>引用组件</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ name }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UseVModel</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"name\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> UseVModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'@/components/UseVModel.vue\'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: {\n    UseVModel,\n  },\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'rmq\'</span>,\n    }\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020051216344914.png\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p>我个人觉得有点类似于父子组件传值，父组件通过<mark>v-model</mark>传值，子组件<mark>props</mark>接收，通过 <code>:value</code>，绑定值,然后通过 <code>$emit()</code> 触发事件又传值给父组件，实现双向绑定。</p>\n</blockquote>\n<ul>\n<li>可以不写model，但是需要改 <code>$emit(\'input\',$event.target.value)</code>。<br />\n<img src=\"https://img-blog.csdnimg.cn/20200512163553786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200512163624627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"nextTick_70\"></a>$nextTick</h3>\n<blockquote>\n<p>$nextTick() 是在下次DOM更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的DOM（DOM的改变是发生在 nextTick()之后），这个方法作用是当数据被修改后使用这个方法，会回调获取更新后的DOM再render出来。\nnextTick()作用：在下次DOM更新循环结束之后，执行延迟回调。在修改数据之后立即使用这个方法，获得更新后的DOM。</p>\n</blockquote>\n<ul>\n<li>创建一个组件<mark>NextTick</mark></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"ul1\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in list\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>{{ item }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"change\"</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">list</span>: [<span class=\"hljs-string\">\'a\'</span>, <span class=\"hljs-string\">\'b\'</span>, <span class=\"hljs-string\">\'c\'</span>],\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    change() {\n      <span class=\"hljs-keyword\">this</span>.list.push(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Date</span>.now()}</span>`</span>)\n      <span class=\"hljs-keyword\">this</span>.list.push(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Date</span>.now()}</span>`</span>)\n      <span class=\"hljs-keyword\">this</span>.list.push(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Date</span>.now()}</span>`</span>)\n      <span class=\"hljs-comment\">// 直接这样写，获取到的是渲染之前的3个</span>\n      <span class=\"hljs-comment\">// const ul = this.$refs.ul1</span>\n      <span class=\"hljs-comment\">// console.log(ul.childNodes.length)</span>\n\n      <span class=\"hljs-comment\">//this.$nextTick()</span>\n      <span class=\"hljs-comment\">// vue 是 异步渲染，this.$nextTick()待 DOM 渲染完成后再回调</span>\n      <span class=\"hljs-comment\">// 页面渲染时会将 data 修改整合， 多次的 data 修改 只会渲染一次</span>\n      <span class=\"hljs-keyword\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> ul = <span class=\"hljs-keyword\">this</span>.$refs.ul1\n        <span class=\"hljs-built_in\">console</span>.log(ul.childNodes.length)\n      })\n    },\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>引用组件</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"home\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- nextTick --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NextTick</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>我们<strong>不用$nextTick</strong>时，是拿不到push之后的DOM节点<br />\n<img src=\"https://img-blog.csdnimg.cn/20200512164910523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>但是<strong>用$nextTick</strong>，就可以拿到渲染之后的DOM节点<br />\n<img src=\"https://img-blog.csdnimg.cn/20200512165010638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"slot_128\"></a>slot使用</h3>\n<ul>\n<li>创建子组件<mark>SlotDemo</mark></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">\"url\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">:slotData1</span>=<span class=\"hljs-string\">\"slotData1\"</span>\n            <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"rmq\"</span>&gt;</span>父组件没有东西时显示默认内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data () {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">slotData1</span>: {\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\'www.baidu.com1\'</span>,\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\'slot1\'</span>,\n        <span class=\"hljs-attr\">subTitle</span>: <span class=\"hljs-string\">\'hello slot1\'</span>,\n      },\n    }\n  },\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">url</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">\'\'</span>,\n    },\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>引用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"home\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- slot --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 父组件没有内容 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SlotDemo</span> <span class=\"hljs-attr\">:url</span>=<span class=\"hljs-string\">\"slotData.url\"</span>\n              #<span class=\"hljs-attr\">rmq</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SlotDemo</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 父组件有内容 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SlotDemo</span> <span class=\"hljs-attr\">:url</span>=<span class=\"hljs-string\">\"slotData.url\"</span>\n              #<span class=\"hljs-attr\">rmq</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>{{ slotData.title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SlotDemo</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 父组件接收子组件传过来的slotData1的值，用 SlotProps 接收--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SlotDemo</span> <span class=\"hljs-attr\">:url</span>=<span class=\"hljs-string\">\"slotData.url\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> #<span class=\"hljs-attr\">rmq</span>=<span class=\"hljs-string\">\"SlotProps\"</span>&gt;</span>\n        {{ SlotProps.slotData1.subTitle }}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SlotDemo</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> SlotDemo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'@/components/SlotDemo.vue\'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: {\n    SlotDemo,\n  },\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">slotData</span>: {\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\'www.baidu.com\'</span>,\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\'slot\'</span>,\n        <span class=\"hljs-attr\">subTitle</span>: <span class=\"hljs-string\">\'hello slot\'</span>,\n      },\n    }\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200512170938433.png\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p><code>props</code> 和 <code>v-slot</code>配合也可以用来父子组件之间传值</p>\n</blockquote>\n<h3><a id=\"_202\"></a>动态、异步加载组件</h3>\n<ul>\n<li>动态组件</li>\n</ul>\n<blockquote>\n<p>一个页面的构成可以动态控制</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 动态组件 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(val, key) in comList\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"key\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"val.componentName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">comList</span>: {\n        <span class=\"hljs-number\">1</span>: { <span class=\"hljs-attr\">componentName</span>: <span class=\"hljs-string\">\'text\'</span> },\n        <span class=\"hljs-number\">2</span>: { <span class=\"hljs-attr\">componentName</span>: <span class=\"hljs-string\">\'text\'</span> },\n        <span class=\"hljs-number\">3</span>: { <span class=\"hljs-attr\">componentName</span>: <span class=\"hljs-string\">\'image\'</span> },\n      },\n    }\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<p>通过<code>&lt;component :is=&quot;componentName&quot;&gt;&lt;/component&gt;</code>，来动态加载组件</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200512172506730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>异步加载组件</li>\n</ul>\n<blockquote>\n<p>对于大的组件或者有异步加载组件需求的时候可以用</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"home\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 异步加载组件 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WatchEventCom</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"showCom\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">WatchEventCom</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"showCom = true\"</span>&gt;</span>异步加载组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: {\n    <span class=\"hljs-attr\">WatchEventCom</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">\'@/components/WatchEvent\'</span>), <span class=\"hljs-comment\">//如果同时引入2个相同组件，则不会异步加载，没有效果 </span>\n    Mixin,\n  },\n    data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">showCom</span>: <span class=\"hljs-literal\">false</span>,\n    }\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>异步加载之前<br />\n<img src=\"https://img-blog.csdnimg.cn/20200512174107797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>异步加载之后<br />\n<img src=\"https://img-blog.csdnimg.cn/20200512174217514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"keepalive_260\"></a>keep-alive缓存组件</h3>\n<ul>\n<li>Props：</li>\n</ul>\n<blockquote>\n<p>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。<br />\nexclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。<br />\nmax - 数字。最多可以缓存多少组件实例。</p>\n</blockquote>\n<ul>\n<li>用法：</li>\n</ul>\n<blockquote>\n<p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。<br />\n当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- 基本 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 多个条件判断的子组件 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-a</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"a &gt; 1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-b</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-b</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 逗号分隔字符串 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">include</span>=<span class=\"hljs-string\">\"a,b\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">:include</span>=<span class=\"hljs-string\">\"/a|b/\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">:include</span>=<span class=\"hljs-string\">\"[\'a\', \'b\']\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">:max</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<p>注意，<code>&lt;keep-alive&gt;</code> 是用在其一个直属的子组件被开关的情形。如果你在其中有 v-for 则不会工作。如果有上述的多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只有一个子元素被渲染。</p>\n</blockquote>\n<h3><a id=\"mixin_308\"></a>mixin混入</h3>\n<ul>\n<li>写一个mixin.js</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'rmq\'</span>\n    }\n  },\n  mounted() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'mixin\'</span>);\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    mixinMethod() {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'点击了mixin\'</span>);\n    }\n  },\n}\n</code></div></pre>\n<ul>\n<li>引入组件中</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>name:{{name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>age:{{age}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"mixinMethod\"</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> mixin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'../assets/mixin\'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">mixins</span>: [mixin],\n  data () {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">\'18\'</span>\n    };\n  },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200512180551996.png\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p>可以看到组件中能够使用<mark>mixin,js</mark>中的data/methods等的数据方法。相当于把2个合并了。<br />\n这样可以抽离一些相同的逻辑，但是会有数据冲突</p>\n</blockquote>\n<ul>\n<li>全局混入</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 为自定义的选项 \'myOption\' 注入一个处理器。</span>\nVue.mixin({\n  <span class=\"hljs-attr\">created</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> myOption = <span class=\"hljs-keyword\">this</span>.$options.myOption\n    <span class=\"hljs-keyword\">if</span> (myOption) {\n      <span class=\"hljs-built_in\">console</span>.log(myOption)\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">myOption</span>: <span class=\"hljs-string\">\'hello!\'</span>\n})\n<span class=\"hljs-comment\">// =&gt; \"hello!\"</span>\n</code></div></pre>\n', 5, '技术', 'vue', '2020-06-15 13:08:40', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (34, 'js数组对象的浅拷贝和深拷贝', '- 数组的浅拷贝\n\n```js\n// 数组的浅拷贝\nvar arr = [1, 2, 3]\nvar arr1 = arr.concat()\nconsole.log(arr1)\n\nvar arr2 = arr.slice(0)\nconsole.log(arr2)\n\nvar arr3 = [...arr]\nconsole.log(arr3)\n\nvar arr4 = Array.from(arr)\nconsole.log(arr4)\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200620111943837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 对象的浅拷贝\n\n```js\n// 对象的浅拷贝\nvar obj = {\n  name: \'rmq\',\n  age: 10\n}\nvar obj1 = Object.assign({}, obj)\nconsole.log(obj);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200620111959840.png)\n- 深拷贝\n\n```js\n// 深拷贝\nfunction deepCopy(newObj, oldObj) {\n  for (var k in oldObj) {\n    // 1.获取属性值\n    var item = oldObj[k]\n    // 2.判断是否为数组\n    if (item instanceof Array) {\n      newObj[k] = []\n      deepCopy(newObj[k], item)\n      // 3.判断是否为对象\n    } else if (item instanceof Object) {\n      newObj[k] = {}\n      deepCopy(newObj[k], item)\n    } else {\n      newObj[k] = item\n    }\n  }\n}\n\nvar obj = {\n  name: \'tom\',\n  age: 18,\n  like: {\n    eat: \'meat\',\n  },\n  drink: [\'cola\', \'mlik\'],\n}\n// var arr = [1,2,[3,4,[5]]]\nvar o = {}\ndeepCopy(o, obj)\nconsole.log(o)\n\nvar obj = {\n  name: \'tom\',\n  age: 18,\n  like: {\n    eat: \'meat\',\n  },\n  drink: [\'cola\', \'mlik\'],\n}\nvar obj1 = JSON.parse(JSON.stringify(obj))\nobj1.age = 16\nconsole.log(obj)\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200620112329994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n', '<ul>\n<li>数组的浅拷贝</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 数组的浅拷贝</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr1 = arr.concat()\n<span class=\"hljs-built_in\">console</span>.log(arr1)\n\n<span class=\"hljs-keyword\">var</span> arr2 = arr.slice(<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-built_in\">console</span>.log(arr2)\n\n<span class=\"hljs-keyword\">var</span> arr3 = [...arr]\n<span class=\"hljs-built_in\">console</span>.log(arr3)\n\n<span class=\"hljs-keyword\">var</span> arr4 = <span class=\"hljs-built_in\">Array</span>.from(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr4)\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200620111943837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>对象的浅拷贝</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 对象的浅拷贝</span>\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'rmq\'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">10</span>\n}\n<span class=\"hljs-keyword\">var</span> obj1 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj)\n<span class=\"hljs-built_in\">console</span>.log(obj);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200620111959840.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>深拷贝</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 深拷贝</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepCopy</span>(<span class=\"hljs-params\">newObj, oldObj</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> oldObj) {\n    <span class=\"hljs-comment\">// 1.获取属性值</span>\n    <span class=\"hljs-keyword\">var</span> item = oldObj[k]\n    <span class=\"hljs-comment\">// 2.判断是否为数组</span>\n    <span class=\"hljs-keyword\">if</span> (item <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) {\n      newObj[k] = []\n      deepCopy(newObj[k], item)\n      <span class=\"hljs-comment\">// 3.判断是否为对象</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (item <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>) {\n      newObj[k] = {}\n      deepCopy(newObj[k], item)\n    } <span class=\"hljs-keyword\">else</span> {\n      newObj[k] = item\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'tom\'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>,\n  <span class=\"hljs-attr\">like</span>: {\n    <span class=\"hljs-attr\">eat</span>: <span class=\"hljs-string\">\'meat\'</span>,\n  },\n  <span class=\"hljs-attr\">drink</span>: [<span class=\"hljs-string\">\'cola\'</span>, <span class=\"hljs-string\">\'mlik\'</span>],\n}\n<span class=\"hljs-comment\">// var arr = [1,2,[3,4,[5]]]</span>\n<span class=\"hljs-keyword\">var</span> o = {}\ndeepCopy(o, obj)\n<span class=\"hljs-built_in\">console</span>.log(o)\n\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'tom\'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>,\n  <span class=\"hljs-attr\">like</span>: {\n    <span class=\"hljs-attr\">eat</span>: <span class=\"hljs-string\">\'meat\'</span>,\n  },\n  <span class=\"hljs-attr\">drink</span>: [<span class=\"hljs-string\">\'cola\'</span>, <span class=\"hljs-string\">\'mlik\'</span>],\n}\n<span class=\"hljs-keyword\">var</span> obj1 = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(obj))\nobj1.age = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-built_in\">console</span>.log(obj)\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200620112329994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n', 12, '技术', 'js,es6', '2020-07-18 10:34:00', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (35, 'es6数组和对象常用方法', '### 数组\n- forEach() 方法对数组的每个元素执行一次给定的函数。\n\n```js\nvar arr = [1, 2, 3]\narr.forEach((value, index) => {\n  console.log(\'数组值：\' + value);\n  console.log(\'数组索引：\' + index);\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164814223.png)\n- map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。\n\n```js\nvar arr = [1, 2, 3]\nvar arr1 = arr.map((value, index) => {\n  return value * 2\n})\nconsole.log(arr1);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164909606.png)\n- filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。\n\n```js\nvar arr = [1, 2, 3]\nvar arr2 = arr.filter((value, index) => {\n  return value > 1\n})\nconsole.log(arr2);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164956271.png)\n- every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值\n\n```js\nvar arr = [1, 2, 3]\nvar flag = arr.every((value, index) => {\n  return value < 4\n})\nconsole.log(flag);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165039172.png)\n- some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。\n\n```js\nvar arr = [1, 2, 3, 11]\nvar flag = arr.some((value, index) => {\n  return value > 10\n})\nconsole.log(flag);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165139685.png)\n- includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false\n\n```js\nvar arr = [1, 2, 3, 11]\nvar flag = arr.includes(3, 0) //从0开始，找3\nvar flag1 = arr.includes(3, -1) //从-1 + arr.length 开始,找3\nconsole.log(flag);\nconsole.log(flag1);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165221399.png)\n- reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\n```js\nvar arr = [1, 2, 3]\nvar arr3 = arr.reduce((acc, cur) => {\n  console.log(acc + \'--\' + cur);\n  return acc + cur\n})\nconsole.log(arr3);\nvar arr4 = arr.reduce((acc, cur) => {\n  console.log(acc + \'--\' + cur);\n  return acc + cur\n}, 4)\nconsole.log(arr4);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165314325.png)\n### 对象\n- Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999,\n  num: 2000\n};\nvar arr = Object.keys(obj);\nconsole.log(arr);\narr.forEach(function (value) {\n  console.log(value);\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165420518.png)\n- Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999\n};\nObject.defineProperty(obj, \'price\', {\n  value: 1000,\n  //如果只为false不允许修改这个属性值，默认值也是false\n  writable: false,\n  // enumerable 如果值为false 则不允许遍历，默认的值是false\n  enumerable: false,\n  //configurable如果为false，则不允许删除这个属性，不允许在修改第三个参数里面的特性，默认false\n  configurable: false,\n  // get() {//当访问该属性时，会调用此函数。\n  //   return value\n  // },\n  // set(newVal) {//当属性值被修改时，会调用此函数。\n  //   value = newVal\n  // }\n}) //--> obj.num = 1000\nconsole.log(obj);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165638602.png)\n- Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999,\n  num: 2000\n};\nvar obj2 = {\n  id: 2,\n  pname: \'华为\',\n  price: 3999,\n  num: 2000\n};\nvar newObj = Object.assign(obj, obj2);\nconsole.log(newObj);\nconsole.log(newObj === obj);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061416573938.png)\n- Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 \n\n```js\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\nconsole.log(me.__proto__ === person); //类似原型链\nme.name = \'Matthew\';\nme.isHuman = true;\nme.printIntroduction();\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061416584933.png)\n**了解更多**：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)', '<h3><a id=\"_0\"></a>数组</h3>\n<ul>\n<li>forEach() 方法对数组的每个元素执行一次给定的函数。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数组值：\'</span> + value);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数组索引：\'</span> + index);\n})\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164814223.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr1 = arr.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value * <span class=\"hljs-number\">2</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(arr1);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164909606.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr2 = arr.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">1</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(arr2);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164956271.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &lt; <span class=\"hljs-number\">4</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(flag);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165039172.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">10</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(flag);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165139685.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//从0开始，找3</span>\n<span class=\"hljs-keyword\">var</span> flag1 = arr.includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-1</span>) <span class=\"hljs-comment\">//从-1 + arr.length 开始,找3</span>\n<span class=\"hljs-built_in\">console</span>.log(flag);\n<span class=\"hljs-built_in\">console</span>.log(flag1);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165221399.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr3 = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(acc + <span class=\"hljs-string\">\'--\'</span> + cur);\n  <span class=\"hljs-keyword\">return</span> acc + cur\n})\n<span class=\"hljs-built_in\">console</span>.log(arr3);\n<span class=\"hljs-keyword\">var</span> arr4 = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(acc + <span class=\"hljs-string\">\'--\'</span> + cur);\n  <span class=\"hljs-keyword\">return</span> acc + cur\n}, <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-built_in\">console</span>.log(arr4);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165314325.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_77\"></a>对象</h3>\n<ul>\n<li>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-built_in\">Object</span>.keys(obj);\n<span class=\"hljs-built_in\">console</span>.log(arr);\narr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value);\n})\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165420518.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>\n};\n<span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">\'price\'</span>, {\n  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1000</span>,\n  <span class=\"hljs-comment\">//如果只为false不允许修改这个属性值，默认值也是false</span>\n  writable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// enumerable 如果值为false 则不允许遍历，默认的值是false</span>\n  enumerable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">//configurable如果为false，则不允许删除这个属性，不允许在修改第三个参数里面的特性，默认false</span>\n  configurable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// get() {//当访问该属性时，会调用此函数。</span>\n  <span class=\"hljs-comment\">//   return value</span>\n  <span class=\"hljs-comment\">// },</span>\n  <span class=\"hljs-comment\">// set(newVal) {//当属性值被修改时，会调用此函数。</span>\n  <span class=\"hljs-comment\">//   value = newVal</span>\n  <span class=\"hljs-comment\">// }</span>\n}) <span class=\"hljs-comment\">//--&gt; obj.num = 1000</span>\n<span class=\"hljs-built_in\">console</span>.log(obj);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165638602.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> obj2 = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'华为\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">3999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = <span class=\"hljs-built_in\">Object</span>.assign(obj, obj2);\n<span class=\"hljs-built_in\">console</span>.log(newObj);\n<span class=\"hljs-built_in\">console</span>.log(newObj === obj);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061416573938.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">isHuman</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">printIntroduction</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`My name is <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.name}</span>. Am I human? <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.isHuman}</span>`</span>);\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> me = <span class=\"hljs-built_in\">Object</span>.create(person);\n<span class=\"hljs-built_in\">console</span>.log(me.__proto__ === person); <span class=\"hljs-comment\">//类似原型链</span>\nme.name = <span class=\"hljs-string\">\'Matthew\'</span>;\nme.isHuman = <span class=\"hljs-literal\">true</span>;\nme.printIntroduction();\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061416584933.png\" alt=\"在这里插入图片描述\" /><br />\n<strong>了解更多</strong>：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\">MDN</a></p>\n', 8, '基础', 'js,es6', '2020-07-18 10:34:00', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (36, '关于js继承的方法', '### 通过es6实现继承\n```js\n// es6继承\nclass Animal {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n  eat() {\n    console.log(\'eat\');\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, age, food) {\n    super(name, age) //相当于调用了父构造函数，必须在 this.food = food 之前调用\n    this.food = food\n  }\n  say() {\n    console.log(\'say\');\n  }\n}\n\nconst dog = new Dog(\'二哈\', 3, \'肉\');\nconsole.log(dog);\ndog.eat();\ndog.say();\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200613204622270.png)\n### 借用父构造函数继承\n- 继承属性\n\n```js\nfunction Animal(name, age) {\n  // this 指向 父构造函数的实例对象\n  this.name = name\n  this.age = age\n}\n\nfunction Dog(name, age, food) {\n  // this 指向子构造函数的对象实例\n  Animal.call(this, name, age)\n  this.food = food\n}\n\nconst dog2 = new Dog(\'金毛\', 4, \'狗粮\');\nconsole.log(dog2);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061320493571.png)\n- 继承方法\n> 通过	==Dog.prototype = Animal.prototype==\n> 问题1：Dog.prototype上声明的方法，Animal.prototype也存在，他们都是指向Animal.prototype的\n\n```js\n  function Animal(name, age) {\n    // this 指向 父构造函数的实例对象\n    this.name = name\n    this.age = age\n  }\n  Animal.prototype.eat = function () {\n    console.log(\'eat\');\n  }\n\n  function Dog(name, age, food) {\n    // this 指向子构造函数的对象实例\n    Animal.call(this, name, age)\n    this.food = food\n  }\n  // 继承方法\n  Dog.prototype = Animal.prototype //这样直接赋值会有问题，如果修改了子原型对象，父原型对象也会跟着一起变化\n\n  Dog.prototype.say = function () {\n    console.log(\'say\');\n  }\n\n  const dog2 = new Dog(\'金毛\', 4, \'狗粮\');\n  // console.log(dog2);\n  console.log(Animal.prototype);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061320561122.png)\n> 通过 ==Dog.prototype = new Animal()==\n> 问题2：虽然子构造函数原型继承了父构造函数原型上的方法，也不影响父构造函数原型。但是 Dog.prototype = new Animal() 相当于 Dog.prototype = {...}，会覆盖掉里面的方法、构造函数等。\n\n```js\nfunction Animal(name, age) {\n  // this 指向 父构造函数的实例对象\n  this.name = name\n  this.age = age\n}\nAnimal.prototype.eat = function () {\n  console.log(\'eat\');\n}\n\nfunction Dog(name, age, food) {\n  // this 指向子构造函数的对象实例\n  Animal.call(this, name, age)\n  this.food = food\n}\n\nDog.prototype = new Animal()\n// dog2.__proto__ --> Dog.prototype --> new Animal().__proto__ --> Animal.prototype\n\nDog.prototype.say = function () {\n  console.log(\'say\');\n}\n\nconst dog2 = new Dog(\'金毛\', 4, \'狗粮\');\nconsole.log(Animal.prototype);\nconsole.log(Dog.prototype);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200613211418708.png)\n- 解决\n>  通过==Dog.prototype.constructor  =  Dog==，让构造函数重新指向Dog\n```js\nfunction Animal(name, age) {\n  // this 指向 父构造函数的实例对象\n  this.name = name\n  this.age = age\n}\nAnimal.prototype.eat = function () {\n  console.log(\'eat\');\n}\n\nfunction Dog(name, age, food) {\n  // this 指向子构造函数的对象实例\n  Animal.call(this, name, age)\n  this.food = food\n}\n// 继承方法\n// Dog.prototype = Animal.prototype //这样直接赋值会有问题，如果修改了子原型对象，父原型对象也会跟着一起变化\nDog.prototype = new Animal()\n// dog2.__proto__ --> Dog.prototype --> new Animal().__proto__ --> Animal.prototype\n\nDog.prototype.constructor = Dog\n// // 如果利用对象形式修改了原型对象，一定要用 constructor 指回原来的构造函数\n\nDog.prototype.say = function () {\n  console.log(\'say\');\n}\n\nconst dog2 = new Dog(\'金毛\', 4, \'狗粮\');\n// console.log(dog2);\nconsole.log(Animal.prototype);\nconsole.log(Dog.prototype);\nconsole.log(Dog.prototype.constructor);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200613211853907.png)', '<h3><a id=\"es6_0\"></a>通过es6实现继承</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// es6继承</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(name, age) {\n    <span class=\"hljs-keyword\">this</span>.name = name\n    <span class=\"hljs-keyword\">this</span>.age = age\n  }\n  eat() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'eat\'</span>);\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(name, age, food) {\n    <span class=\"hljs-keyword\">super</span>(name, age) <span class=\"hljs-comment\">//相当于调用了父构造函数，必须在 this.food = food 之前调用</span>\n    <span class=\"hljs-keyword\">this</span>.food = food\n  }\n  say() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'say\'</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\'二哈\'</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\'肉\'</span>);\n<span class=\"hljs-built_in\">console</span>.log(dog);\ndog.eat();\ndog.say();\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613204622270.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_29\"></a>借用父构造函数继承</h3>\n<ul>\n<li>继承属性</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向 父构造函数的实例对象</span>\n  <span class=\"hljs-keyword\">this</span>.name = name\n  <span class=\"hljs-keyword\">this</span>.age = age\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">name, age, food</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向子构造函数的对象实例</span>\n  Animal.call(<span class=\"hljs-keyword\">this</span>, name, age)\n  <span class=\"hljs-keyword\">this</span>.food = food\n}\n\n<span class=\"hljs-keyword\">const</span> dog2 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\'金毛\'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\'狗粮\'</span>);\n<span class=\"hljs-built_in\">console</span>.log(dog2);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061320493571.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>继承方法</li>\n</ul>\n<blockquote>\n<p>通过	<mark>Dog.prototype = Animal.prototype</mark><br />\n问题1：Dog.prototype上声明的方法，Animal.prototype也存在，他们都是指向Animal.prototype的</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n    <span class=\"hljs-comment\">// this 指向 父构造函数的实例对象</span>\n    <span class=\"hljs-keyword\">this</span>.name = name\n    <span class=\"hljs-keyword\">this</span>.age = age\n  }\n  Animal.prototype.eat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'eat\'</span>);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">name, age, food</span>) </span>{\n    <span class=\"hljs-comment\">// this 指向子构造函数的对象实例</span>\n    Animal.call(<span class=\"hljs-keyword\">this</span>, name, age)\n    <span class=\"hljs-keyword\">this</span>.food = food\n  }\n  <span class=\"hljs-comment\">// 继承方法</span>\n  Dog.prototype = Animal.prototype <span class=\"hljs-comment\">//这样直接赋值会有问题，如果修改了子原型对象，父原型对象也会跟着一起变化</span>\n\n  Dog.prototype.say = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'say\'</span>);\n  }\n\n  <span class=\"hljs-keyword\">const</span> dog2 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\'金毛\'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\'狗粮\'</span>);\n  <span class=\"hljs-comment\">// console.log(dog2);</span>\n  <span class=\"hljs-built_in\">console</span>.log(Animal.prototype);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061320561122.png\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p>通过 <mark>Dog.prototype = new Animal()</mark><br />\n问题2：虽然子构造函数原型继承了父构造函数原型上的方法，也不影响父构造函数原型。但是 Dog.prototype = new Animal() 相当于 Dog.prototype = {…}，会覆盖掉里面的方法、构造函数等。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向 父构造函数的实例对象</span>\n  <span class=\"hljs-keyword\">this</span>.name = name\n  <span class=\"hljs-keyword\">this</span>.age = age\n}\nAnimal.prototype.eat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'eat\'</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">name, age, food</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向子构造函数的对象实例</span>\n  Animal.call(<span class=\"hljs-keyword\">this</span>, name, age)\n  <span class=\"hljs-keyword\">this</span>.food = food\n}\n\nDog.prototype = <span class=\"hljs-keyword\">new</span> Animal()\n<span class=\"hljs-comment\">// dog2.__proto__ --&gt; Dog.prototype --&gt; new Animal().__proto__ --&gt; Animal.prototype</span>\n\nDog.prototype.say = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'say\'</span>);\n}\n\n<span class=\"hljs-keyword\">const</span> dog2 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\'金毛\'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\'狗粮\'</span>);\n<span class=\"hljs-built_in\">console</span>.log(Animal.prototype);\n<span class=\"hljs-built_in\">console</span>.log(Dog.prototype);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613211418708.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>解决</li>\n</ul>\n<blockquote>\n<p>通过<mark>Dog.prototype.constructor  =  Dog</mark>，让构造函数重新指向Dog</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向 父构造函数的实例对象</span>\n  <span class=\"hljs-keyword\">this</span>.name = name\n  <span class=\"hljs-keyword\">this</span>.age = age\n}\nAnimal.prototype.eat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'eat\'</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">name, age, food</span>) </span>{\n  <span class=\"hljs-comment\">// this 指向子构造函数的对象实例</span>\n  Animal.call(<span class=\"hljs-keyword\">this</span>, name, age)\n  <span class=\"hljs-keyword\">this</span>.food = food\n}\n<span class=\"hljs-comment\">// 继承方法</span>\n<span class=\"hljs-comment\">// Dog.prototype = Animal.prototype //这样直接赋值会有问题，如果修改了子原型对象，父原型对象也会跟着一起变化</span>\nDog.prototype = <span class=\"hljs-keyword\">new</span> Animal()\n<span class=\"hljs-comment\">// dog2.__proto__ --&gt; Dog.prototype --&gt; new Animal().__proto__ --&gt; Animal.prototype</span>\n\nDog.prototype.constructor = Dog\n<span class=\"hljs-comment\">// // 如果利用对象形式修改了原型对象，一定要用 constructor 指回原来的构造函数</span>\n\nDog.prototype.say = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'say\'</span>);\n}\n\n<span class=\"hljs-keyword\">const</span> dog2 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\'金毛\'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">\'狗粮\'</span>);\n<span class=\"hljs-comment\">// console.log(dog2);</span>\n<span class=\"hljs-built_in\">console</span>.log(Animal.prototype);\n<span class=\"hljs-built_in\">console</span>.log(Dog.prototype);\n<span class=\"hljs-built_in\">console</span>.log(Dog.prototype.constructor);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613211853907.png\" alt=\"在这里插入图片描述\" /></p>\n', 10, '基础', 'js', '2020-07-18 10:34:00', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (37, '实习笔记', '@[TOC](目录)\n### elmentUI的table取每列或者一行数据\n```js\n<el-table-column label=\"成交截图\" prop=\"followImage\" align=\"center\">\n    <template slot-scope=\"scope\">\n        <el-image\n            :src=\"scope.row.followImage\"\n            class=\"follow-image\"\n            :preview-src-list=\"[scope.row.followImage]\"\n        ></el-image>\n    </template>\n</el-table-column>\n```\n- 需要template去接收，一个具名插槽==slot-scope=\"scope\"==\n- scope.row可以取到**整行数据**\n- scope.row.followImage可以取到其中**每列数据**\n\n### 正则匹配，输入整数最多包含2位小数(例：输入金额)\n```js\nlet val = this.price\n    .replace(/[^\\d.]/g, \"\")\n    .replace(/\\.{2,}/g, \".\")\n    .replace(\".\", \"$#$\")\n    .replace(/\\./g, \"\")\n    .replace(\"$#$\", \".\")\n    .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\")\n    .replace(/^\\./g, \"\");\n```\n\n### 手写一个上传图片组件\n```js\n//html\n<el-form-item label=\"成交证明截图：\" v-if=\"followForm.state===\'completed\'\">\n    <div class=\"upload-c\" :style=\"{backgroundImage:`url(${imageUrl})`}\">\n        <i class=\"el-icon-plus\" v-if=\"imageUrl==\'\'\"></i>\n        <input type=\"file\" accept=\"image/*\" @change=\"onInputFileChange\" />\n    </div>\n</el-form-item>\n//js\nasync onInputFileChange(e) {//上传接口\n    const imageUri = await this.selectPhotos(\n        e.target.files[0],\n        \"image\"\n    );\n    this.imageUrl = imageUri;\n}\n//css\n.upload-c {\n    width: 90px;\n    height: 90px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f6f6f6;\n    border: 1px solid #d2d2d2;\n    border-radius: 3px;\n    position: relative;\n    background-size: cover;\n    background-repeat: no-repeat;\n    input {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0;\n    }\n}\n```\n\n### VUE中如何修改elementUI样式，不影响别的组件\n- 深度选择器==deep==\n> 例如我们想要修改这个样式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200721090125434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n\n```html\n<style lang=\"less\" scoped>\n/deep/.el-icon-circle-close{\n    color: #ffffff;\n}\n</style>\n```\n> + 修改当前页面的样式不影响别的页面。! important都不能修改，但是==deep==能够修改，优先级很高。\n>  + 如果想要修改全局的这个样式，需要在初始化样式时使用，就不用了加deep了。如果修改不了就可以用! important\n \n### 用css修改滚动条样式\n> **::-webkit-scrollbar** 滚动条整体部分\n> ::-webkit-scrollbar-button 滚动条两端的按钮\n> **::-webkit-scrollbar-track**  外层轨道\n> ::-webkit-scrollbar-track-piece  内层滚动槽\n> **::-webkit-scrollbar-thumb** 滚动的滑块\n> ::-webkit-scrollbar-corner 边角\n> ::-webkit-resizer 定义右下角拖动块的样式\n- `::-webkit-scrollbar[-*]`\n```css\n&::-webkit-scrollbar {\n    height: 25px;\n    width: 50px;\n}\n&::-webkit-scrollbar-thumb {\n    background: red;\n}\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200721150456368.png)\n### Vue自定义指令\n- 钩子函数\n> - bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n> - inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n> - update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。\n> - componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n> - unbind：只调用一次，指令与元素解绑时调用。\n```html\n<div id=\"hook-arguments-example\" v-demo:foo.a.b=\"message\"></div>\n```\n```js\nVue.directive(\'demo\', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      \'name: \'       + s(binding.name) + \'<br>\' +\n      \'value: \'      + s(binding.value) + \'<br>\' +\n      \'expression: \' + s(binding.expression) + \'<br>\' +\n      \'argument: \'   + s(binding.arg) + \'<br>\' +\n      \'modifiers: \'  + s(binding.modifiers) + \'<br>\' +\n      \'vnode keys: \' + Object.keys(vnode).join(\', \')\n  }\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200722112227636.png)\n- 指令钩子函数会被传入以下参数：\n\n> - el：指令所绑定的元素，可以用来直接操作 DOM。\n> - binding：一个对象，包含以下 property：\n> - name：指令名，不包括 v- 前缀。\n> - value：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。\n> - oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\n> - expression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。\n> - arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。\n> - modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\n> - vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。\n> - oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。\n\n- 扩展\n1. 动态指令参数。v-demo:[foo]，foo可以是==动态值==。\n2. 简写函数。不用写钩子函数\n\n```js\nVue.directive(\'color-swatch\', function (el, binding) {\n  el.style.backgroundColor = binding.value\n})\n```\n### 关于screen、page、client、offset\n- srceen>page>client>offset\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200722195711390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n实现拖拽效果\n`<div @mousedown=\"changeHeightDown\"></div>`\n```js\n        changeHeightDown(e){\n            this.startHeight = e.pageY\n            document.addEventListener(\"mousemove\",this.changeHeightMove);\n            document.addEventListener(\"mouseup\",this.changeHeightUp);\n        },\n        changeHeightMove(e){\n            let height = e.pageY - this.startHeight;\n            this.vdrList[0].height += height;\n            this.startHeight = e.pageY;\n        },\n        changeHeightUp(e){\n            document.removeEventListener(\"mousemove\",this.changeHeightMove);\n        }\n```\n\n### 锚点跳转\n\n```js\n//html\n//锚点\n<div class=\"titles\" :id=\"`pack${index}`\">包装信息</div>\n//跳转\n<div class=\"group-btn pack-info\" @click=\"scollTo(\'pack\',index)\">\n     <img src=\"../../images/pack-info.png\" alt />\n        <span>包装信息</span>\n</div>\n//js\nscollTo(name, index) {\n    document.querySelector(`#${name}${index}`).scrollIntoView(true);\n},\n```\n\n### 复制除input文本\n- 有input可以直接select，不用创建一个\n- 没有input，可以先创建一个input或者textarea，然后select、copy\n`<p @click=\"copyText(scope.row.desc)\" id=\"copybtn\">复制</p>`\n```js\n        copyText(text) {\n            var textArea = document.createElement(\"textarea\");\n            textArea.value = text;\n            document.body.appendChild(textArea);\n            textArea.select();\n            try {\n                var successful = document.execCommand(\"copy\");\n                var msg = successful\n                    ? \"成功复制到剪贴板\"\n                    : \"该浏览器不支持点击复制到剪贴板\";\n                console.log(msg);\n            } catch (err) {}\n            document.body.removeChild(textArea);\n        },\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200724181800356.png)\n### 给页面加上水印\n- 用canvas画一张背景图\n\n```js\nexport default {\n    //tool.js\n    addWaterMark() {\n        const strArr = `${localStorage.getItem(\n                \"loginUserName\"\n            )}${localStorage\n                .getItem(\"logunUserPhone\")\n                .slice(7, 11)}[${new Date()}]`;\n        let ctx = document.createElement(\"canvas\");\n        ctx.width = 250;\n        ctx.height = 100;\n        ctx.style.display = \"none\";\n        let cans = ctx.getContext(\"2d\");\n        cans.rotate((-20 * Math.PI) / 180);\n        cans.font = \"12px Microsoft YaHei\";\n        cans.fillStyle = \"rgba(17, 17, 17, 0.20)\";\n        cans.textAlign = \"left\";\n        cans.textBaseline = \"Middle\";\n        cans.fillText(strArr, 0, 100);\n        cans.save();\n        return ctx.toDataURL();\n    }\n}\n```\n- 需要添加的页面引入\n\n```js\n<template>\n    <div class=\"content\" :style=\"{backgroundImage:`url(${orgBackground})`}\">123</div>\n</template>\n\n<script>\nimport tool from \"../plus/tool\";\nexport default {\n    data() {\n        return {\n            orgBackground: \"\",\n        };\n    },\n    name: \"test\",\n    mounted() {\n        localStorage.setItem(\"loginUserName\", \"ruan\");\n        localStorage.setItem(\"logunUserPhone\", \"123456\");\n        this.orgBackground = tool.addWaterMark();\n        //监听dom属性改变重新生成水印(如果页面有变化需要去监听dom)\n        // const org = document.querySelector(\".content\");\n        // const options = {\n        //     attributes: true,\n        //     childList: true,\n        //     subtree: true,\n        // };\n        // const observer = new MutationObserver((mutationList) => {\n        // this.orgBackground = tool.addWaterMark();\n        // });\n        // observer.observe(org, options);\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.content {\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n</style>\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020073009143948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n\n### 点击别处隐藏样式\n\n```html\n<template>\n    <div class=\"header\">\n        <div class=\"block\" @click=\"isShowBlock\"></div>\n        <div class=\"block2\" v-show=\"isShow\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            isShow: true,\n        };\n    },\n    methods: {\n        isShowBlock() {\n            this.isShow = !this.isShow;\n        },\n        close(e) {\n            if (e.target.className != \"block\") {\n                this.isShow = false;\n            }\n        },\n    },\n    mounted() {\n        window.addEventListener(\"click\", this.close);\n    },\n    beforeDestroy() {\n        window.removeEventListener(\"click\", this.close);\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.header {\n    width: 700px;\n    height: 700px;\n    background-color: red;\n    .block {\n        width: 100px;\n        height: 100px;\n        background-color: royalblue;\n    }\n    .block2 {\n        width: 100px;\n        height: 100px;\n        background-color: royalblue;\n    }\n}\n</style>\n```\n### 图片加载失败，展示占位图片\n\n```html\n<template>\n    <img :src=\"props.src\" @error=\'showErrorImage\' />\n</template>\n\n<script>\nexport default {\n    name: \"editorImage\",\n    methods: {\n        /**\n         * @description 图片加载失败占位\n         */\n        showErrorImage(e) {\n            e.target.src = require(\"../../assets/imgs/landing/img-1.png\");\n        },\n    },\n};\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200817171316499.png#pic_center)\n\n\n### 中文英文换行\n\n```css\n white-space: normal;\n word-break: break-all;\n word-wrap: break-word;\n```\n> white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;\nwhite-space 属性设置如何处理元素内的空白\nnormal 默认。空白会被浏览器忽略。\npre 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。\nnowrap 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。\npre-wrap 保留空白符序列，但是正常地进行换行。\npre-line 合并空白符序列，但是保留换行符。\ninherit 规定应该从父元素继承 white-space 属性的值。\n\n>word-wrap: normal|break-word;\nword-wrap 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。\nnormal: 只在允许的断字点换行(浏览器保持默认处理)\nbreak-word:在长单词或URL地址内部进行换行\nword-break: normal|break-all|keep-all;\n\n>word-break 属性用来标明怎么样进行单词内的断句。\nnormal：使用浏览器默认的换行规则。\nbreak-all:允许再单词内换行\nkeep-all:只能在半角空格或连字符处换行\n\n### flex布局固定高度不被压缩\n`flex-shrink:0`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200902102345304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200902102441830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n### 雨滴、星星、流星动画\n- 雨滴\n\n```html\n<template>\n    <div class=\"rain\">\n        <div\n            v-for=\"(item,index) in rainNumber\"\n            :key=\"index\"\n            class=\"rain-item\"\n            ref=\"rain-item\"\n            :style=\"`transform:rotate(${rotateDeg}deg);width:${w}px;height:${h}px;`\"\n        >\n            <div class=\"line\" :style=\"`animationDelay:${index*100}ms`\"></div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: \"rain-component\",\n    props: {\n        rainNumber: {\n            type: Number,\n            default: 0,\n        },\n        rotateDeg: {\n            type: Number,\n            default: 0,\n        },\n        w: {\n            type: Number,\n            default: 0,\n        },\n        h: {\n            type: Number,\n            default: 0,\n        },\n    },\n    mounted() {\n        this.randomRain();\n    },\n    methods: {\n        randomRain() {\n            let rainArr = this.$refs[\"rain-item\"];\n            // console.log(rainArr);\n            rainArr.forEach((item) => {\n                // console.log(item.children);\n                item.style.top = Math.floor(Math.random() * 250 + 1) + \"px\";\n                item.style.left = Math.floor(Math.random() * 700 + 1) + \"px\";\n            });\n        },\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.rain {\n    width: 700px;\n    height: 250px;\n    position: relative;\n    background: radial-gradient(\n        at 50% 0%,\n        rgba(6, 55, 111, 1) 0%,\n        rgba(11, 26, 57, 1) 70%\n    );\n    .rain-item {\n        position: absolute;\n        width: 2px;\n        height: 30px;\n        // background: skyblue;\n        display: inline-block;\n        // overflow: hidden;\n        .line {\n            animation: raining 2s infinite linear;\n            position: absolute;\n            content: \"\";\n            top: -30px;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 183, 255, 0.7);\n        }\n    }\n}\n@keyframes raining {\n    0% {\n        top: -30px;\n        opacity: 0;\n    }\n    50% {\n        top: 0px;\n        opacity: 1;\n    }\n    100% {\n        top: 30px;\n        opacity: 0;\n    }\n}\n</style>\n```\n- 星星\n\n```html\n<template>\n    <div class=\"star\">\n        <div\n            v-for=\"(item,index) in starNumber\"\n            :key=\"index\"\n            class=\"star-item\"\n            ref=\"star-item\"\n            :style=\"`animationDelay:${index*100}ms;width:${w}px;height:${h}px;`\"\n        ></div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: \"star-component\",\n    props: {\n        starNumber: {\n            type: Number,\n            default: 0,\n        },\n        w: {\n            type: Number,\n            default: 0,\n        },\n        h: {\n            type: Number,\n            default: 0,\n        },\n    },\n    mounted() {\n        this.randomStar();\n    },\n    methods: {\n        randomStar() {\n            let starArr = this.$refs[\"star-item\"];\n            // console.log(starArr);\n            starArr.forEach((item) => {\n                // console.log(item.children);\n                item.style.top = Math.floor(Math.random() * 250 + 1) + \"px\";\n                item.style.left = Math.floor(Math.random() * 700 + 1) + \"px\";\n            });\n        },\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.star {\n    width: 700px;\n    height: 250px;\n    position: relative;\n    background: radial-gradient(\n        at 0% 100%,\n        rgba(9, 37, 61, 1) 20%,\n        rgba(9, 31, 55, 1) 70%\n    );\n    .star-item {\n        position: absolute;\n        width: 4px;\n        height: 4px;\n        display: inline-block;\n        animation: staring 2s infinite linear;\n        background: rgba(2, 213, 255, 1);\n        border-radius: 50%;\n    }\n}\n@keyframes staring {\n    0% {\n        opacity: 0;\n    }\n    50% {\n        opacity: 1;\n    }\n    100% {\n        opacity: 0;\n    }\n}\n</style>\n```\n- 流星\n\n```html\n<template>\n    <div class=\"meteor\" :style=\"`transform:rotate(${rotateDeg}deg)`\">\n        <div class=\"line\" :style=\"`animationDelay:${delay}s;width:${w}px;height:${h}px;`\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: \"meteor-component\",\n    props: {\n        delay: {\n            type: Number,\n            default: 0,\n        },\n        w: {\n            type: Number,\n            default: 0,\n        },\n        h: {\n            type: Number,\n            default: 0,\n        },\n        rotateDeg: {\n            type: Number,\n            default: 0,\n        },\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.meteor {\n    width: 2px;\n    height: 200px;\n    position: relative;\n    // overflow: hidden;\n    .line {\n        animation: meteoring 6s infinite linear;\n        position: absolute;\n        width: 2px;\n        height: 200px;\n        background: linear-gradient(\n            to top,\n            rgb(2, 161, 195, 1),\n            rgba(11, 36, 66, 0.1)\n        );\n        border-radius: 2px;\n        box-shadow: 0px 10px 20px 0px #02a1c3;\n        opacity: 0;\n        &::before {\n            width: 2px;\n            height: 2px;\n            content: \"\";\n            position: absolute;\n            bottom: 0px;\n            left: 0px;\n            border-radius: 50%;\n            background: #00d0ff;\n            box-shadow: 0px 0px 12px 5px #00d0ff;\n        }\n    }\n}\n@keyframes meteoring {\n    0% {\n        opacity: 0;\n        top: -250px;\n    }\n    25% {\n        opacity: 0.5;\n        top: 0px;\n    }\n    50% {\n        opacity: 0.8;\n        top: 250px;\n    }\n    75% {\n        opacity: 1;\n        top: 500px;\n    }\n    100% {\n        opacity: 0;\n        top: 750px;\n    }\n}\n</style>\n```\n- 引用\n\n```html\n            <div class=\"rain-bg\">\n                <rain-component :rainNumber=\"20\" :rotateDeg=\"-10\" :w=\"2\" :h=\"20\"></rain-component>\n            </div>\n            <div class=\"meteor-bg\">\n                <meteor-component :delay=\"0\" :w=\"3\" :h=\"200\" :rotateDeg=\"40\"></meteor-component>\n            </div>\n            <div class=\"meteor-bg2\">\n                <meteor-component :delay=\"2\" :w=\"2\" :h=\"100\" :rotateDeg=\"30\"></meteor-component>\n            </div>\n            <div class=\"star-bg\">\n                <star-component :starNumber=\"20\" :w=\"4\" :h=\"4\"></star-component>\n            </div>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020090217364073.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n\n### elementUI级联选择器Cascader，删除tag存在的问题\n\n```html\n    <div class=\"address-choose\">\n        <div class=\"card-show\">\n            <el-button\n                class=\"tags\"\n                v-for=\"(item,index) in cityShowList\"\n                :key=\"index\"\n                :disabled=\"!showSave\"\n                @click=\"deleteCity(index)\"\n            >{{item}}</el-button>\n        </div>\n        <el-cascader\n            v-model=\"cityList\"\n            :options=\"options\"\n            :props=\"{ multiple: true }\"\n            collapse-tags\n            clearable\n            @change=\"changeCity\"\n            :disabled=\"!showSave\"\n        ></el-cascader>\n    </div>\n```\n\n点击按钮删除事件时，输入框中的值并没有变化\n\n```js\n     deleteCity(index) {\n         this.cityShowList.splice(index, 1);\n         this.cityList.splice(index, 1);\n     },\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200917170740152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n解决办法\n- 给级联选择器v-if\n- 删除事件中加this.$nextTick()\n\n```html\n      <div class=\"address-choose\">\n          <div class=\"card-show\">\n              <el-button\n                  class=\"tags\"\n                  v-for=\"(item,index) in cityShowList\"\n                  :key=\"index\"\n                  :disabled=\"!showSave\"\n                  @click=\"deleteCity(item,index)\"\n              >{{item}}</el-button>\n          </div>\n          <el-cascader\n              v-model=\"cityList\"\n              :options=\"options\"\n              :props=\"{ multiple: true }\"\n              collapse-tags\n              clearable\n              @change=\"changeCity\"\n              :disabled=\"!showSave\"\n              \n              v-if=\"showCity\"\n          ></el-cascader>\n      </div>\n```\n\n```js\n    deleteCity(item, index) {\n        this.showCity = false;\n        this.cityShowList.splice(index, 1);\n        this.cityList.splice(index, 1);\n        this.$nextTick(() => {\n            this.showCity = true;\n        });\n    },\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200917171329547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n### echarts的一些问题\n- echarts自适应页面\n```js\n    let myChart = echarts.init(document.getElementById(`${this.id}`));\n    myChart.clear();\n    myChart.setOption(option, true);\n    window.addEventListener(\"resize\", () => {\n        myChart.resize();\n    });\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200924095908953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200924095926825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- 提示+吸附\n\n```javascript\n   let option = {\n       tooltip: {\n           trigger: \"axis\",\n           axisPointer: {\n               snap: true,\n           },\n       },\n   }\n```\n- 流线型+放大数据点+渐变背景\n\n```javascript\nlet option = {\n    series: [\n         {\n         name: \"浏览次数\",\n         data: [820, 932, 901, 934, 1290, 1330, 1320],\n         type: \"line\",\n         smooth: true,//流线型\n         symbolSize: 10,//放大点\n         areaStyle: {//渐变背景\n             color: new echarts.graphic.LinearGradient(\n                 0,\n                 0,\n                 0,\n                 1,\n                 [\n                     {\n                         offset: 0,\n                         color: \"#66CCCC\",\n                     },\n                     {\n                         offset: 1,\n                         color: \"#fff\",\n                     },\n                 ]\n             ),\n         },\n     },\n    ]\n}\n```\n### router新开窗口跳转\n\n```js\n   /**\n    * @description 跳转落地页详情\n    */\n   toLandingInfo(params) {\n       let routeData = this.$router.resolve({\n           name: \"analysis.landing.info\",\n           query: {\n               pageId: params.pageId,\n               startTime: moment().subtract(6, \"day\").format(\"yyyy-MM-DD\"),\n               endTime: moment().format(\"yyyy-MM-DD\"),\n           },\n       });\n       window.open(routeData.href, \"_blank\");\n   },\n```\n\n### 手写一个抽屉组件\n基于vue的过渡动画\n- 样式（点击消息提醒，从右侧弹出抽屉）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126160051403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- ==transition== + ==v-show/v-if==\n```html\n<template>\n    <transition name=\"show\" mode=\"out-in\" @before-enter=\'transitionComplete\' @after-leave=\'transitionComplete\' @enter=\'transitioning\' @leave=\'transitioning\'>\n        <div class=\"message-container\" ref=\"message-container\" @click=\"close\" v-show=\"drawerClose\">\n            <div class=\"message\">\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\nexport default {\n    name: \"messageCenter\",\n    props: {\n        drawerClose: {//父组件的消息提醒icon，控制显示隐藏\n            type: Boolean,\n            default: false,\n        },\n    },\n    data() {\n        return {\n        };\n    },\n\n    methods: {\n        /**\n         * @description 动画结束\n         */\n        transitionComplete() {\n            const body = document.querySelector(\"body\");\n            body.style.overflow = \"visible\";\n        },\n        //动画进行时\n        transitioning() {\n            const body = document.querySelector(\"body\");\n            body.style.overflow = \"hidden\";\n        },\n        close(e) {\n            const parent = this.$refs[\"message-container\"];\n            if (\n                e.target.className != \"message-container\" &&\n                e.target.className != \"el-icon-bell\" &&\n                !parent.contains(e.target)\n            ) {//除了本身及子元素和消息提醒，点击关闭\n                this.$emit(\"closeMessage\", false);\n            }\n        },\n    },\n    mounted() {\n        window.addEventListener(\"click\", this.close);\n    },\n    beforeDestroy() {\n        window.removeEventListener(\"click\", this.close);\n    },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.show-enter-active,\n.show-leave-active {\n    transition: all 0.3s;\n}\n.show-enter,\n.show-leave-to {\n    transform: translateX(500px);\n}\n.message-container {\n    // transition: all 0.3s ease-in-out;\n    position: absolute;\n    bottom: 0;\n    right: 0px;\n    width: 500px;\n    height: calc(100vh - 60px);\n    background: #ffffff;\n    z-index: 99;\n    box-shadow: -5px 11px 22px 0px rgba(0, 0, 0, 0.16);\n}\n</style>\n```\n- 动画\n> v-enter: 弹框显示前的样式，过渡的开始状态, 也就是动画还没开始前，动画的起始位置\n> v-enter-active 动画生效的状态，从底部过渡到页面的过程\n> v-enter-to 动画执行完的结束状态，也就是弹出结束后显示在页面的样式\n> v-leave 隐藏元素，离开动画的开始状态，元素消失开始的样式\n> v-leave-active 隐藏元素过程中，离开动画的生效动态即离开的过程，从上到下滑\n> v-leave-to 隐藏元素完成，离开动画的结束状态(此时v-leave的样式被删除)\n\n- 事件钩子\n\n```html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n \n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n> 我这里用了时间钩子，是因为，在动画过程中会重新计算宽高，所以会有滚动条，即使绝对定位也不行。所以在动画的时候给body加了overflow，结束之后又还原。就不会有滚动条了，前提是内容滚动区不是body，而是el-main之内的区域滚动。否则可能会有问题。\n\n### vue重置data中的数据\n`this.$options`可以获取到单文件中的所有数据\n- `this.$options.data()`可以获取到单文件中的data的数据\n- `this.$options.methods`可以获取到单文件中和全局的方法\n- ...\n\n`this.$data = this.$options.data()`可以重置整个data数据\n\n- 重置表单数据\n```js\n resetForm() {\n     this.filters = this.$options.data().filters;\n },\n```\n### Cascader 级联选择器限制选中个数\n- 我这里只有2级，所以直接循环\n\n```html\n <el-cascader\n   v-model=\"area\"\n   :show-all-levels=\"false\"\n   :options=\"areaOptions\"\n   :props=\"{ multiple: true,checkStrictly:true }\"\n   @change=\"changeArea1\"\n   collapse-tags\n   clearable></el-cascader>\n   \n    /**\n     * @description 限制渠道归属地个数\n     */\n    changeArea1(val){\n        this.disableArea(val)\n    },\n    /**\n     * @description 处理禁用问题\n     */\n    disableArea(val){\n        let list = [];\n        val.forEach(item => {\n            list.push(item[item.length-1]);\n        });\n        list = [...new Set(list)]//拿最后一级，去重\n        if (list.length>=15) {\n            let options = JSON.parse(JSON.stringify(this.areaOptions))\n            for (const item1 of options) {\n                if (!list.includes(item1.value)) {//第一级，如果大于15，没选中的禁用，选中的不禁用\n                    item1.disabled=true\n                }else{\n                    item1.disabled=false\n                }\n                for (const item2 of item1.children) {//第二级，如果大于15，没选中的禁用，选中的不禁用\n                    if (!list.includes(item2.value)) {\n                        item2.disabled=true\n                    }else{\n                        item2.disabled=false\n                    }\n                 }\n            }\n            this.areaOptions = options\n        }else{\n            let options = JSON.parse(JSON.stringify(this.areaOptions))\n            for (const item1 of options) {\n                item1.disabled = false\n                 for (const item2 of item1.children) {\n                     item2.disabled = false\n                 }\n            }\n            this.areaOptions = options\n        }\n        this.$forceUpdate();\n    },\n```\n', '<p><h3>目录</h3><ul><ul><ul><li><a href=\"#elmentUItable_1\">elmentUI的table取每列或者一行数据</a></li><li><a href=\"#2_17\">正则匹配，输入整数最多包含2位小数(例：输入金额)</a></li><li><a href=\"#_29\">手写一个上传图片组件</a></li><li><a href=\"#VUEelementUI_70\">VUE中如何修改elementUI样式，不影响别的组件</a></li><li><a href=\"#css_85\">用css修改滚动条样式</a></li><li><a href=\"#Vue_104\">Vue自定义指令</a></li><li><a href=\"#screenpageclientoffset_151\">关于screen、page、client、offset</a></li><li><a href=\"#_172\">锚点跳转</a></li><li><a href=\"#input_189\">复制除input文本</a></li><li><a href=\"#_210\">给页面加上水印</a></li><li><a href=\"#_284\">点击别处隐藏样式</a></li><li><a href=\"#_338\">图片加载失败，展示占位图片</a></li><li><a href=\"#_362\">中文英文换行</a></li><li><a href=\"#flex_389\">flex布局固定高度不被压缩</a></li><li><a href=\"#_393\">雨滴、星星、流星动画</a></li><li><a href=\"#elementUICascadertag_683\">elementUI级联选择器Cascader，删除tag存在的问题</a></li><li><a href=\"#echarts_758\">echarts的一些问题</a></li><li><a href=\"#router_815\">router新开窗口跳转</a></li><li><a href=\"#_834\">手写一个抽屉组件</a></li><li><a href=\"#vuedata_945\">vue重置data中的数据</a></li><li><a href=\"#Cascader__959\">Cascader 级联选择器限制选中个数</a></li></ul></ul></ul></p>\n<h3><a id=\"elmentUItable_1\"></a>elmentUI的table取每列或者一行数据</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">&lt;el-table-column label=<span class=\"hljs-string\">\"成交截图\"</span> prop=<span class=\"hljs-string\">\"followImage\"</span> align=<span class=\"hljs-string\">\"center\"</span>&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"scope\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-image</span>\n            <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"scope.row.followImage\"</span>\n            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"follow-image\"</span>\n            <span class=\"hljs-attr\">:preview-src-list</span>=<span class=\"hljs-string\">\"[scope.row.followImage]\"</span>\n        &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-image</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-table-column</span>&gt;</span>\n</span></code></div></pre>\n<ul>\n<li>需要template去接收，一个具名插槽<mark>slot-scope=“scope”</mark></li>\n<li>scope.row可以取到<strong>整行数据</strong></li>\n<li>scope.row.followImage可以取到其中<strong>每列数据</strong></li>\n</ul>\n<h3><a id=\"2_17\"></a>正则匹配，输入整数最多包含2位小数(例：输入金额)</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-keyword\">this</span>.price\n    .replace(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">\"\"</span>)\n    .replace(<span class=\"hljs-regexp\">/\\.{2,}/g</span>, <span class=\"hljs-string\">\".\"</span>)\n    .replace(<span class=\"hljs-string\">\".\"</span>, <span class=\"hljs-string\">\"$#$\"</span>)\n    .replace(<span class=\"hljs-regexp\">/\\./g</span>, <span class=\"hljs-string\">\"\"</span>)\n    .replace(<span class=\"hljs-string\">\"$#$\"</span>, <span class=\"hljs-string\">\".\"</span>)\n    .replace(<span class=\"hljs-regexp\">/^(\\-)*(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">\"$1$2.$3\"</span>)\n    .replace(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">\"\"</span>);\n</code></div></pre>\n<h3><a id=\"_29\"></a>手写一个上传图片组件</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//html</span>\n&lt;el-form-item label=<span class=\"hljs-string\">\"成交证明截图：\"</span> v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">\"followForm.state===\'completed\'\"</span>&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"upload-c\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"{backgroundImage:`url(${imageUrl})`}\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"el-icon-plus\"</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"imageUrl==\'\'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">\"image/*\"</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"onInputFileChange\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span>\n//js\nasync onInputFileChange(e) {//上传接口\n    const imageUri = await this.selectPhotos(\n        e.target.files[0],\n        \"image\"\n    );\n    this.imageUrl = imageUri;\n}\n//css\n.upload-c {\n    width: 90px;\n    height: 90px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f6f6f6;\n    border: 1px solid #d2d2d2;\n    border-radius: 3px;\n    position: relative;\n    background-size: cover;\n    background-repeat: no-repeat;\n    input {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0;\n    }\n}\n</span></code></div></pre>\n<h3><a id=\"VUEelementUI_70\"></a>VUE中如何修改elementUI样式，不影响别的组件</h3>\n<ul>\n<li>深度选择器<mark>deep</mark></li>\n</ul>\n<blockquote>\n<p>例如我们想要修改这个样式<br />\n<img src=\"https://img-blog.csdnimg.cn/20200721090125434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"less\"</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n/deep/.el-icon-circle-close{\n    color: #ffffff;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<ul>\n<li>修改当前页面的样式不影响别的页面。! important都不能修改，但是<mark>deep</mark>能够修改，优先级很高。</li>\n<li>如果想要修改全局的这个样式，需要在初始化样式时使用，就不用了加deep了。如果修改不了就可以用! important</li>\n</ul>\n</blockquote>\n<h3><a id=\"css_85\"></a>用css修改滚动条样式</h3>\n<blockquote>\n<p><strong>::-webkit-scrollbar</strong> 滚动条整体部分<br />\n::-webkit-scrollbar-button 滚动条两端的按钮<br />\n<strong>::-webkit-scrollbar-track</strong>  外层轨道<br />\n::-webkit-scrollbar-track-piece  内层滚动槽<br />\n<strong>::-webkit-scrollbar-thumb</strong> 滚动的滑块<br />\n::-webkit-scrollbar-corner 边角<br />\n::-webkit-resizer 定义右下角拖动块的样式</p>\n</blockquote>\n<ul>\n<li><code>::-webkit-scrollbar[-*]</code></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-css\">&amp;<span class=\"hljs-selector-pseudo\">::-webkit-scrollbar</span> {\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">25px</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50px</span>;\n}\n&amp;<span class=\"hljs-selector-pseudo\">::-webkit-scrollbar-thumb</span> {\n    <span class=\"hljs-attribute\">background</span>: red;\n}\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200721150456368.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"Vue_104\"></a>Vue自定义指令</h3>\n<ul>\n<li>钩子函数</li>\n</ul>\n<blockquote>\n<ul>\n<li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li>\n<li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>\n<li>unbind：只调用一次，指令与元素解绑时调用。</li>\n</ul>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"hook-arguments-example\"</span> <span class=\"hljs-attr\">v-demo:foo.a.b</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\">Vue.directive(<span class=\"hljs-string\">\'demo\'</span>, {\n  <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding, vnode</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">JSON</span>.stringify\n    el.innerHTML =\n      <span class=\"hljs-string\">\'name: \'</span>       + s(binding.name) + <span class=\"hljs-string\">\'&lt;br&gt;\'</span> +\n      <span class=\"hljs-string\">\'value: \'</span>      + s(binding.value) + <span class=\"hljs-string\">\'&lt;br&gt;\'</span> +\n      <span class=\"hljs-string\">\'expression: \'</span> + s(binding.expression) + <span class=\"hljs-string\">\'&lt;br&gt;\'</span> +\n      <span class=\"hljs-string\">\'argument: \'</span>   + s(binding.arg) + <span class=\"hljs-string\">\'&lt;br&gt;\'</span> +\n      <span class=\"hljs-string\">\'modifiers: \'</span>  + s(binding.modifiers) + <span class=\"hljs-string\">\'&lt;br&gt;\'</span> +\n      <span class=\"hljs-string\">\'vnode keys: \'</span> + <span class=\"hljs-built_in\">Object</span>.keys(vnode).join(<span class=\"hljs-string\">\', \'</span>)\n  }\n})\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200722112227636.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>指令钩子函数会被传入以下参数：</li>\n</ul>\n<blockquote>\n<ul>\n<li>el：指令所绑定的元素，可以用来直接操作 DOM。</li>\n<li>binding：一个对象，包含以下 property：</li>\n<li>name：指令名，不包括 v- 前缀。</li>\n<li>value：指令的绑定值，例如：v-my-directive=“1 + 1” 中，绑定值为 2。</li>\n<li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>\n<li>expression：字符串形式的指令表达式。例如 v-my-directive=“1 + 1” 中，表达式为 “1 + 1”。</li>\n<li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li>\n<li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>\n<li>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li>\n<li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>\n</ul>\n</blockquote>\n<ul>\n<li>扩展</li>\n</ul>\n<ol>\n<li>动态指令参数。v-demo:[foo]，foo可以是<mark>动态值</mark>。</li>\n<li>简写函数。不用写钩子函数</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-js\">Vue.directive(<span class=\"hljs-string\">\'color-swatch\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding</span>) </span>{\n  el.style.backgroundColor = binding.value\n})\n</code></div></pre>\n<h3><a id=\"screenpageclientoffset_151\"></a>关于screen、page、client、offset</h3>\n<ul>\n<li>srceen&gt;page&gt;client&gt;offset<br />\n<img src=\"https://img-blog.csdnimg.cn/20200722195711390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n实现拖拽效果<br />\n<code>&lt;div @mousedown=&quot;changeHeightDown&quot;&gt;&lt;/div&gt;</code></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">        changeHeightDown(e){\n            <span class=\"hljs-keyword\">this</span>.startHeight = e.pageY\n            <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">\"mousemove\"</span>,<span class=\"hljs-keyword\">this</span>.changeHeightMove);\n            <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">\"mouseup\"</span>,<span class=\"hljs-keyword\">this</span>.changeHeightUp);\n        },\n        changeHeightMove(e){\n            <span class=\"hljs-keyword\">let</span> height = e.pageY - <span class=\"hljs-keyword\">this</span>.startHeight;\n            <span class=\"hljs-keyword\">this</span>.vdrList[<span class=\"hljs-number\">0</span>].height += height;\n            <span class=\"hljs-keyword\">this</span>.startHeight = e.pageY;\n        },\n        changeHeightUp(e){\n            <span class=\"hljs-built_in\">document</span>.removeEventListener(<span class=\"hljs-string\">\"mousemove\"</span>,<span class=\"hljs-keyword\">this</span>.changeHeightMove);\n        }\n</code></div></pre>\n<h3><a id=\"_172\"></a>锚点跳转</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//html</span>\n<span class=\"hljs-comment\">//锚点</span>\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"titles\"</span> :id=<span class=\"hljs-string\">\"`pack${index}`\"</span>&gt;包装信息&lt;<span class=\"hljs-regexp\">/div&gt;\n/</span><span class=\"hljs-regexp\">/跳转\n&lt;div class=\"group-btn pack-info\" @click=\"scollTo(\'pack\',index)\"&gt;\n     &lt;img src=\"../</span>../images/pack-info.png<span class=\"hljs-string\">\" alt /&gt;\n        &lt;span&gt;包装信息&lt;/span&gt;\n&lt;/div&gt;\n//js\nscollTo(name, index) {\n    document.querySelector(`#${name}${index}`).scrollIntoView(true);\n},\n</span></code></div></pre>\n<h3><a id=\"input_189\"></a>复制除input文本</h3>\n<ul>\n<li>有input可以直接select，不用创建一个</li>\n<li>没有input，可以先创建一个input或者textarea，然后select、copy<br />\n<code>&lt;p @click=&quot;copyText(scope.row.desc)&quot; id=&quot;copybtn&quot;&gt;复制&lt;/p&gt;</code></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">        copyText(text) {\n            <span class=\"hljs-keyword\">var</span> textArea = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"textarea\"</span>);\n            textArea.value = text;\n            <span class=\"hljs-built_in\">document</span>.body.appendChild(textArea);\n            textArea.select();\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-keyword\">var</span> successful = <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">\"copy\"</span>);\n                <span class=\"hljs-keyword\">var</span> msg = successful\n                    ? <span class=\"hljs-string\">\"成功复制到剪贴板\"</span>\n                    : <span class=\"hljs-string\">\"该浏览器不支持点击复制到剪贴板\"</span>;\n                <span class=\"hljs-built_in\">console</span>.log(msg);\n            } <span class=\"hljs-keyword\">catch</span> (err) {}\n            <span class=\"hljs-built_in\">document</span>.body.removeChild(textArea);\n        },\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200724181800356.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_210\"></a>给页面加上水印</h3>\n<ul>\n<li>用canvas画一张背景图</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">//tool.js</span>\n    addWaterMark() {\n        <span class=\"hljs-keyword\">const</span> strArr = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${localStorage.getItem(\n                <span class=\"hljs-string\">\"loginUserName\"</span>\n            )}</span><span class=\"hljs-subst\">${localStorage\n                .getItem(<span class=\"hljs-string\">\"logunUserPhone\"</span>)\n                .slice(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)}</span>[<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()}</span>]`</span>;\n        <span class=\"hljs-keyword\">let</span> ctx = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"canvas\"</span>);\n        ctx.width = <span class=\"hljs-number\">250</span>;\n        ctx.height = <span class=\"hljs-number\">100</span>;\n        ctx.style.display = <span class=\"hljs-string\">\"none\"</span>;\n        <span class=\"hljs-keyword\">let</span> cans = ctx.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n        cans.rotate((<span class=\"hljs-number\">-20</span> * <span class=\"hljs-built_in\">Math</span>.PI) / <span class=\"hljs-number\">180</span>);\n        cans.font = <span class=\"hljs-string\">\"12px Microsoft YaHei\"</span>;\n        cans.fillStyle = <span class=\"hljs-string\">\"rgba(17, 17, 17, 0.20)\"</span>;\n        cans.textAlign = <span class=\"hljs-string\">\"left\"</span>;\n        cans.textBaseline = <span class=\"hljs-string\">\"Middle\"</span>;\n        cans.fillText(strArr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>);\n        cans.save();\n        <span class=\"hljs-keyword\">return</span> ctx.toDataURL();\n    }\n}\n</code></div></pre>\n<ul>\n<li>需要添加的页面引入</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">&lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"{backgroundImage:`url(${orgBackground})`}\"</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/template&gt;\n\n&lt;script&gt;\nimport tool from \"../</span>plus/tool<span class=\"hljs-string\">\";\nexport default {\n    data() {\n        return {\n            orgBackground: \"</span><span class=\"hljs-string\">\",\n        };\n    },\n    name: \"</span>test<span class=\"hljs-string\">\",\n    mounted() {\n        localStorage.setItem(\"</span>loginUserName<span class=\"hljs-string\">\", \"</span>ruan<span class=\"hljs-string\">\");\n        localStorage.setItem(\"</span>logunUserPhone<span class=\"hljs-string\">\", \"</span><span class=\"hljs-number\">123456</span><span class=\"hljs-string\">\");\n        this.orgBackground = tool.addWaterMark();\n        //监听dom属性改变重新生成水印(如果页面有变化需要去监听dom)\n        // const org = document.querySelector(\"</span>.content<span class=\"hljs-string\">\");\n        // const options = {\n        //     attributes: true,\n        //     childList: true,\n        //     subtree: true,\n        // };\n        // const observer = new MutationObserver((mutationList) =&gt; {\n        // this.orgBackground = tool.addWaterMark();\n        // });\n        // observer.observe(org, options);\n    },\n};\n&lt;/script&gt;\n\n&lt;style lang=\'less\' scoped&gt;\n.content {\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n&lt;/style&gt;\n&lt;/script&gt;\n</span></code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020073009143948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_284\"></a>点击别处隐藏样式</h3>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"isShowBlock\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"block2\"</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"isShow\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">isShow</span>: <span class=\"hljs-literal\">true</span>,\n        };\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        isShowBlock() {\n            <span class=\"hljs-keyword\">this</span>.isShow = !<span class=\"hljs-keyword\">this</span>.isShow;\n        },\n        close(e) {\n            <span class=\"hljs-keyword\">if</span> (e.target.className != <span class=\"hljs-string\">\"block\"</span>) {\n                <span class=\"hljs-keyword\">this</span>.isShow = <span class=\"hljs-literal\">false</span>;\n            }\n        },\n    },\n    mounted() {\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n    beforeDestroy() {\n        <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.header {\n    width: 700px;\n    height: 700px;\n    background-color: red;\n    .block {\n        width: 100px;\n        height: 100px;\n        background-color: royalblue;\n    }\n    .block2 {\n        width: 100px;\n        height: 100px;\n        background-color: royalblue;\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"_338\"></a>图片加载失败，展示占位图片</h3>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"props.src\"</span> @<span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">\'showErrorImage\'</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"editorImage\"</span>,\n    <span class=\"hljs-attr\">methods</span>: {\n        <span class=\"hljs-comment\">/**\n         * @description 图片加载失败占位\n         */</span>\n        showErrorImage(e) {\n            e.target.src = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../../assets/imgs/landing/img-1.png\"</span>);\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200817171316499.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_362\"></a>中文英文换行</h3>\n<pre><div class=\"hljs\"><code class=\"lang-css\"> <span class=\"hljs-selector-tag\">white-space</span>: <span class=\"hljs-selector-tag\">normal</span>;\n <span class=\"hljs-selector-tag\">word-break</span>: <span class=\"hljs-selector-tag\">break-all</span>;\n <span class=\"hljs-selector-tag\">word-wrap</span>: <span class=\"hljs-selector-tag\">break-word</span>;\n</code></div></pre>\n<blockquote>\n<p>white-space: normal|pre|nowrap|pre-wrap|pre-line|inherit;<br />\nwhite-space 属性设置如何处理元素内的空白<br />\nnormal 默认。空白会被浏览器忽略。<br />\npre 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。<br />\nnowrap 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。<br />\npre-wrap 保留空白符序列，但是正常地进行换行。<br />\npre-line 合并空白符序列，但是保留换行符。<br />\ninherit 规定应该从父元素继承 white-space 属性的值。</p>\n</blockquote>\n<blockquote>\n<p>word-wrap: normal|break-word;<br />\nword-wrap 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。<br />\nnormal: 只在允许的断字点换行(浏览器保持默认处理)<br />\nbreak-word:在长单词或URL地址内部进行换行<br />\nword-break: normal|break-all|keep-all;</p>\n</blockquote>\n<blockquote>\n<p>word-break 属性用来标明怎么样进行单词内的断句。<br />\nnormal：使用浏览器默认的换行规则。<br />\nbreak-all:允许再单词内换行<br />\nkeep-all:只能在半角空格或连字符处换行</p>\n</blockquote>\n<h3><a id=\"flex_389\"></a>flex布局固定高度不被压缩</h3>\n<p><code>flex-shrink:0</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200902102345304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200902102441830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_393\"></a>雨滴、星星、流星动画</h3>\n<ul>\n<li>雨滴</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rain\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in rainNumber\"</span>\n            <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rain-item\"</span>\n            <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"rain-item\"</span>\n            <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"`transform:rotate(${rotateDeg}deg);width:${w}px;height:${h}px;`\"</span>\n        &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"line\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"`animationDelay:${index*100}ms`\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"rain-component\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">rainNumber</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">rotateDeg</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">w</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">h</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n    },\n    mounted() {\n        <span class=\"hljs-keyword\">this</span>.randomRain();\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        randomRain() {\n            <span class=\"hljs-keyword\">let</span> rainArr = <span class=\"hljs-keyword\">this</span>.$refs[<span class=\"hljs-string\">\"rain-item\"</span>];\n            <span class=\"hljs-comment\">// console.log(rainArr);</span>\n            rainArr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n                <span class=\"hljs-comment\">// console.log(item.children);</span>\n                item.style.top = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">250</span> + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"px\"</span>;\n                item.style.left = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">700</span> + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"px\"</span>;\n            });\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.rain {\n    width: 700px;\n    height: 250px;\n    position: relative;\n    background: radial-gradient(\n        at 50% 0%,\n        rgba(6, 55, 111, 1) 0%,\n        rgba(11, 26, 57, 1) 70%\n    );\n    .rain-item {\n        position: absolute;\n        width: 2px;\n        height: 30px;\n        // background: skyblue;\n        display: inline-block;\n        // overflow: hidden;\n        .line {\n            animation: raining 2s infinite linear;\n            position: absolute;\n            content: \"\";\n            top: -30px;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 183, 255, 0.7);\n        }\n    }\n}\n@keyframes raining {\n    0% {\n        top: -30px;\n        opacity: 0;\n    }\n    50% {\n        top: 0px;\n        opacity: 1;\n    }\n    100% {\n        top: 30px;\n        opacity: 0;\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>星星</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"star\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in starNumber\"</span>\n            <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"star-item\"</span>\n            <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"star-item\"</span>\n            <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"`animationDelay:${index*100}ms;width:${w}px;height:${h}px;`\"</span>\n        &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"star-component\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">starNumber</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">w</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">h</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n    },\n    mounted() {\n        <span class=\"hljs-keyword\">this</span>.randomStar();\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        randomStar() {\n            <span class=\"hljs-keyword\">let</span> starArr = <span class=\"hljs-keyword\">this</span>.$refs[<span class=\"hljs-string\">\"star-item\"</span>];\n            <span class=\"hljs-comment\">// console.log(starArr);</span>\n            starArr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n                <span class=\"hljs-comment\">// console.log(item.children);</span>\n                item.style.top = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">250</span> + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"px\"</span>;\n                item.style.left = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">700</span> + <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"px\"</span>;\n            });\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.star {\n    width: 700px;\n    height: 250px;\n    position: relative;\n    background: radial-gradient(\n        at 0% 100%,\n        rgba(9, 37, 61, 1) 20%,\n        rgba(9, 31, 55, 1) 70%\n    );\n    .star-item {\n        position: absolute;\n        width: 4px;\n        height: 4px;\n        display: inline-block;\n        animation: staring 2s infinite linear;\n        background: rgba(2, 213, 255, 1);\n        border-radius: 50%;\n    }\n}\n@keyframes staring {\n    0% {\n        opacity: 0;\n    }\n    50% {\n        opacity: 1;\n    }\n    100% {\n        opacity: 0;\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>流星</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"meteor\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"`transform:rotate(${rotateDeg}deg)`\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"line\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"`animationDelay:${delay}s;width:${w}px;height:${h}px;`\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"meteor-component\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">delay</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">w</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">h</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n        <span class=\"hljs-attr\">rotateDeg</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>,\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.meteor {\n    width: 2px;\n    height: 200px;\n    position: relative;\n    // overflow: hidden;\n    .line {\n        animation: meteoring 6s infinite linear;\n        position: absolute;\n        width: 2px;\n        height: 200px;\n        background: linear-gradient(\n            to top,\n            rgb(2, 161, 195, 1),\n            rgba(11, 36, 66, 0.1)\n        );\n        border-radius: 2px;\n        box-shadow: 0px 10px 20px 0px #02a1c3;\n        opacity: 0;\n        &amp;::before {\n            width: 2px;\n            height: 2px;\n            content: \"\";\n            position: absolute;\n            bottom: 0px;\n            left: 0px;\n            border-radius: 50%;\n            background: #00d0ff;\n            box-shadow: 0px 0px 12px 5px #00d0ff;\n        }\n    }\n}\n@keyframes meteoring {\n    0% {\n        opacity: 0;\n        top: -250px;\n    }\n    25% {\n        opacity: 0.5;\n        top: 0px;\n    }\n    50% {\n        opacity: 0.8;\n        top: 250px;\n    }\n    75% {\n        opacity: 1;\n        top: 500px;\n    }\n    100% {\n        opacity: 0;\n        top: 750px;\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>引用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rain-bg\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rain-component</span> <span class=\"hljs-attr\">:rainNumber</span>=<span class=\"hljs-string\">\"20\"</span> <span class=\"hljs-attr\">:rotateDeg</span>=<span class=\"hljs-string\">\"-10\"</span> <span class=\"hljs-attr\">:w</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">:h</span>=<span class=\"hljs-string\">\"20\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rain-component</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"meteor-bg\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meteor-component</span> <span class=\"hljs-attr\">:delay</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">:w</span>=<span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-attr\">:h</span>=<span class=\"hljs-string\">\"200\"</span> <span class=\"hljs-attr\">:rotateDeg</span>=<span class=\"hljs-string\">\"40\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">meteor-component</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"meteor-bg2\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meteor-component</span> <span class=\"hljs-attr\">:delay</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">:w</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">:h</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">:rotateDeg</span>=<span class=\"hljs-string\">\"30\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">meteor-component</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"star-bg\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">star-component</span> <span class=\"hljs-attr\">:starNumber</span>=<span class=\"hljs-string\">\"20\"</span> <span class=\"hljs-attr\">:w</span>=<span class=\"hljs-string\">\"4\"</span> <span class=\"hljs-attr\">:h</span>=<span class=\"hljs-string\">\"4\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">star-component</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020090217364073.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"elementUICascadertag_683\"></a>elementUI级联选择器Cascader，删除tag存在的问题</h3>\n<pre><div class=\"hljs\"><code class=\"lang-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"address-choose\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-show\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span>\n                <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tags\"</span>\n                <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in cityShowList\"</span>\n                <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n                <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n                @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteCity(index)\"</span>\n            &gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-cascader</span>\n            <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"cityList\"</span>\n            <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"options\"</span>\n            <span class=\"hljs-attr\">:props</span>=<span class=\"hljs-string\">\"{ multiple: true }\"</span>\n            <span class=\"hljs-attr\">collapse-tags</span>\n            <span class=\"hljs-attr\">clearable</span>\n            @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeCity\"</span>\n            <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n        &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-cascader</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<p>点击按钮删除事件时，输入框中的值并没有变化</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">     deleteCity(index) {\n         <span class=\"hljs-keyword\">this</span>.cityShowList.splice(index, <span class=\"hljs-number\">1</span>);\n         <span class=\"hljs-keyword\">this</span>.cityList.splice(index, <span class=\"hljs-number\">1</span>);\n     },\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200917170740152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n解决办法</p>\n<ul>\n<li>给级联选择器v-if</li>\n<li>删除事件中加this.$nextTick()</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"address-choose\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-show\"</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span>\n                  <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tags\"</span>\n                  <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in cityShowList\"</span>\n                  <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n                  <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n                  @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteCity(item,index)\"</span>\n              &gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-cascader</span>\n              <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"cityList\"</span>\n              <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"options\"</span>\n              <span class=\"hljs-attr\">:props</span>=<span class=\"hljs-string\">\"{ multiple: true }\"</span>\n              <span class=\"hljs-attr\">collapse-tags</span>\n              <span class=\"hljs-attr\">clearable</span>\n              @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeCity\"</span>\n              <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n              \n              <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"showCity\"</span>\n          &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-cascader</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    deleteCity(item, index) {\n        <span class=\"hljs-keyword\">this</span>.showCity = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">this</span>.cityShowList.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.cityList.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">this</span>.showCity = <span class=\"hljs-literal\">true</span>;\n        });\n    },\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200917171329547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"echarts_758\"></a>echarts的一些问题</h3>\n<ul>\n<li>echarts自适应页面</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    <span class=\"hljs-keyword\">let</span> myChart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.id}</span>`</span>));\n    myChart.clear();\n    myChart.setOption(option, <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"resize\"</span>, () =&gt; {\n        myChart.resize();\n    });\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200924095908953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200924095926825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>提示+吸附</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">   <span class=\"hljs-keyword\">let</span> option = {\n       <span class=\"hljs-attr\">tooltip</span>: {\n           <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n           <span class=\"hljs-attr\">axisPointer</span>: {\n               <span class=\"hljs-attr\">snap</span>: <span class=\"hljs-literal\">true</span>,\n           },\n       },\n   }\n</code></div></pre>\n<ul>\n<li>流线型+放大数据点+渐变背景</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> option = {\n    <span class=\"hljs-attr\">series</span>: [\n         {\n         <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"浏览次数\"</span>,\n         <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">820</span>, <span class=\"hljs-number\">932</span>, <span class=\"hljs-number\">901</span>, <span class=\"hljs-number\">934</span>, <span class=\"hljs-number\">1290</span>, <span class=\"hljs-number\">1330</span>, <span class=\"hljs-number\">1320</span>],\n         <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"line\"</span>,\n         <span class=\"hljs-attr\">smooth</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//流线型</span>\n         symbolSize: <span class=\"hljs-number\">10</span>,<span class=\"hljs-comment\">//放大点</span>\n         areaStyle: {<span class=\"hljs-comment\">//渐变背景</span>\n             color: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">1</span>,\n                 [\n                     {\n                         <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n                         <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#66CCCC\"</span>,\n                     },\n                     {\n                         <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>,\n                         <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#fff\"</span>,\n                     },\n                 ]\n             ),\n         },\n     },\n    ]\n}\n</code></div></pre>\n<h3><a id=\"router_815\"></a>router新开窗口跳转</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">   <span class=\"hljs-comment\">/**\n    * @description 跳转落地页详情\n    */</span>\n   toLandingInfo(params) {\n       <span class=\"hljs-keyword\">let</span> routeData = <span class=\"hljs-keyword\">this</span>.$router.resolve({\n           <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"analysis.landing.info\"</span>,\n           <span class=\"hljs-attr\">query</span>: {\n               <span class=\"hljs-attr\">pageId</span>: params.pageId,\n               <span class=\"hljs-attr\">startTime</span>: moment().subtract(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\"day\"</span>).format(<span class=\"hljs-string\">\"yyyy-MM-DD\"</span>),\n               <span class=\"hljs-attr\">endTime</span>: moment().format(<span class=\"hljs-string\">\"yyyy-MM-DD\"</span>),\n           },\n       });\n       <span class=\"hljs-built_in\">window</span>.open(routeData.href, <span class=\"hljs-string\">\"_blank\"</span>);\n   },\n</code></div></pre>\n<h3><a id=\"_834\"></a>手写一个抽屉组件</h3>\n<p>基于vue的过渡动画</p>\n<ul>\n<li>样式（点击消息提醒，从右侧弹出抽屉）<br />\n<img src=\"https://img-blog.csdnimg.cn/20201126160051403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></li>\n<li><mark>transition</mark> + <mark>v-show/v-if</mark></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"show\"</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">\"out-in\"</span> @<span class=\"hljs-attr\">before-enter</span>=<span class=\"hljs-string\">\'transitionComplete\'</span> @<span class=\"hljs-attr\">after-leave</span>=<span class=\"hljs-string\">\'transitionComplete\'</span> @<span class=\"hljs-attr\">enter</span>=<span class=\"hljs-string\">\'transitioning\'</span> @<span class=\"hljs-attr\">leave</span>=<span class=\"hljs-string\">\'transitioning\'</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message-container\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"message-container\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"close\"</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"drawerClose\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"messageCenter\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">drawerClose</span>: {<span class=\"hljs-comment\">//父组件的消息提醒icon，控制显示隐藏</span>\n            type: <span class=\"hljs-built_in\">Boolean</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>,\n        },\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n        };\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n        <span class=\"hljs-comment\">/**\n         * @description 动画结束\n         */</span>\n        transitionComplete() {\n            <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>);\n            body.style.overflow = <span class=\"hljs-string\">\"visible\"</span>;\n        },\n        <span class=\"hljs-comment\">//动画进行时</span>\n        transitioning() {\n            <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>);\n            body.style.overflow = <span class=\"hljs-string\">\"hidden\"</span>;\n        },\n        close(e) {\n            <span class=\"hljs-keyword\">const</span> parent = <span class=\"hljs-keyword\">this</span>.$refs[<span class=\"hljs-string\">\"message-container\"</span>];\n            <span class=\"hljs-keyword\">if</span> (\n                e.target.className != <span class=\"hljs-string\">\"message-container\"</span> &amp;&amp;\n                e.target.className != <span class=\"hljs-string\">\"el-icon-bell\"</span> &amp;&amp;\n                !parent.contains(e.target)\n            ) {<span class=\"hljs-comment\">//除了本身及子元素和消息提醒，点击关闭</span>\n                <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">\"closeMessage\"</span>, <span class=\"hljs-literal\">false</span>);\n            }\n        },\n    },\n    mounted() {\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n    beforeDestroy() {\n        <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"less\"</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.show-enter-active,\n.show-leave-active {\n    transition: all 0.3s;\n}\n.show-enter,\n.show-leave-to {\n    transform: translateX(500px);\n}\n.message-container {\n    // transition: all 0.3s ease-in-out;\n    position: absolute;\n    bottom: 0;\n    right: 0px;\n    width: 500px;\n    height: calc(100vh - 60px);\n    background: #ffffff;\n    z-index: 99;\n    box-shadow: -5px 11px 22px 0px rgba(0, 0, 0, 0.16);\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>动画</li>\n</ul>\n<blockquote>\n<p>v-enter: 弹框显示前的样式，过渡的开始状态, 也就是动画还没开始前，动画的起始位置<br />\nv-enter-active 动画生效的状态，从底部过渡到页面的过程<br />\nv-enter-to 动画执行完的结束状态，也就是弹出结束后显示在页面的样式<br />\nv-leave 隐藏元素，离开动画的开始状态，元素消失开始的样式<br />\nv-leave-active 隐藏元素过程中，离开动画的生效动态即离开的过程，从上到下滑<br />\nv-leave-to 隐藏元素完成，离开动画的结束状态(此时v-leave的样式被删除)</p>\n</blockquote>\n<ul>\n<li>事件钩子</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n  <span class=\"hljs-attr\">v-on:before-enter</span>=<span class=\"hljs-string\">\"beforeEnter\"</span>\n  <span class=\"hljs-attr\">v-on:enter</span>=<span class=\"hljs-string\">\"enter\"</span>\n  <span class=\"hljs-attr\">v-on:after-enter</span>=<span class=\"hljs-string\">\"afterEnter\"</span>\n  <span class=\"hljs-attr\">v-on:enter-cancelled</span>=<span class=\"hljs-string\">\"enterCancelled\"</span>\n \n  <span class=\"hljs-attr\">v-on:before-leave</span>=<span class=\"hljs-string\">\"beforeLeave\"</span>\n  <span class=\"hljs-attr\">v-on:leave</span>=<span class=\"hljs-string\">\"leave\"</span>\n  <span class=\"hljs-attr\">v-on:after-leave</span>=<span class=\"hljs-string\">\"afterLeave\"</span>\n  <span class=\"hljs-attr\">v-on:leave-cancelled</span>=<span class=\"hljs-string\">\"leaveCancelled\"</span>\n&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<p>我这里用了时间钩子，是因为，在动画过程中会重新计算宽高，所以会有滚动条，即使绝对定位也不行。所以在动画的时候给body加了overflow，结束之后又还原。就不会有滚动条了，前提是内容滚动区不是body，而是el-main之内的区域滚动。否则可能会有问题。</p>\n</blockquote>\n<h3><a id=\"vuedata_945\"></a>vue重置data中的数据</h3>\n<p><code>this.$options</code>可以获取到单文件中的所有数据</p>\n<ul>\n<li><code>this.$options.data()</code>可以获取到单文件中的data的数据</li>\n<li><code>this.$options.methods</code>可以获取到单文件中和全局的方法</li>\n<li>…</li>\n</ul>\n<p><code>this.$data = this.$options.data()</code>可以重置整个data数据</p>\n<ul>\n<li>重置表单数据</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"> resetForm() {\n     <span class=\"hljs-keyword\">this</span>.filters = <span class=\"hljs-keyword\">this</span>.$options.data().filters;\n },\n</code></div></pre>\n<h3><a id=\"Cascader__959\"></a>Cascader 级联选择器限制选中个数</h3>\n<ul>\n<li>我这里只有2级，所以直接循环</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-cascader</span>\n   <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"area\"</span>\n   <span class=\"hljs-attr\">:show-all-levels</span>=<span class=\"hljs-string\">\"false\"</span>\n   <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"areaOptions\"</span>\n   <span class=\"hljs-attr\">:props</span>=<span class=\"hljs-string\">\"{ multiple: true,checkStrictly:true }\"</span>\n   @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeArea1\"</span>\n   <span class=\"hljs-attr\">collapse-tags</span>\n   <span class=\"hljs-attr\">clearable</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-cascader</span>&gt;</span>\n   \n    /**\n     * @description 限制渠道归属地个数\n     */\n    changeArea1(val){\n        this.disableArea(val)\n    },\n    /**\n     * @description 处理禁用问题\n     */\n    disableArea(val){\n        let list = [];\n        val.forEach(item =&gt; {\n            list.push(item[item.length-1]);\n        });\n        list = [...new Set(list)]//拿最后一级，去重\n        if (list.length&gt;=15) {\n            let options = JSON.parse(JSON.stringify(this.areaOptions))\n            for (const item1 of options) {\n                if (!list.includes(item1.value)) {//第一级，如果大于15，没选中的禁用，选中的不禁用\n                    item1.disabled=true\n                }else{\n                    item1.disabled=false\n                }\n                for (const item2 of item1.children) {//第二级，如果大于15，没选中的禁用，选中的不禁用\n                    if (!list.includes(item2.value)) {\n                        item2.disabled=true\n                    }else{\n                        item2.disabled=false\n                    }\n                 }\n            }\n            this.areaOptions = options\n        }else{\n            let options = JSON.parse(JSON.stringify(this.areaOptions))\n            for (const item1 of options) {\n                item1.disabled = false\n                 for (const item2 of item1.children) {\n                     item2.disabled = false\n                 }\n            }\n            this.areaOptions = options\n        }\n        this.$forceUpdate();\n    },\n</code></div></pre>\n', 155, '实习', 'vue,js,es6', '2020-12-16 10:48:14', '2021-04-03 10:48:14', 1, 0);
INSERT INTO `articles` VALUES (38, 'Vue如何给页面加水印', '### 给页面加上水印\n- 用canvas画一张背景图\n\n```js\nexport default {\n    //tool.js\n    addWaterMark() {\n        const strArr = `${localStorage.getItem(\n                \"loginUserName\"\n            )}${localStorage\n                .getItem(\"logunUserPhone\")\n                .slice(7, 11)}[${new Date()}]`;\n        let ctx = document.createElement(\"canvas\");\n        ctx.width = 250;\n        ctx.height = 100;\n        ctx.style.display = \"none\";\n        let cans = ctx.getContext(\"2d\");\n        cans.rotate((-20 * Math.PI) / 180);\n        cans.font = \"12px Microsoft YaHei\";\n        cans.fillStyle = \"rgba(17, 17, 17, 0.20)\";\n        cans.textAlign = \"left\";\n        cans.textBaseline = \"Middle\";\n        cans.fillText(strArr, 0, 100);\n        cans.save();\n        return ctx.toDataURL();\n    }\n}\n```\n- 需要添加的页面引入\n\n```js\n<template>\n    <div class=\"content\" :style=\"{backgroundImage:`url(${orgBackground})`}\">123</div>\n</template>\n\n<script>\nimport tool from \"../plus/tool\";\nexport default {\n    data() {\n        return {\n            orgBackground: \"\",\n        };\n    },\n    name: \"test\",\n    mounted() {\n        localStorage.setItem(\"loginUserName\", \"ruan\");\n        localStorage.setItem(\"logunUserPhone\", \"123456\");\n        //实际只需要一行代码\n        this.orgBackground = tool.addWaterMark();\n        //监听dom属性改变重新生成水印(如果页面有变化需要去监听dom)\n        // const org = document.querySelector(\".content\");\n        // const options = {\n        //     attributes: true,\n        //     childList: true,\n        //     subtree: true,\n        // };\n        // const observer = new MutationObserver((mutationList) => {\n        // this.orgBackground = tool.addWaterMark();\n        // });\n        // observer.observe(org, options);\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.content {\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n</style>\n</script>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020073009143948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)', '<h3><a id=\"_0\"></a>给页面加上水印</h3>\n<ul>\n<li>用canvas画一张背景图</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">//tool.js</span>\n    addWaterMark() {\n        <span class=\"hljs-keyword\">const</span> strArr = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${localStorage.getItem(\n                <span class=\"hljs-string\">\"loginUserName\"</span>\n            )}</span><span class=\"hljs-subst\">${localStorage\n                .getItem(<span class=\"hljs-string\">\"logunUserPhone\"</span>)\n                .slice(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)}</span>[<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()}</span>]`</span>;\n        <span class=\"hljs-keyword\">let</span> ctx = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"canvas\"</span>);\n        ctx.width = <span class=\"hljs-number\">250</span>;\n        ctx.height = <span class=\"hljs-number\">100</span>;\n        ctx.style.display = <span class=\"hljs-string\">\"none\"</span>;\n        <span class=\"hljs-keyword\">let</span> cans = ctx.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n        cans.rotate((<span class=\"hljs-number\">-20</span> * <span class=\"hljs-built_in\">Math</span>.PI) / <span class=\"hljs-number\">180</span>);\n        cans.font = <span class=\"hljs-string\">\"12px Microsoft YaHei\"</span>;\n        cans.fillStyle = <span class=\"hljs-string\">\"rgba(17, 17, 17, 0.20)\"</span>;\n        cans.textAlign = <span class=\"hljs-string\">\"left\"</span>;\n        cans.textBaseline = <span class=\"hljs-string\">\"Middle\"</span>;\n        cans.fillText(strArr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>);\n        cans.save();\n        <span class=\"hljs-keyword\">return</span> ctx.toDataURL();\n    }\n}\n</code></div></pre>\n<ul>\n<li>需要添加的页面引入</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">&lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"{backgroundImage:`url(${orgBackground})`}\"</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/template&gt;\n\n&lt;script&gt;\nimport tool from \"../</span>plus/tool<span class=\"hljs-string\">\";\nexport default {\n    data() {\n        return {\n            orgBackground: \"</span><span class=\"hljs-string\">\",\n        };\n    },\n    name: \"</span>test<span class=\"hljs-string\">\",\n    mounted() {\n        localStorage.setItem(\"</span>loginUserName<span class=\"hljs-string\">\", \"</span>ruan<span class=\"hljs-string\">\");\n        localStorage.setItem(\"</span>logunUserPhone<span class=\"hljs-string\">\", \"</span><span class=\"hljs-number\">123456</span><span class=\"hljs-string\">\");\n        //实际只需要一行代码\n        this.orgBackground = tool.addWaterMark();\n        //监听dom属性改变重新生成水印(如果页面有变化需要去监听dom)\n        // const org = document.querySelector(\"</span>.content<span class=\"hljs-string\">\");\n        // const options = {\n        //     attributes: true,\n        //     childList: true,\n        //     subtree: true,\n        // };\n        // const observer = new MutationObserver((mutationList) =&gt; {\n        // this.orgBackground = tool.addWaterMark();\n        // });\n        // observer.observe(org, options);\n    },\n};\n&lt;/script&gt;\n\n&lt;style lang=\'less\' scoped&gt;\n.content {\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n&lt;/style&gt;\n&lt;/script&gt;\n</span></code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020073009143948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n', 7, '实用', 'vue,css', '2020-11-19 15:58:23', '2020-11-19 15:58:23', 0, 0);
INSERT INTO `articles` VALUES (39, 'Vue3.0初体验（组合API使用）', '### 构建项目\n- vue-cli需要4.5\n- ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022093955199.png#pic_center)\n\n- `npm init vite-app <project-name>`\n- [vue3.0中文文档](https://www.vue3js.cn/docs/zh/)\n- [vue文档，已经能看到vue3.0的东西了](https://vue-docs-next-zh-cn.netlify.app/guide/installation.html#vue-devtools)\n\n#### 写文章时的代码\n\n```html\n<template>\n    <h1>{{ msg }}</h1>\n    <button @click=\"numAdd\">count is: {{ num }}</button>\n    <button @click=\"changeAge\">age is: {{ obj.age }}</button>\n    <p ref=\"hello\">Edit <code>components/HelloWorld.vue</code> to test hot module replacement.</p>\n    <piTest></piTest>\n    <button @click=\"changeProvide1\">changeProvide1</button>\n    <button @click=\"changeProvide2\">changeProvide2</button>\n</template>\n\n<script>\nimport {\n    onMounted,\n    onUpdated,\n    reactive,\n    ref,\n    watch,\n    computed,\n    provide,\n} from \"vue\";\nimport piTest from \"../components/piTest.vue\";\nexport default {\n    name: \"HelloWorld\",\n    props: {\n        msg: String,\n    },\n    data() {\n        return {\n            count: 0,\n        };\n    },\n    components: {\n        piTest,\n    },\n    setup(props, context) {\n        console.log(props);\n        console.log(context);\n\n        const name = ref(\"rmq\");\n        const like = reactive({ dog: \"wangwang\", cat: \"maomao\" });\n        const provide1 = provide(\"name\", name);\n        const provide2 = provide(\"like\", like);\n        const changeProvide1 = () => {\n            name.value = \"xr\";\n        };\n        const changeProvide2 = () => {\n            like.dog = \"ww\";\n            like.cat = \"mm\";\n        };\n\n        // const provide1 = provide(\"name\", \"rmq\");\n        // const provide2 = provide(\"like\", { dog: \"wangwang\", cat: \"maomao\" });\n\n        const num = ref(0);\n        const numAdd = () => {\n            num.value++;\n        };\n        watch(\n            () => num.value,\n            (newNum, oldNum) => {\n                console.log(\"newNum:\" + newNum);\n                console.log(\"oldNum:\" + oldNum);\n            }\n        );\n        const obj = reactive({ name: \"rmq\", age: 22 });\n        const changeAge = () => {\n            obj.age++;\n        };\n        watch(\n            () => obj.age,\n            (newAge, oldAge) => {\n                console.log(\"newAge:\" + newAge);\n                console.log(\"oldAge:\" + oldAge);\n            }\n        );\n\n        const doubleCount = computed(() => num.value * 2);\n\n        const hello = ref(\"hello\");\n        onMounted(() => {\n            hello.value.style.color = \"pink\";\n        });\n\n        return {\n            num,\n            numAdd,\n            changeAge,\n            obj,\n            doubleCount,\n            hello,\n            changeProvide1,\n            changeProvide2,\n        };\n    },\n};\n</script>\n```\n\n### 关于watch监听\n- 监听简单的数据\n\n```js\n    const num = ref(0);\n    const numAdd = () => {\n        num.value++;\n    };\n    watch(\n        () => num.value,\n        (newNum, oldNum) => {\n            console.log(newNum);\n            console.log(oldNum);\n        }\n    );\n    // 或者\n    // watch(num.value, (newNum, oldNum) => {\n    //     console.log(newNum);\n    //     console.log(oldNum);\n    // });\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201021174126215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- 监听复杂一点的\n\n```js\n        const obj = reactive({ name: \"rmq\", age: 22 });\n        const changeAge = () => {\n            obj.age++;\n        };\n        watch(\n            () => obj.age,\n            (newAge, oldAge) => {\n                console.log(\"newAge:\" + newAge);\n                console.log(\"oldAge:\" + oldAge);\n            }\n        );\n```\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022092924899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n\n- 监听多个\n\n```js\n   const num = ref(0);\n   const numAdd = () => {\n       num.value++;\n   };\n\n   const obj = reactive({ name: \"rmq\", age: 22 });\n   const changeAge = () => {\n       obj.age++;\n   };\n\n   watch([num, () => obj.age], ([newNum, newAge], [oldNum, oldAge]) => {\n       console.log(newNum);\n       console.log(oldNum);\n       console.log(newAge);\n       console.log(oldAge);\n   });\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201021175508987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n### ref获取Dom\n> vue3.0的获取DOM和之前有点不同\n> 1. setup中先声明\n> 2. return出去\n> 3. DOM中ref去引用\n\n```js\n//<p ref=\"hello\">Edit <code>components/HelloWorld.vue</code> to test hot module replacement.</p>\n   const hello = ref(\"hello\");\n   onMounted(() => {\n       hello.value.style.color = \"pink\";\n   });\n    return {\n     hello,\n 	};\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201021180340211.png#pic_center)\n### setup()的参数props和context\n\n```js\n   setup(props, context) {\n       console.log(props);\n       console.log(context);\n   }\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022094719783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n### 生命周期\n选项 API	| Hook inside inside setup\n-------- | -----\nbeforeCreate |	Not needed*\ncreated |	Not needed*\nbeforeMount |	onBeforeMount\nmounted |	onMounted\nbeforeUpdate |	onBeforeUpdate\nupdated |	onUpdated\nbeforeUnmount |	onBeforeUnmount\nunmounted |	onUnmounted\nerrorCaptured |	onErrorCaptured\nrenderTracked |	onRenderTracked\nrenderTriggered |	onRenderTriggered\n\n\n### 提供和注入\n- 用==provide==，api声明\n\n```js\nimport {\n    onMounted,\n    onUpdated,\n    reactive,\n    ref,\n    watch,\n    computed,\n    provide,\n} from \"vue\";\nsetup(){\n    const provide1 = provide(\"name\", \"rmq\");\n    const provide2 = provide(\"like\", { dog: \"wangwang\", cat: \"maomao\" });\n}\n```\n- 用==inject==，api使用\n\n```html\n<template>\n    <h2>piTest</h2>\n    <div>{{inject1}}</div>\n    <div>{{inject2}}</div>\n</template>\n\n<script>\nimport { inject } from \"vue\";\nexport default {\n    setup() {\n        const inject1 = inject(\"name\");\n        const inject2 = inject(\"like\");\n        return {\n            inject1,\n            inject2,\n        };\n    },\n};\n</script>\n\n<style>\n</style>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022101248513.png#pic_center)\n- 也可以声明响应式的\n\n```js\n     const name = ref(\"rmq\");\n     const like = reactive({ dog: \"wangwang\", cat: \"maomao\" });\n     const provide1 = provide(\"name\", name);\n     const provide2 = provide(\"like\", like);\n     const changeProvide1 = () => {\n         name.value = \"xr\";\n     };\n     const changeProvide2 = () => {\n         like.dog = \"ww\";\n         like.cat = \"mm\";\n     };\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022103301785.png#pic_center)![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022103313210.png#pic_center)\n\n', '<h3><a id=\"_0\"></a>构建项目</h3>\n<ul>\n<li>\n<p>vue-cli需要4.5</p>\n</li>\n<li>\n<p><img src=\"https://img-blog.csdnimg.cn/20201022093955199.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p><code>npm init vite-app &lt;project-name&gt;</code></p>\n</li>\n<li>\n<p><a href=\"https://www.vue3js.cn/docs/zh/\" target=\"_blank\">vue3.0中文文档</a></p>\n</li>\n<li>\n<p><a href=\"https://vue-docs-next-zh-cn.netlify.app/guide/installation.html#vue-devtools\" target=\"_blank\">vue文档，已经能看到vue3.0的东西了</a></p>\n</li>\n</ul>\n<h4><a id=\"_8\"></a>写文章时的代码</h4>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"numAdd\"</span>&gt;</span>count is: {{ num }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"changeAge\"</span>&gt;</span>age is: {{ obj.age }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span>Edit <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>components/HelloWorld.vue<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span> to test hot module replacement.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">piTest</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">piTest</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"changeProvide1\"</span>&gt;</span>changeProvide1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"changeProvide2\"</span>&gt;</span>changeProvide2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {\n    onMounted,\n    onUpdated,\n    reactive,\n    ref,\n    watch,\n    computed,\n    provide,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">import</span> piTest <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../components/piTest.vue\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"HelloWorld\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">String</span>,\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n        };\n    },\n    <span class=\"hljs-attr\">components</span>: {\n        piTest,\n    },\n    setup(props, context) {\n        <span class=\"hljs-built_in\">console</span>.log(props);\n        <span class=\"hljs-built_in\">console</span>.log(context);\n\n        <span class=\"hljs-keyword\">const</span> name = ref(<span class=\"hljs-string\">\"rmq\"</span>);\n        <span class=\"hljs-keyword\">const</span> like = reactive({ <span class=\"hljs-attr\">dog</span>: <span class=\"hljs-string\">\"wangwang\"</span>, <span class=\"hljs-attr\">cat</span>: <span class=\"hljs-string\">\"maomao\"</span> });\n        <span class=\"hljs-keyword\">const</span> provide1 = provide(<span class=\"hljs-string\">\"name\"</span>, name);\n        <span class=\"hljs-keyword\">const</span> provide2 = provide(<span class=\"hljs-string\">\"like\"</span>, like);\n        <span class=\"hljs-keyword\">const</span> changeProvide1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            name.value = <span class=\"hljs-string\">\"xr\"</span>;\n        };\n        <span class=\"hljs-keyword\">const</span> changeProvide2 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            like.dog = <span class=\"hljs-string\">\"ww\"</span>;\n            like.cat = <span class=\"hljs-string\">\"mm\"</span>;\n        };\n\n        <span class=\"hljs-comment\">// const provide1 = provide(\"name\", \"rmq\");</span>\n        <span class=\"hljs-comment\">// const provide2 = provide(\"like\", { dog: \"wangwang\", cat: \"maomao\" });</span>\n\n        <span class=\"hljs-keyword\">const</span> num = ref(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">const</span> numAdd = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            num.value++;\n        };\n        watch(\n            <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> num.value,\n            (newNum, oldNum) =&gt; {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"newNum:\"</span> + newNum);\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"oldNum:\"</span> + oldNum);\n            }\n        );\n        <span class=\"hljs-keyword\">const</span> obj = reactive({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"rmq\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> });\n        <span class=\"hljs-keyword\">const</span> changeAge = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            obj.age++;\n        };\n        watch(\n            <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> obj.age,\n            (newAge, oldAge) =&gt; {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"newAge:\"</span> + newAge);\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"oldAge:\"</span> + oldAge);\n            }\n        );\n\n        <span class=\"hljs-keyword\">const</span> doubleCount = computed(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> num.value * <span class=\"hljs-number\">2</span>);\n\n        <span class=\"hljs-keyword\">const</span> hello = ref(<span class=\"hljs-string\">\"hello\"</span>);\n        onMounted(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            hello.value.style.color = <span class=\"hljs-string\">\"pink\"</span>;\n        });\n\n        <span class=\"hljs-keyword\">return</span> {\n            num,\n            numAdd,\n            changeAge,\n            obj,\n            doubleCount,\n            hello,\n            changeProvide1,\n            changeProvide2,\n        };\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"watch_109\"></a>关于watch监听</h3>\n<ul>\n<li>监听简单的数据</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    <span class=\"hljs-keyword\">const</span> num = ref(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> numAdd = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        num.value++;\n    };\n    watch(\n        <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> num.value,\n        (newNum, oldNum) =&gt; {\n            <span class=\"hljs-built_in\">console</span>.log(newNum);\n            <span class=\"hljs-built_in\">console</span>.log(oldNum);\n        }\n    );\n    <span class=\"hljs-comment\">// 或者</span>\n    <span class=\"hljs-comment\">// watch(num.value, (newNum, oldNum) =&gt; {</span>\n    <span class=\"hljs-comment\">//     console.log(newNum);</span>\n    <span class=\"hljs-comment\">//     console.log(oldNum);</span>\n    <span class=\"hljs-comment\">// });</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201021174126215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>监听复杂一点的</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">        <span class=\"hljs-keyword\">const</span> obj = reactive({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"rmq\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> });\n        <span class=\"hljs-keyword\">const</span> changeAge = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            obj.age++;\n        };\n        watch(\n            <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> obj.age,\n            (newAge, oldAge) =&gt; {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"newAge:\"</span> + newAge);\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"oldAge:\"</span> + oldAge);\n            }\n        );\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201022092924899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>监听多个</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">   <span class=\"hljs-keyword\">const</span> num = ref(<span class=\"hljs-number\">0</span>);\n   <span class=\"hljs-keyword\">const</span> numAdd = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n       num.value++;\n   };\n\n   <span class=\"hljs-keyword\">const</span> obj = reactive({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"rmq\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> });\n   <span class=\"hljs-keyword\">const</span> changeAge = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n       obj.age++;\n   };\n\n   watch([num, () =&gt; obj.age], ([newNum, newAge], [oldNum, oldAge]) =&gt; {\n       <span class=\"hljs-built_in\">console</span>.log(newNum);\n       <span class=\"hljs-built_in\">console</span>.log(oldNum);\n       <span class=\"hljs-built_in\">console</span>.log(newAge);\n       <span class=\"hljs-built_in\">console</span>.log(oldAge);\n   });\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201021175508987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"refDom_171\"></a>ref获取Dom</h3>\n<blockquote>\n<p>vue3.0的获取DOM和之前有点不同</p>\n<ol>\n<li>setup中先声明</li>\n<li>return出去</li>\n<li>DOM中ref去引用</li>\n</ol>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//&lt;p ref=\"hello\"&gt;Edit &lt;code&gt;components/HelloWorld.vue&lt;/code&gt; to test hot module replacement.&lt;/p&gt;</span>\n   <span class=\"hljs-keyword\">const</span> hello = ref(<span class=\"hljs-string\">\"hello\"</span>);\n   onMounted(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n       hello.value.style.color = <span class=\"hljs-string\">\"pink\"</span>;\n   });\n    <span class=\"hljs-keyword\">return</span> {\n     hello,\n 	};\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201021180340211.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"setuppropscontext_188\"></a>setup()的参数props和context</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">   setup(props, context) {\n       <span class=\"hljs-built_in\">console</span>.log(props);\n       <span class=\"hljs-built_in\">console</span>.log(context);\n   }\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201022094719783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_197\"></a>生命周期</h3>\n<table>\n<thead>\n<tr>\n<th>选项 API</th>\n<th>Hook inside inside setup</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate</td>\n<td>Not needed*</td>\n</tr>\n<tr>\n<td>created</td>\n<td>Not needed*</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmount</td>\n<td>onBeforeUnmount</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_213\"></a>提供和注入</h3>\n<ul>\n<li>用<mark>provide</mark>，api声明</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> {\n    onMounted,\n    onUpdated,\n    reactive,\n    ref,\n    watch,\n    computed,\n    provide,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\nsetup(){\n    <span class=\"hljs-keyword\">const</span> provide1 = provide(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"rmq\"</span>);\n    <span class=\"hljs-keyword\">const</span> provide2 = provide(<span class=\"hljs-string\">\"like\"</span>, { <span class=\"hljs-attr\">dog</span>: <span class=\"hljs-string\">\"wangwang\"</span>, <span class=\"hljs-attr\">cat</span>: <span class=\"hljs-string\">\"maomao\"</span> });\n}\n</code></div></pre>\n<ul>\n<li>用<mark>inject</mark>，api使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>piTest<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{{inject1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{{inject2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    setup() {\n        <span class=\"hljs-keyword\">const</span> inject1 = inject(<span class=\"hljs-string\">\"name\"</span>);\n        <span class=\"hljs-keyword\">const</span> inject2 = inject(<span class=\"hljs-string\">\"like\"</span>);\n        <span class=\"hljs-keyword\">return</span> {\n            inject1,\n            inject2,\n        };\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"undefined\">\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201022101248513.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>也可以声明响应式的</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">     <span class=\"hljs-keyword\">const</span> name = ref(<span class=\"hljs-string\">\"rmq\"</span>);\n     <span class=\"hljs-keyword\">const</span> like = reactive({ <span class=\"hljs-attr\">dog</span>: <span class=\"hljs-string\">\"wangwang\"</span>, <span class=\"hljs-attr\">cat</span>: <span class=\"hljs-string\">\"maomao\"</span> });\n     <span class=\"hljs-keyword\">const</span> provide1 = provide(<span class=\"hljs-string\">\"name\"</span>, name);\n     <span class=\"hljs-keyword\">const</span> provide2 = provide(<span class=\"hljs-string\">\"like\"</span>, like);\n     <span class=\"hljs-keyword\">const</span> changeProvide1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n         name.value = <span class=\"hljs-string\">\"xr\"</span>;\n     };\n     <span class=\"hljs-keyword\">const</span> changeProvide2 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n         like.dog = <span class=\"hljs-string\">\"ww\"</span>;\n         like.cat = <span class=\"hljs-string\">\"mm\"</span>;\n     };\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201022103301785.png#pic_center\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20201022103313210.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n', 56, '学习经验', 'vue', '2020-11-19 15:58:04', '2020-11-19 15:58:04', 1, 0);
INSERT INTO `articles` VALUES (40, 'es6数组和对象常用方法', '### 数组\n- forEach() 方法对数组的每个元素执行一次给定的函数。\n\n```js\nvar arr = [1, 2, 3]\narr.forEach((value, index) => {\n  console.log(\'数组值：\' + value);\n  console.log(\'数组索引：\' + index);\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164814223.png)\n- map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。\n\n```js\nvar arr = [1, 2, 3]\nvar arr1 = arr.map((value, index) => {\n  return value * 2\n})\nconsole.log(arr1);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164909606.png)\n- filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。\n\n```js\nvar arr = [1, 2, 3]\nvar arr2 = arr.filter((value, index) => {\n  return value > 1\n})\nconsole.log(arr2);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614164956271.png)\n- every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值\n\n```js\nvar arr = [1, 2, 3]\nvar flag = arr.every((value, index) => {\n  return value < 4\n})\nconsole.log(flag);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165039172.png)\n- some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。\n\n```js\nvar arr = [1, 2, 3, 11]\nvar flag = arr.some((value, index) => {\n  return value > 10\n})\nconsole.log(flag);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165139685.png)\n- includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false\n\n```js\nvar arr = [1, 2, 3, 11]\nvar flag = arr.includes(3, 0) //从0开始，找3\nvar flag1 = arr.includes(3, -1) //从-1 + arr.length 开始,找3\nconsole.log(flag);\nconsole.log(flag1);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165221399.png)\n- reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\n```js\nvar arr = [1, 2, 3]\nvar arr3 = arr.reduce((acc, cur) => {\n  console.log(acc + \'--\' + cur);\n  return acc + cur\n})\nconsole.log(arr3);\nvar arr4 = arr.reduce((acc, cur) => {\n  console.log(acc + \'--\' + cur);\n  return acc + cur\n}, 4)\nconsole.log(arr4);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165314325.png)\n### 对象\n- Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999,\n  num: 2000\n};\nvar arr = Object.keys(obj);\nconsole.log(arr);\narr.forEach(function (value) {\n  console.log(value);\n})\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165420518.png)\n- Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999\n};\nObject.defineProperty(obj, \'price\', {\n  value: 1000,\n  //如果只为false不允许修改这个属性值，默认值也是false\n  writable: false,\n  // enumerable 如果值为false 则不允许遍历，默认的值是false\n  enumerable: false,\n  //configurable如果为false，则不允许删除这个属性，不允许在修改第三个参数里面的特性，默认false\n  configurable: false,\n  // get() {//当访问该属性时，会调用此函数。\n  //   return value\n  // },\n  // set(newVal) {//当属性值被修改时，会调用此函数。\n  //   value = newVal\n  // }\n}) //--> obj.num = 1000\nconsole.log(obj);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614165638602.png)\n- Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n\n```js\nvar obj = {\n  id: 1,\n  pname: \'小米\',\n  price: 1999,\n  num: 2000\n};\nvar obj2 = {\n  id: 2,\n  pname: \'华为\',\n  price: 3999,\n  num: 2000\n};\nvar newObj = Object.assign(obj, obj2);\nconsole.log(newObj);\nconsole.log(newObj === obj);\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061416573938.png)\n- Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 \n\n```js\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\nconsole.log(me.__proto__ === person); //类似原型链\nme.name = \'Matthew\';\nme.isHuman = true;\nme.printIntroduction();\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061416584933.png)\n**了解更多**：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)', '<h3><a id=\"_0\"></a>数组</h3>\n<ul>\n<li>forEach() 方法对数组的每个元素执行一次给定的函数。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数组值：\'</span> + value);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数组索引：\'</span> + index);\n})\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164814223.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr1 = arr.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value * <span class=\"hljs-number\">2</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(arr1);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164909606.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr2 = arr.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">1</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(arr2);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614164956271.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &lt; <span class=\"hljs-number\">4</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(flag);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165039172.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">10</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(flag);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165139685.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]\n<span class=\"hljs-keyword\">var</span> flag = arr.includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//从0开始，找3</span>\n<span class=\"hljs-keyword\">var</span> flag1 = arr.includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-1</span>) <span class=\"hljs-comment\">//从-1 + arr.length 开始,找3</span>\n<span class=\"hljs-built_in\">console</span>.log(flag);\n<span class=\"hljs-built_in\">console</span>.log(flag1);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165221399.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">var</span> arr3 = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(acc + <span class=\"hljs-string\">\'--\'</span> + cur);\n  <span class=\"hljs-keyword\">return</span> acc + cur\n})\n<span class=\"hljs-built_in\">console</span>.log(arr3);\n<span class=\"hljs-keyword\">var</span> arr4 = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(acc + <span class=\"hljs-string\">\'--\'</span> + cur);\n  <span class=\"hljs-keyword\">return</span> acc + cur\n}, <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-built_in\">console</span>.log(arr4);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165314325.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"_77\"></a>对象</h3>\n<ul>\n<li>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-built_in\">Object</span>.keys(obj);\n<span class=\"hljs-built_in\">console</span>.log(arr);\narr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value);\n})\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165420518.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>\n};\n<span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">\'price\'</span>, {\n  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1000</span>,\n  <span class=\"hljs-comment\">//如果只为false不允许修改这个属性值，默认值也是false</span>\n  writable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// enumerable 如果值为false 则不允许遍历，默认的值是false</span>\n  enumerable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">//configurable如果为false，则不允许删除这个属性，不允许在修改第三个参数里面的特性，默认false</span>\n  configurable: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// get() {//当访问该属性时，会调用此函数。</span>\n  <span class=\"hljs-comment\">//   return value</span>\n  <span class=\"hljs-comment\">// },</span>\n  <span class=\"hljs-comment\">// set(newVal) {//当属性值被修改时，会调用此函数。</span>\n  <span class=\"hljs-comment\">//   value = newVal</span>\n  <span class=\"hljs-comment\">// }</span>\n}) <span class=\"hljs-comment\">//--&gt; obj.num = 1000</span>\n<span class=\"hljs-built_in\">console</span>.log(obj);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200614165638602.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'小米\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> obj2 = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">pname</span>: <span class=\"hljs-string\">\'华为\'</span>,\n  <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">3999</span>,\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2000</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = <span class=\"hljs-built_in\">Object</span>.assign(obj, obj2);\n<span class=\"hljs-built_in\">console</span>.log(newObj);\n<span class=\"hljs-built_in\">console</span>.log(newObj === obj);\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061416573938.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">isHuman</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">printIntroduction</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`My name is <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.name}</span>. Am I human? <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.isHuman}</span>`</span>);\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> me = <span class=\"hljs-built_in\">Object</span>.create(person);\n<span class=\"hljs-built_in\">console</span>.log(me.__proto__ === person); <span class=\"hljs-comment\">//类似原型链</span>\nme.name = <span class=\"hljs-string\">\'Matthew\'</span>;\nme.isHuman = <span class=\"hljs-literal\">true</span>;\nme.printIntroduction();\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061416584933.png\" alt=\"在这里插入图片描述\" /><br />\n<strong>了解更多</strong>：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\">MDN</a></p>\n', 40, '基础', 'js,es6', '2020-11-06 14:06:20', '2021-04-12 20:32:33', 0, 1);
INSERT INTO `articles` VALUES (43, 'elementUI级联选择器Cascader，删除tag存在的问题', '### elementUI级联选择器Cascader，删除tag存在的问题\n\n```html\n    <div class=\"address-choose\">\n        <div class=\"card-show\">\n            <el-button\n                class=\"tags\"\n                v-for=\"(item,index) in cityShowList\"\n                :key=\"index\"\n                :disabled=\"!showSave\"\n                @click=\"deleteCity(index)\"\n            >{{item}}</el-button>\n        </div>\n        <el-cascader\n            v-model=\"cityList\"\n            :options=\"options\"\n            :props=\"{ multiple: true }\"\n            collapse-tags\n            clearable\n            @change=\"changeCity\"\n            :disabled=\"!showSave\"\n        ></el-cascader>\n    </div>\n```\n\n点击按钮删除事件时，输入框中的值并没有变化\n\n```js\n     deleteCity(index) {\n         this.cityShowList.splice(index, 1);\n         this.cityList.splice(index, 1);\n     },\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200917170740152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n解决办法\n- 给级联选择器v-if\n- 删除事件中加this.$nextTick()\n\n```html\n      <div class=\"address-choose\">\n          <div class=\"card-show\">\n              <el-button\n                  class=\"tags\"\n                  v-for=\"(item,index) in cityShowList\"\n                  :key=\"index\"\n                  :disabled=\"!showSave\"\n                  @click=\"deleteCity(item,index)\"\n              >{{item}}</el-button>\n          </div>\n          <el-cascader\n              v-model=\"cityList\"\n              :options=\"options\"\n              :props=\"{ multiple: true }\"\n              collapse-tags\n              clearable\n              @change=\"changeCity\"\n              :disabled=\"!showSave\"\n              \n              v-if=\"showCity\"\n          ></el-cascader>\n      </div>\n```\n\n```js\n    deleteCity(item, index) {\n        this.showCity = false;\n        this.cityShowList.splice(index, 1);\n        this.cityList.splice(index, 1);\n        this.$nextTick(() => {\n            this.showCity = true;\n        });\n    },\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200917171329547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n', '<h3><a id=\"elementUICascadertag_0\"></a>elementUI级联选择器Cascader，删除tag存在的问题</h3>\n<pre><div class=\"hljs\"><code class=\"lang-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"address-choose\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-show\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span>\n                <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tags\"</span>\n                <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in cityShowList\"</span>\n                <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n                <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n                @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteCity(index)\"</span>\n            &gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-cascader</span>\n            <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"cityList\"</span>\n            <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"options\"</span>\n            <span class=\"hljs-attr\">:props</span>=<span class=\"hljs-string\">\"{ multiple: true }\"</span>\n            <span class=\"hljs-attr\">collapse-tags</span>\n            <span class=\"hljs-attr\">clearable</span>\n            @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeCity\"</span>\n            <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n        &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-cascader</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<p>点击按钮删除事件时，输入框中的值并没有变化</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">     deleteCity(index) {\n         <span class=\"hljs-keyword\">this</span>.cityShowList.splice(index, <span class=\"hljs-number\">1</span>);\n         <span class=\"hljs-keyword\">this</span>.cityList.splice(index, <span class=\"hljs-number\">1</span>);\n     },\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200917170740152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n解决办法</p>\n<ul>\n<li>给级联选择器v-if</li>\n<li>删除事件中加this.$nextTick()</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"address-choose\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-show\"</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span>\n                  <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tags\"</span>\n                  <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in cityShowList\"</span>\n                  <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n                  <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n                  @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"deleteCity(item,index)\"</span>\n              &gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-cascader</span>\n              <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"cityList\"</span>\n              <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"options\"</span>\n              <span class=\"hljs-attr\">:props</span>=<span class=\"hljs-string\">\"{ multiple: true }\"</span>\n              <span class=\"hljs-attr\">collapse-tags</span>\n              <span class=\"hljs-attr\">clearable</span>\n              @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"changeCity\"</span>\n              <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">\"!showSave\"</span>\n              \n              <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"showCity\"</span>\n          &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-cascader</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    deleteCity(item, index) {\n        <span class=\"hljs-keyword\">this</span>.showCity = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">this</span>.cityShowList.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.cityList.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">this</span>.showCity = <span class=\"hljs-literal\">true</span>;\n        });\n    },\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200917171329547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n', 2, '问题及解决方案', 'elementUI,vue', '2020-11-19 15:53:28', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (44, 'vue的echarts学习（折线图line，柱状图bar）', '@[TOC](这里写目录标题)\n> 末尾有vue的echarts组件\n\n## line折线图\n- echarts自适应页面\n```js\n    let myChart = echarts.init(document.getElementById(`${this.id}`));\n    myChart.clear();\n    myChart.setOption(option, true);\n    window.addEventListener(\"resize\", () => {\n        myChart.resize();\n    });\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200924095908953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200924095926825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- 提示+吸附\n\n```javascript\n   let option = {\n       tooltip: {\n           trigger: \"axis\",\n           axisPointer: {\n               snap: true,\n           },\n       },\n   }\n```\n- 流线型+放大数据点+渐变背景\n\n```javascript\nlet option = {\n    series: [\n         {\n         name: \"浏览次数\",\n         data: [820, 932, 901, 934, 1290, 1330, 1320],\n         type: \"line\",\n         smooth: true,//流线型\n         symbolSize: 10,//放大点\n         areaStyle: {//渐变背景\n             color: new echarts.graphic.LinearGradient(\n                 0,\n                 0,\n                 0,\n                 1,\n                 [\n                     {\n                         offset: 0,\n                         color: \"#66CCCC\",\n                     },\n                     {\n                         offset: 1,\n                         color: \"#fff\",\n                     },\n                 ]\n             ),\n         },\n     },\n    ]\n}\n```\n\n- 折线图组件（需要传id），可以自己传别的数据进行修改自定义\n\n```html\n<template>\n    <div class=\"table-echarts\">\n        <div :id=\"id\" style=\"width:100%;height:100%;\"></div>\n    </div>\n</template>\n\n<script>\nimport echarts from \"echarts\";\nexport default {\n    name: \"table-echarts\",\n    props: {\n        id: {\n            type: String,\n            default: \"echarts\",\n        },\n    },\n    data() {\n        return {};\n    },\n    watch: {},\n    mounted() {\n        this.initEcharts();\n    },\n    methods: {\n        initEcharts() {\n            let xAxisData = [\n                \"2020-9-23\",\n                \"2020-9-24\",\n                \"2020-9-25\",\n                \"2020-9-26\",\n                \"2020-9-27\",\n                \"2020-9-28\",\n                \"2020-9-28\",\n            ];\n            let colors = [\n                \"#66CCCC\",\n                \"#CCFF66\",\n                \"#FF99CC\",\n                \"#FF9999\",\n                \"#FFFF66\",\n                \"#FFCC00\",\n                \"#FF9900\",\n                \"#CC3399\",\n                \"#CCFF99\",\n            ];\n            let option = {\n                color: colors,\n                tooltip: {\n                    trigger: \"axis\",\n                    axisPointer: {\n                        snap: true,\n                    },\n                },\n                legend: {\n                    data: [\"浏览次数\", \"访问次数\", \"表单提交量\"],\n                    itemGap: 20,\n                    left: \"0%\",\n                },\n                xAxis: {\n                    type: \"category\",\n                    boundaryGap: false,\n                    data: xAxisData,\n                },\n                yAxis: {\n                    type: \"value\",\n                },\n                series: [\n                    {\n                        name: \"浏览次数\",\n                        data: [820, 932, 901, 934, 1290, 1330, 1320],\n                        type: \"line\",\n                        smooth: true,\n                        symbolSize: 10,\n                        areaStyle: {\n                            color: new echarts.graphic.LinearGradient(\n                                0,\n                                0,\n                                0,\n                                1,\n                                [\n                                    {\n                                        offset: 0,\n                                        color: \"#66CCCC\",\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: \"#fff\",\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                    {\n                        name: \"访问次数\",\n                        data: [120, 222, 401, 234, 3290, 430, 820],\n                        type: \"line\",\n                        smooth: true,\n                        symbolSize: 10,\n                        areaStyle: {\n                            color: new echarts.graphic.LinearGradient(\n                                0,\n                                0,\n                                0,\n                                1,\n                                [\n                                    {\n                                        offset: 0,\n                                        color: \"#CCFF66\",\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: \"#fff\",\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                    {\n                        name: \"表单提交量\",\n                        data: [1120, 322, 101, 534, 890, 230, 520],\n                        type: \"line\",\n                        smooth: true,\n                        symbolSize: 10,\n                        areaStyle: {\n                            color: new echarts.graphic.LinearGradient(\n                                0,\n                                0,\n                                0,\n                                1,\n                                [\n                                    {\n                                        offset: 0,\n                                        color: \"#FF99CC\",\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: \"#fff\",\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                ],\n            };\n            let myChart = echarts.init(document.getElementById(`${this.id}`));\n            myChart.clear();\n            myChart.setOption(option, true);\n            window.addEventListener(\"resize\", () => {\n                myChart.resize();\n            });\n        },\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.table-echarts {\n    width: 100%;\n    height: 436px;\n}\n</style>\n```\n\n## bar柱状图\n最终样式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201203095608552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 自适应和上面一样\n- 提示和吸附\n> 提示注意我这里是百分比，所以需要处理。简单的可以用`formatter`。\n关于formatter，详细可看[formatter](https://echarts.apache.org/zh/option.html#tooltip.formatter)\n模板变量有 {a}, {b}，{c}，{d}，{e}，分别表示系列名，数据名，数据值等。\n```js\n tooltip: {\n     trigger: \"axis\",\n     axisPointer: {\n         snap: true,\n     },\n     formatter: \"{b}:{c}%\",\n },\n```\n>  复杂的提示需要用回调函数处理。\n\n```js\ntooltip: {\n    trigger: \"axis\",\n    formatter: function (params, ticket, callback) {\n        return `<p>${}</p>${}`;\n    }\n},\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020120310012044.png)\n > y轴的百分数也要处理。\n > 1. y轴需要传不含%的数字或者字符串，[1,2,3..]\n > 2. 对y轴处理\n\n```js\n yAxis: {\n     type: \"value\",\n     axisLabel: {\n         formatter: \"{value} %\",\n     },\n },\n```\n- **组件**\n> 1. 需要传个对象，channelData是个对象，里面有x轴数据`xAxisData`，y轴数据`seriesDatas`\n```html\n<template>\n    <div class=\"echarts-contanier\">\n        <div id=\"channel-echarts\" style=\"width:100%;height:100%;\"></div>\n    </div>\n</template>\n\n<script>\nimport echarts from \"echarts\";\nexport default {\n    props: {\n        channelData: {\n            type: Object,\n            default: {},\n        },\n    },\n    name: \"\",\n    data() {\n        return {};\n    },\n    watch: {\n        channelData: {\n            handler(val) {\n                this.initEcharts();\n            },\n            deep: true,\n        },\n    },\n    mounted() {\n        this.initEcharts();\n    },\n    methods: {\n        initEcharts() {\n            let option = {\n                color: \"#574b90\",\n                title: {\n                    left: \"center\",\n                    text: \"渠道意向率\",\n                },\n                tooltip: {\n                    trigger: \"axis\",\n                    axisPointer: {\n                        snap: true,\n                    },\n                    formatter: \"{b}:{c}%\",\n                },\n                legend: {\n                    data: [\"意向率\"],\n                    bottom: \"0%\",\n                },\n                xAxis: {\n                    type: \"category\",\n                    data: this.channelData.xAxisData,\n                },\n                yAxis: {\n                    type: \"value\",\n                    axisLabel: {\n                        formatter: \"{value} %\",\n                    },\n                },\n                series: [\n                    {\n                        name: \"意向率\",\n                        data: this.channelData.seriesDatas,\n                        type: \"bar\",\n                        areaStyle: {},\n                    },\n                ],\n            };\n            let myChart = echarts.init(\n                document.getElementById(`channel-echarts`)\n            );\n            myChart.clear();\n            myChart.setOption(option, true);\n            window.addEventListener(\"resize\", () => {\n                myChart.resize();\n            });\n        },\n    },\n};\n</script>\n\n<style lang=\'less\' scoped>\n.echarts-contanier {\n    width: 100%;\n    height: 100%;\n}\n</style>\n```\n', '<p><h3>这里写目录标题</h3><ul><ul><li><a href=\"#line_3\">line折线图</a></li><li><a href=\"#bar_227\">bar柱状图</a></li></ul></ul></p>\n<blockquote>\n<p>末尾有vue的echarts组件</p>\n</blockquote>\n<h2><a id=\"line_3\"></a>line折线图</h2>\n<ul>\n<li>echarts自适应页面</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    <span class=\"hljs-keyword\">let</span> myChart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.id}</span>`</span>));\n    myChart.clear();\n    myChart.setOption(option, <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"resize\"</span>, () =&gt; {\n        myChart.resize();\n    });\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200924095908953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200924095926825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>提示+吸附</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">   <span class=\"hljs-keyword\">let</span> option = {\n       <span class=\"hljs-attr\">tooltip</span>: {\n           <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n           <span class=\"hljs-attr\">axisPointer</span>: {\n               <span class=\"hljs-attr\">snap</span>: <span class=\"hljs-literal\">true</span>,\n           },\n       },\n   }\n</code></div></pre>\n<ul>\n<li>流线型+放大数据点+渐变背景</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> option = {\n    <span class=\"hljs-attr\">series</span>: [\n         {\n         <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"浏览次数\"</span>,\n         <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">820</span>, <span class=\"hljs-number\">932</span>, <span class=\"hljs-number\">901</span>, <span class=\"hljs-number\">934</span>, <span class=\"hljs-number\">1290</span>, <span class=\"hljs-number\">1330</span>, <span class=\"hljs-number\">1320</span>],\n         <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"line\"</span>,\n         <span class=\"hljs-attr\">smooth</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//流线型</span>\n         symbolSize: <span class=\"hljs-number\">10</span>,<span class=\"hljs-comment\">//放大点</span>\n         areaStyle: {<span class=\"hljs-comment\">//渐变背景</span>\n             color: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">0</span>,\n                 <span class=\"hljs-number\">1</span>,\n                 [\n                     {\n                         <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n                         <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#66CCCC\"</span>,\n                     },\n                     {\n                         <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>,\n                         <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#fff\"</span>,\n                     },\n                 ]\n             ),\n         },\n     },\n    ]\n}\n</code></div></pre>\n<ul>\n<li>折线图组件（需要传id），可以自己传别的数据进行修改自定义</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table-echarts\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:id</span>=<span class=\"hljs-string\">\"id\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100%;height:100%;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> echarts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"echarts\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"table-echarts\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">id</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">\"echarts\"</span>,\n        },\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {};\n    },\n    <span class=\"hljs-attr\">watch</span>: {},\n    mounted() {\n        <span class=\"hljs-keyword\">this</span>.initEcharts();\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        initEcharts() {\n            <span class=\"hljs-keyword\">let</span> xAxisData = [\n                <span class=\"hljs-string\">\"2020-9-23\"</span>,\n                <span class=\"hljs-string\">\"2020-9-24\"</span>,\n                <span class=\"hljs-string\">\"2020-9-25\"</span>,\n                <span class=\"hljs-string\">\"2020-9-26\"</span>,\n                <span class=\"hljs-string\">\"2020-9-27\"</span>,\n                <span class=\"hljs-string\">\"2020-9-28\"</span>,\n                <span class=\"hljs-string\">\"2020-9-28\"</span>,\n            ];\n            <span class=\"hljs-keyword\">let</span> colors = [\n                <span class=\"hljs-string\">\"#66CCCC\"</span>,\n                <span class=\"hljs-string\">\"#CCFF66\"</span>,\n                <span class=\"hljs-string\">\"#FF99CC\"</span>,\n                <span class=\"hljs-string\">\"#FF9999\"</span>,\n                <span class=\"hljs-string\">\"#FFFF66\"</span>,\n                <span class=\"hljs-string\">\"#FFCC00\"</span>,\n                <span class=\"hljs-string\">\"#FF9900\"</span>,\n                <span class=\"hljs-string\">\"#CC3399\"</span>,\n                <span class=\"hljs-string\">\"#CCFF99\"</span>,\n            ];\n            <span class=\"hljs-keyword\">let</span> option = {\n                <span class=\"hljs-attr\">color</span>: colors,\n                <span class=\"hljs-attr\">tooltip</span>: {\n                    <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n                    <span class=\"hljs-attr\">axisPointer</span>: {\n                        <span class=\"hljs-attr\">snap</span>: <span class=\"hljs-literal\">true</span>,\n                    },\n                },\n                <span class=\"hljs-attr\">legend</span>: {\n                    <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-string\">\"浏览次数\"</span>, <span class=\"hljs-string\">\"访问次数\"</span>, <span class=\"hljs-string\">\"表单提交量\"</span>],\n                    <span class=\"hljs-attr\">itemGap</span>: <span class=\"hljs-number\">20</span>,\n                    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">\"0%\"</span>,\n                },\n                <span class=\"hljs-attr\">xAxis</span>: {\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"category\"</span>,\n                    <span class=\"hljs-attr\">boundaryGap</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-attr\">data</span>: xAxisData,\n                },\n                <span class=\"hljs-attr\">yAxis</span>: {\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"value\"</span>,\n                },\n                <span class=\"hljs-attr\">series</span>: [\n                    {\n                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"浏览次数\"</span>,\n                        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">820</span>, <span class=\"hljs-number\">932</span>, <span class=\"hljs-number\">901</span>, <span class=\"hljs-number\">934</span>, <span class=\"hljs-number\">1290</span>, <span class=\"hljs-number\">1330</span>, <span class=\"hljs-number\">1320</span>],\n                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"line\"</span>,\n                        <span class=\"hljs-attr\">smooth</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-attr\">symbolSize</span>: <span class=\"hljs-number\">10</span>,\n                        <span class=\"hljs-attr\">areaStyle</span>: {\n                            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">1</span>,\n                                [\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#66CCCC\"</span>,\n                                    },\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#fff\"</span>,\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                    {\n                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"访问次数\"</span>,\n                        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">401</span>, <span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">3290</span>, <span class=\"hljs-number\">430</span>, <span class=\"hljs-number\">820</span>],\n                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"line\"</span>,\n                        <span class=\"hljs-attr\">smooth</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-attr\">symbolSize</span>: <span class=\"hljs-number\">10</span>,\n                        <span class=\"hljs-attr\">areaStyle</span>: {\n                            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">1</span>,\n                                [\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#CCFF66\"</span>,\n                                    },\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#fff\"</span>,\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                    {\n                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"表单提交量\"</span>,\n                        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">1120</span>, <span class=\"hljs-number\">322</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">534</span>, <span class=\"hljs-number\">890</span>, <span class=\"hljs-number\">230</span>, <span class=\"hljs-number\">520</span>],\n                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"line\"</span>,\n                        <span class=\"hljs-attr\">smooth</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-attr\">symbolSize</span>: <span class=\"hljs-number\">10</span>,\n                        <span class=\"hljs-attr\">areaStyle</span>: {\n                            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">0</span>,\n                                <span class=\"hljs-number\">1</span>,\n                                [\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#FF99CC\"</span>,\n                                    },\n                                    {\n                                        <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>,\n                                        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#fff\"</span>,\n                                    },\n                                ]\n                            ),\n                        },\n                    },\n                ],\n            };\n            <span class=\"hljs-keyword\">let</span> myChart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.id}</span>`</span>));\n            myChart.clear();\n            myChart.setOption(option, <span class=\"hljs-literal\">true</span>);\n            <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"resize\"</span>, () =&gt; {\n                myChart.resize();\n            });\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.table-echarts</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">436px</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<h2><a id=\"bar_227\"></a>bar柱状图</h2>\n<p>最终样式<br />\n<img src=\"https://img-blog.csdnimg.cn/20201203095608552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>自适应和上面一样</li>\n<li>提示和吸附</li>\n</ul>\n<blockquote>\n<p>提示注意我这里是百分比，所以需要处理。简单的可以用<code>formatter</code>。<br />\n关于formatter，详细可看<a href=\"https://echarts.apache.org/zh/option.html#tooltip.formatter\" target=\"_blank\">formatter</a><br />\n模板变量有 {a}, {b}，{c}，{d}，{e}，分别表示系列名，数据名，数据值等。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"> tooltip: {\n     <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n     <span class=\"hljs-attr\">axisPointer</span>: {\n         <span class=\"hljs-attr\">snap</span>: <span class=\"hljs-literal\">true</span>,\n     },\n     <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"{b}:{c}%\"</span>,\n },\n</code></div></pre>\n<blockquote>\n<p>复杂的提示需要用回调函数处理。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\">tooltip: {\n    <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n    <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">params, ticket, callback</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;p&gt;<span class=\"hljs-subst\">${}</span>&lt;/p&gt;<span class=\"hljs-subst\">${}</span>`</span>;\n    }\n},\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020120310012044.png\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p>y轴的百分数也要处理。</p>\n<ol>\n<li>y轴需要传不含%的数字或者字符串，[1,2,3…]</li>\n<li>对y轴处理</li>\n</ol>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"> yAxis: {\n     <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"value\"</span>,\n     <span class=\"hljs-attr\">axisLabel</span>: {\n         <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"{value} %\"</span>,\n     },\n },\n</code></div></pre>\n<ul>\n<li><strong>组件</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>需要传个对象，channelData是个对象，里面有x轴数据<code>xAxisData</code>，y轴数据<code>seriesDatas</code></li>\n</ol>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"echarts-contanier\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"channel-echarts\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100%;height:100%;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> echarts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"echarts\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">channelData</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Object</span>,\n            <span class=\"hljs-attr\">default</span>: {},\n        },\n    },\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"\"</span>,\n    data() {\n        <span class=\"hljs-keyword\">return</span> {};\n    },\n    <span class=\"hljs-attr\">watch</span>: {\n        <span class=\"hljs-attr\">channelData</span>: {\n            handler(val) {\n                <span class=\"hljs-keyword\">this</span>.initEcharts();\n            },\n            <span class=\"hljs-attr\">deep</span>: <span class=\"hljs-literal\">true</span>,\n        },\n    },\n    mounted() {\n        <span class=\"hljs-keyword\">this</span>.initEcharts();\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        initEcharts() {\n            <span class=\"hljs-keyword\">let</span> option = {\n                <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"#574b90\"</span>,\n                <span class=\"hljs-attr\">title</span>: {\n                    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">\"center\"</span>,\n                    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"渠道意向率\"</span>,\n                },\n                <span class=\"hljs-attr\">tooltip</span>: {\n                    <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\"axis\"</span>,\n                    <span class=\"hljs-attr\">axisPointer</span>: {\n                        <span class=\"hljs-attr\">snap</span>: <span class=\"hljs-literal\">true</span>,\n                    },\n                    <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"{b}:{c}%\"</span>,\n                },\n                <span class=\"hljs-attr\">legend</span>: {\n                    <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-string\">\"意向率\"</span>],\n                    <span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-string\">\"0%\"</span>,\n                },\n                <span class=\"hljs-attr\">xAxis</span>: {\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"category\"</span>,\n                    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">this</span>.channelData.xAxisData,\n                },\n                <span class=\"hljs-attr\">yAxis</span>: {\n                    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"value\"</span>,\n                    <span class=\"hljs-attr\">axisLabel</span>: {\n                        <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"{value} %\"</span>,\n                    },\n                },\n                <span class=\"hljs-attr\">series</span>: [\n                    {\n                        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"意向率\"</span>,\n                        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-keyword\">this</span>.channelData.seriesDatas,\n                        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"bar\"</span>,\n                        <span class=\"hljs-attr\">areaStyle</span>: {},\n                    },\n                ],\n            };\n            <span class=\"hljs-keyword\">let</span> myChart = echarts.init(\n                <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">`channel-echarts`</span>)\n            );\n            myChart.clear();\n            myChart.setOption(option, <span class=\"hljs-literal\">true</span>);\n            <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"resize\"</span>, () =&gt; {\n                myChart.resize();\n            });\n        },\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\'less\'</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.echarts-contanier</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n', 5, '学习经验', 'vue,echarts', '2020-12-04 16:29:57', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (45, 'vue3.0路由route/router的使用', '\n> 注意vue-router版本，我用的是`\"vue-router\": \"^4.0.0-alpha.6\"`\n\n### 官网的使用步骤\n\n```js\n// 1. Define route components.\n// These can be imported from other files\nconst Home = { template: \'<div>Home</div>\' }\nconst About = { template: \'<div>About</div>\' }\n\n// 2. Define some routes\n// Each route should map to a component.\n// We\'ll talk about nested routes later.\nconst routes = [\n  { path: \'/\', component: Home },\n  { path: \'/about\', component: About },\n]\n\n// 3. Create the router instance and pass the `routes` option\n// You can pass in additional options here, but let\'s\n// keep it simple for now.\nconst router = VueRouter.createRouter({\n  // 4. Provide the history implementation to use. We are using the hash history for simplicity here.\n  history: VueRouter.createWebHashHistory(),\n  routes, // short for `routes: routes`\n})\n\n// 5. Create and mount the root instance.\nconst app = Vue.createApp({})\n// Make sure to _use_ the router instance to make the\n// whole app router-aware.\napp.use(router)\n\napp.mount(\'#app\')\n\n// Now the app has started!\n```\n### 自己来配\n- 定义==router.js==\n\n```js\nimport { createRouter, createWebHashHistory } from \"vue-router\";\nimport Home from \"../views/Home.vue\";\nconst routes = [\n	{\n		path: \"/home\",\n		name: \"Home\",\n		component: Home,\n	},\n	{\n		path: \"/test\",\n		name: \"Test\",\n		component: () =>\n			import(/* webpackChunkName: \"about\" */ \"../views/Test.vue\"),\n	},\n];\n\nconst router = createRouter({\n	history: createWebHashHistory(),\n	routes,\n});\n\nexport default router;\n```\n- ==main.js==入口文件引入\n\n```js\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router/index\";\nimport \"./index.css\";\n\nconst app = createApp(App);\napp.use(router);//注意顺序\napp.mount(\"#app\");\n```\n- 使用\n\n```html\n<template>\n    <div>\n        <router-link to=\"/home\">Home</router-link>\n        <router-link to=\'/test\'>Test</router-link>\n    </div>\n    <router-view></router-view>\n</template>\n\n<script>\nimport { onMounted } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nexport default {\n    setup(props, context) {\n        onMounted(() => {\n            console.log(route);\n            console.log(router);\n        });\n\n        const route = useRoute();\n        const router = useRouter();\n\n        return {};\n    },\n};\n</script>\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020102212084249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022120908116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n> 这样就可以像以前那样用路由了\n\n### 有一个小细节\n\n```js\n{\n	path: \"/:home(\\\\d+)\", //正则匹配\n	name: \"Home\",\n	alias: \"/home\", //别名，可以数组[\'/home1\',\'/home2\']\n	component: Home,\n},\n```\n- 别名alias\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022153644259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- 正则\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022153806458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- 别名alias数组\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201022153856819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n> 详细了解可以看文档[vue-router](https://next.router.vuejs.org/)', '<blockquote>\n<p>注意vue-router版本，我用的是<code>&quot;vue-router&quot;: &quot;^4.0.0-alpha.6&quot;</code></p>\n</blockquote>\n<h3><a id=\"_3\"></a>官网的使用步骤</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 1. Define route components.</span>\n<span class=\"hljs-comment\">// These can be imported from other files</span>\n<span class=\"hljs-keyword\">const</span> Home = { <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\'&lt;div&gt;Home&lt;/div&gt;\'</span> }\n<span class=\"hljs-keyword\">const</span> About = { <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\'&lt;div&gt;About&lt;/div&gt;\'</span> }\n\n<span class=\"hljs-comment\">// 2. Define some routes</span>\n<span class=\"hljs-comment\">// Each route should map to a component.</span>\n<span class=\"hljs-comment\">// We\'ll talk about nested routes later.</span>\n<span class=\"hljs-keyword\">const</span> routes = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\'/\'</span>, <span class=\"hljs-attr\">component</span>: Home },\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\'/about\'</span>, <span class=\"hljs-attr\">component</span>: About },\n]\n\n<span class=\"hljs-comment\">// 3. Create the router instance and pass the `routes` option</span>\n<span class=\"hljs-comment\">// You can pass in additional options here, but let\'s</span>\n<span class=\"hljs-comment\">// keep it simple for now.</span>\n<span class=\"hljs-keyword\">const</span> router = VueRouter.createRouter({\n  <span class=\"hljs-comment\">// 4. Provide the history implementation to use. We are using the hash history for simplicity here.</span>\n  history: VueRouter.createWebHashHistory(),\n  routes, <span class=\"hljs-comment\">// short for `routes: routes`</span>\n})\n\n<span class=\"hljs-comment\">// 5. Create and mount the root instance.</span>\n<span class=\"hljs-keyword\">const</span> app = Vue.createApp({})\n<span class=\"hljs-comment\">// Make sure to _use_ the router instance to make the</span>\n<span class=\"hljs-comment\">// whole app router-aware.</span>\napp.use(router)\n\napp.mount(<span class=\"hljs-string\">\'#app\'</span>)\n\n<span class=\"hljs-comment\">// Now the app has started!</span>\n</code></div></pre>\n<h3><a id=\"_38\"></a>自己来配</h3>\n<ul>\n<li>定义<mark>router.js</mark></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> { createRouter, createWebHashHistory } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-router\"</span>;\n<span class=\"hljs-keyword\">import</span> Home <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../views/Home.vue\"</span>;\n<span class=\"hljs-keyword\">const</span> routes = [\n	{\n		<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/home\"</span>,\n		<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Home\"</span>,\n		<span class=\"hljs-attr\">component</span>: Home,\n	},\n	{\n		<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/test\"</span>,\n		<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Test\"</span>,\n		<span class=\"hljs-attr\">component</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span>\n			<span class=\"hljs-keyword\">import</span>(<span class=\"hljs-comment\">/* webpackChunkName: \"about\" */</span> <span class=\"hljs-string\">\"../views/Test.vue\"</span>),\n	},\n];\n\n<span class=\"hljs-keyword\">const</span> router = createRouter({\n	<span class=\"hljs-attr\">history</span>: createWebHashHistory(),\n	routes,\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router;\n</code></div></pre>\n<ul>\n<li><mark>main.js</mark>入口文件引入</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App.vue\"</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./router/index\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./index.css\"</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App);\napp.use(router);<span class=\"hljs-comment\">//注意顺序</span>\napp.mount(<span class=\"hljs-string\">\"#app\"</span>);\n</code></div></pre>\n<ul>\n<li>使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/home\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\'/test\'</span>&gt;</span>Test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { onMounted } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">import</span> { useRoute, useRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-router\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    setup(props, context) {\n        onMounted(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(route);\n            <span class=\"hljs-built_in\">console</span>.log(router);\n        });\n\n        <span class=\"hljs-keyword\">const</span> route = useRoute();\n        <span class=\"hljs-keyword\">const</span> router = useRouter();\n\n        <span class=\"hljs-keyword\">return</span> {};\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020102212084249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20201022120908116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<blockquote>\n<p>这样就可以像以前那样用路由了</p>\n</blockquote>\n<h3><a id=\"_111\"></a>有一个小细节</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">{\n	<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/:home(\\\\d+)\"</span>, <span class=\"hljs-comment\">//正则匹配</span>\n	name: <span class=\"hljs-string\">\"Home\"</span>,\n	<span class=\"hljs-attr\">alias</span>: <span class=\"hljs-string\">\"/home\"</span>, <span class=\"hljs-comment\">//别名，可以数组[\'/home1\',\'/home2\']</span>\n	component: Home,\n},\n</code></div></pre>\n<ul>\n<li>别名alias<br />\n<img src=\"https://img-blog.csdnimg.cn/20201022153644259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></li>\n<li>正则<br />\n<img src=\"https://img-blog.csdnimg.cn/20201022153806458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></li>\n<li>别名alias数组<br />\n<img src=\"https://img-blog.csdnimg.cn/20201022153856819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<blockquote>\n<p>详细了解可以看文档<a href=\"https://next.router.vuejs.org/\" target=\"_blank\">vue-router</a></p>\n</blockquote>\n', 52, '学习经验', 'vue', '2020-12-18 11:36:21', '2020-12-01 17:01:21', 0, 0);
INSERT INTO `articles` VALUES (52, '123', '111', '<p>111</p>\n', 0, '学习经验', ' ', '2020-11-23 14:58:34', '2021-04-12 20:32:33', 0, 1);
INSERT INTO `articles` VALUES (53, 'Vue手写一个抽屉组件', '### 手写一个抽屉组件\n基于vue的过渡动画\n- 样式（点击消息提醒，从右侧弹出抽屉，点击其他关闭）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126160051403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n- ==transition== + ==v-show/v-if==\n```html\n<template>\n    <transition name=\"show\" mode=\"out-in\" @before-enter=\'transitionComplete\' @after-leave=\'transitionComplete\' @enter=\'transitioning\' @leave=\'transitioning\'>\n        <div class=\"message-container\" ref=\"message-container\" @click=\"close\" v-show=\"drawerClose\">\n            <div class=\"message\">\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\nexport default {\n    name: \"messageCenter\",\n    props: {\n        drawerClose: {//父组件的消息提醒icon，控制显示隐藏\n            type: Boolean,\n            default: false,\n        },\n    },\n    data() {\n        return {\n        };\n    },\n\n    methods: {\n        /**\n         * @description 动画结束\n         */\n        transitionComplete() {\n            const body = document.querySelector(\"body\");\n            body.style.overflow = \"visible\";\n        },\n        //动画进行时\n        transitioning() {\n            const body = document.querySelector(\"body\");\n            body.style.overflow = \"hidden\";\n        },\n        close(e) {\n            const parent = this.$refs[\"message-container\"];\n            if (\n                e.target.className != \"message-container\" &&\n                e.target.className != \"el-icon-bell\" &&\n                !parent.contains(e.target)\n            ) {//除了本身及子元素和消息提醒，点击关闭\n                this.$emit(\"closeMessage\", false);\n            }\n        },\n    },\n    mounted() {\n        window.addEventListener(\"click\", this.close);\n    },\n    beforeDestroy() {\n        window.removeEventListener(\"click\", this.close);\n    },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.show-enter-active,\n.show-leave-active {\n    transition: all 0.3s;\n}\n.show-enter,\n.show-leave-to {\n    transform: translateX(500px);\n}\n.message-container {\n    // transition: all 0.3s ease-in-out;\n    position: absolute;\n    bottom: 0;\n    right: 0px;\n    width: 500px;\n    height: calc(100vh - 60px);\n    background: #ffffff;\n    z-index: 99;\n    box-shadow: -5px 11px 22px 0px rgba(0, 0, 0, 0.16);\n}\n</style>\n```\n- 动画\n> v-enter: 弹框显示前的样式，过渡的开始状态, 也就是动画还没开始前，动画的起始位置\n> v-enter-active 动画生效的状态，从底部过渡到页面的过程\n> v-enter-to 动画执行完的结束状态，也就是弹出结束后显示在页面的样式\n> v-leave 隐藏元素，离开动画的开始状态，元素消失开始的样式\n> v-leave-active 隐藏元素过程中，离开动画的生效动态即离开的过程，从上到下滑\n> v-leave-to 隐藏元素完成，离开动画的结束状态(此时v-leave的样式被删除)\n\n- 事件钩子\n\n```html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n \n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n> 我这里用了事件钩子，是因为，在动画过程中会重新计算宽高，所以会有滚动条，即使绝对定位也不行。所以在动画的时候给body加了overflow，结束之后又还原。就不会有滚动条了，前提是内容滚动区不是body，而是el-main之内的区域滚动。否则可能会有问题。\n\n- 内容可以自己自定义，蒙层也可以自己添加。自己动手丰衣足食。\n- 添加蒙层的时候，==要注意层级==。==关闭==的时候要==隐藏蒙层==，不然可能会点不到任何东西。\n#### 实现的需求\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201126163003434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center)\n', '<h3><a id=\"_0\"></a>手写一个抽屉组件</h3>\n<p>基于vue的过渡动画</p>\n<ul>\n<li>样式（点击消息提醒，从右侧弹出抽屉，点击其他关闭）<br />\n<img src=\"https://img-blog.csdnimg.cn/20201126160051403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></li>\n<li><mark>transition</mark> + <mark>v-show/v-if</mark></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"show\"</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">\"out-in\"</span> @<span class=\"hljs-attr\">before-enter</span>=<span class=\"hljs-string\">\'transitionComplete\'</span> @<span class=\"hljs-attr\">after-leave</span>=<span class=\"hljs-string\">\'transitionComplete\'</span> @<span class=\"hljs-attr\">enter</span>=<span class=\"hljs-string\">\'transitioning\'</span> @<span class=\"hljs-attr\">leave</span>=<span class=\"hljs-string\">\'transitioning\'</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message-container\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"message-container\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"close\"</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"drawerClose\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"messageCenter\"</span>,\n    <span class=\"hljs-attr\">props</span>: {\n        <span class=\"hljs-attr\">drawerClose</span>: {<span class=\"hljs-comment\">//父组件的消息提醒icon，控制显示隐藏</span>\n            type: <span class=\"hljs-built_in\">Boolean</span>,\n            <span class=\"hljs-attr\">default</span>: <span class=\"hljs-literal\">false</span>,\n        },\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n        };\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n        <span class=\"hljs-comment\">/**\n         * @description 动画结束\n         */</span>\n        transitionComplete() {\n            <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>);\n            body.style.overflow = <span class=\"hljs-string\">\"visible\"</span>;\n        },\n        <span class=\"hljs-comment\">//动画进行时</span>\n        transitioning() {\n            <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"body\"</span>);\n            body.style.overflow = <span class=\"hljs-string\">\"hidden\"</span>;\n        },\n        close(e) {\n            <span class=\"hljs-keyword\">const</span> parent = <span class=\"hljs-keyword\">this</span>.$refs[<span class=\"hljs-string\">\"message-container\"</span>];\n            <span class=\"hljs-keyword\">if</span> (\n                e.target.className != <span class=\"hljs-string\">\"message-container\"</span> &amp;&amp;\n                e.target.className != <span class=\"hljs-string\">\"el-icon-bell\"</span> &amp;&amp;\n                !parent.contains(e.target)\n            ) {<span class=\"hljs-comment\">//除了本身及子元素和消息提醒，点击关闭</span>\n                <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">\"closeMessage\"</span>, <span class=\"hljs-literal\">false</span>);\n            }\n        },\n    },\n    mounted() {\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n    beforeDestroy() {\n        <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-keyword\">this</span>.close);\n    },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"less\"</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\">\n.show-enter-active,\n.show-leave-active {\n    transition: all 0.3s;\n}\n.show-enter,\n.show-leave-to {\n    transform: translateX(500px);\n}\n.message-container {\n    // transition: all 0.3s ease-in-out;\n    position: absolute;\n    bottom: 0;\n    right: 0px;\n    width: 500px;\n    height: calc(100vh - 60px);\n    background: #ffffff;\n    z-index: 99;\n    box-shadow: -5px 11px 22px 0px rgba(0, 0, 0, 0.16);\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>动画</li>\n</ul>\n<blockquote>\n<p>v-enter: 弹框显示前的样式，过渡的开始状态, 也就是动画还没开始前，动画的起始位置<br />\nv-enter-active 动画生效的状态，从底部过渡到页面的过程<br />\nv-enter-to 动画执行完的结束状态，也就是弹出结束后显示在页面的样式<br />\nv-leave 隐藏元素，离开动画的开始状态，元素消失开始的样式<br />\nv-leave-active 隐藏元素过程中，离开动画的生效动态即离开的过程，从上到下滑<br />\nv-leave-to 隐藏元素完成，离开动画的结束状态(此时v-leave的样式被删除)</p>\n</blockquote>\n<ul>\n<li>事件钩子</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n  <span class=\"hljs-attr\">v-on:before-enter</span>=<span class=\"hljs-string\">\"beforeEnter\"</span>\n  <span class=\"hljs-attr\">v-on:enter</span>=<span class=\"hljs-string\">\"enter\"</span>\n  <span class=\"hljs-attr\">v-on:after-enter</span>=<span class=\"hljs-string\">\"afterEnter\"</span>\n  <span class=\"hljs-attr\">v-on:enter-cancelled</span>=<span class=\"hljs-string\">\"enterCancelled\"</span>\n \n  <span class=\"hljs-attr\">v-on:before-leave</span>=<span class=\"hljs-string\">\"beforeLeave\"</span>\n  <span class=\"hljs-attr\">v-on:leave</span>=<span class=\"hljs-string\">\"leave\"</span>\n  <span class=\"hljs-attr\">v-on:after-leave</span>=<span class=\"hljs-string\">\"afterLeave\"</span>\n  <span class=\"hljs-attr\">v-on:leave-cancelled</span>=<span class=\"hljs-string\">\"leaveCancelled\"</span>\n&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<p>我这里用了事件钩子，是因为，在动画过程中会重新计算宽高，所以会有滚动条，即使绝对定位也不行。所以在动画的时候给body加了overflow，结束之后又还原。就不会有滚动条了，前提是内容滚动区不是body，而是el-main之内的区域滚动。否则可能会有问题。</p>\n</blockquote>\n<ul>\n<li>内容可以自己自定义，蒙层也可以自己添加。自己动手丰衣足食。</li>\n<li>添加蒙层的时候，<mark>要注意层级</mark>。<mark>关闭</mark>的时候要<mark>隐藏蒙层</mark>，不然可能会点不到任何东西。</li>\n</ul>\n<h4><a id=\"_113\"></a>实现的需求</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20201126163003434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n', 1, '组件', 'vue,elementUI,css', '2020-11-26 16:40:21', '2021-04-12 20:32:33', 0, 0);
INSERT INTO `articles` VALUES (54, '探索JS数值', '- 参考文章[网道-数值](https://wangdoc.com/javascript/types/number.html)\n### 整数和浮点数\n- JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，==1==与==1.0==是相同的，是同一个数。\n```js\n1 === 1.0 // true\n```\n- 但是浮点数不是精确的值，运算要注意\n\n```js\n0.1 + 0.2 === 0.3	// false\n0.1 + 0.2	//0.30000000000000004\n0.3 / 0.1	// 2.9999999999999996\n\nparseFloat((0.1+0.2).toFixed(10))===0.3	//true\n```\n### 数值精度\n- 第1位：符号位，0表示正数，1表示负数\n- 第2位到第12位（共11位）：指数部分\n- 第13位到第64位（共52位）：小数部分（即有效数字）\n\n**精度最多只能到53个二进制位**\n\n```js\nMath.pow(2, 53)\n// 9007199254740992\n\nMath.pow(2, 53) + 1\n// 9007199254740992\n\nMath.pow(2, 53) + 2\n// 9007199254740994\n\nMath.pow(2, 53) + 3\n// 9007199254740996\n\nMath.pow(2, 53) + 4\n// 9007199254740996\n```\n\n### 数值范围\n> JavaScript 能够表示的数值范围为21024到2-1023（开区间），超出这个范围的数无法表示。\n- 如果一个数大于等于2的1024次方，那么就会发生“**正向溢出**”，即 JavaScript 无法表示这么大的数，这时就会返回==Infinity==。\n\n```js\nMath.pow(2, 1024) // Infinity\n```\n- 如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“**负向溢出**”，即 JavaScript 无法表示这么小的数，这时会直接返回==0==。\n```js\nMath.pow(2, -1075) // 0\n```\n\n\n### 数值的进制\n> 使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。\n\n- 十进制：没有前导0的数值。\n- 八进制：有前缀0o或0O的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。\n- 十六进制：有前缀0x或0X的数值。\n- 二进制：有前缀0b或0B的数值。\n\n```js\n0xff // 255\n0o377 // 255\n0b11 // 3\n```\n#### 正零和负零\n> JavaScript 内部实际上存在2个0：一个是 ==+0== ，一个是 ==-0== ，区别就是64位浮点数表示法的符号位不同。它们是等价的。\n\n```js\n-0 === +0 // true\n0 === -0 // true\n0 === +0 // true\n```\n唯一有区别的场合是，==+0== 或 ==-0== 当作分母，返回的值是不相等的。\n\n```js\n(1 / +0) === (1 / -0) // false\n```\n上面的代码之所以出现这样结果，是因为除以正零得到 ==+Infinity== ，除以负零得到 ==-Infinity== ，这两者是不相等的\n\n\n### 原始类型转化\n原始值	|转化为数值类型 | 转化为字符串类型	| 转化为Boolean类型\n----- | -----| -----| -----\nfalse	|	0	|	\"false\"	|	false\ntrue	|	1	|	\"true\"	|	true\n0	|	0	|	\"0\"	|	false\n1	|	1	|	\"1\"	|	true\n\"0\"	|	0	|	\"0\"	|	true\n\"1\"	|	1	|	\"1\"	|	true\nNaN	|	NaN	|	\"NaN\"	|	false\nInfinity	|	Infinity	|	\"Infinity\"	|	true\n-Infinity	|	-Infinity	|	\"-Infinity\"	|	true\n\"\"	|	0	|	\"\"	|	false\n\"20\"	|	20	|	\"20\"	|	true\n\"twenty\"	|	NaN	|	\"twenty\"	|	true\n[ ]	|	0	|	\"\"	|	true\n[20]	|	20	|	\"20\"	|	true\n[10,20]	|	NaN	|	\"10,20\"	|	true\n[\"twenty\"]	|	NaN	|	\"twenty\"	|	true\n[\"ten\",\"twenty\"]	|	NaN	|	\"ten,twenty\"	|	true\nfunction(){}	|	NaN	|	\"function(){}\"	|	true\n{ }	|	NaN	|	\"[object Object]\"	|	true\nnull	|	0	|	\"null\"	|	false\nundefined	|	NaN	|	\"undefined\"	|	false', '<ul>\n<li>参考文章<a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\">网道-数值</a></li>\n</ul>\n<h3><a id=\"_1\"></a>整数和浮点数</h3>\n<ul>\n<li>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<mark>1</mark>与<mark>1.0</mark>是相同的，是同一个数。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-number\">1</span> === <span class=\"hljs-number\">1.0</span> <span class=\"hljs-comment\">// true</span>\n</code></div></pre>\n<ul>\n<li>但是浮点数不是精确的值，运算要注意</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span> === <span class=\"hljs-number\">0.3</span>	<span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span>	<span class=\"hljs-comment\">//0.30000000000000004</span>\n<span class=\"hljs-number\">0.3</span> / <span class=\"hljs-number\">0.1</span>	<span class=\"hljs-comment\">// 2.9999999999999996</span>\n\n<span class=\"hljs-built_in\">parseFloat</span>((<span class=\"hljs-number\">0.1</span>+<span class=\"hljs-number\">0.2</span>).toFixed(<span class=\"hljs-number\">10</span>))===<span class=\"hljs-number\">0.3</span>	<span class=\"hljs-comment\">//true</span>\n</code></div></pre>\n<h3><a id=\"_15\"></a>数值精度</h3>\n<ul>\n<li>第1位：符号位，0表示正数，1表示负数</li>\n<li>第2位到第12位（共11位）：指数部分</li>\n<li>第13位到第64位（共52位）：小数部分（即有效数字）</li>\n</ul>\n<p><strong>精度最多只能到53个二进制位</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>)\n<span class=\"hljs-comment\">// 9007199254740992</span>\n\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">// 9007199254740992</span>\n\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) + <span class=\"hljs-number\">2</span>\n<span class=\"hljs-comment\">// 9007199254740994</span>\n\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) + <span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\">// 9007199254740996</span>\n\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\">// 9007199254740996</span>\n</code></div></pre>\n<h3><a id=\"_39\"></a>数值范围</h3>\n<blockquote>\n<p>JavaScript 能够表示的数值范围为21024到2-1023（开区间），超出这个范围的数无法表示。</p>\n</blockquote>\n<ul>\n<li>如果一个数大于等于2的1024次方，那么就会发生“<strong>正向溢出</strong>”，即 JavaScript 无法表示这么大的数，这时就会返回<mark>Infinity</mark>。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1024</span>) <span class=\"hljs-comment\">// Infinity</span>\n</code></div></pre>\n<ul>\n<li>如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“<strong>负向溢出</strong>”，即 JavaScript 无法表示这么小的数，这时会直接返回<mark>0</mark>。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-1075</span>) <span class=\"hljs-comment\">// 0</span>\n</code></div></pre>\n<h3><a id=\"_52\"></a>数值的进制</h3>\n<blockquote>\n<p>使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</p>\n</blockquote>\n<ul>\n<li>十进制：没有前导0的数值。</li>\n<li>八进制：有前缀0o或0O的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。</li>\n<li>十六进制：有前缀0x或0X的数值。</li>\n<li>二进制：有前缀0b或0B的数值。</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-number\">0xff</span> <span class=\"hljs-comment\">// 255</span>\n<span class=\"hljs-number\">0o377</span> <span class=\"hljs-comment\">// 255</span>\n<span class=\"hljs-number\">0b11</span> <span class=\"hljs-comment\">// 3</span>\n</code></div></pre>\n<h4><a id=\"_65\"></a>正零和负零</h4>\n<blockquote>\n<p>JavaScript 内部实际上存在2个0：一个是 <mark>+0</mark> ，一个是 <mark>-0</mark> ，区别就是64位浮点数表示法的符号位不同。它们是等价的。</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-number\">-0</span> === +<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">0</span> === <span class=\"hljs-number\">-0</span> <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">0</span> === +<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// true</span>\n</code></div></pre>\n<p>唯一有区别的场合是，<mark>+0</mark> 或 <mark>-0</mark> 当作分母，返回的值是不相等的。</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">(<span class=\"hljs-number\">1</span> / +<span class=\"hljs-number\">0</span>) === (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">-0</span>) <span class=\"hljs-comment\">// false</span>\n</code></div></pre>\n<p>上面的代码之所以出现这样结果，是因为除以正零得到 <mark>+Infinity</mark> ，除以负零得到 <mark>-Infinity</mark> ，这两者是不相等的</p>\n<h3><a id=\"_81\"></a>原始类型转化</h3>\n<table>\n<thead>\n<tr>\n<th>原始值</th>\n<th>转化为数值类型</th>\n<th>转化为字符串类型</th>\n<th>转化为Boolean类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>false</td>\n<td>0</td>\n<td>“false”</td>\n<td>false</td>\n</tr>\n<tr>\n<td>true</td>\n<td>1</td>\n<td>“true”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>“0”</td>\n<td>false</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>“1”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>“0”</td>\n<td>0</td>\n<td>“0”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>“1”</td>\n<td>1</td>\n<td>“1”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>NaN</td>\n<td>“NaN”</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Infinity</td>\n<td>Infinity</td>\n<td>“Infinity”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>-Infinity</td>\n<td>-Infinity</td>\n<td>“-Infinity”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>“”</td>\n<td>0</td>\n<td>“”</td>\n<td>false</td>\n</tr>\n<tr>\n<td>“20”</td>\n<td>20</td>\n<td>“20”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>“twenty”</td>\n<td>NaN</td>\n<td>“twenty”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>0</td>\n<td>“”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[20]</td>\n<td>20</td>\n<td>“20”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[10,20]</td>\n<td>NaN</td>\n<td>“10,20”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[“twenty”]</td>\n<td>NaN</td>\n<td>“twenty”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[“ten”,“twenty”]</td>\n<td>NaN</td>\n<td>“ten,twenty”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>function(){}</td>\n<td>NaN</td>\n<td>“function(){}”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>{ }</td>\n<td>NaN</td>\n<td>“[object Object]”</td>\n<td>true</td>\n</tr>\n<tr>\n<td>null</td>\n<td>0</td>\n<td>“null”</td>\n<td>false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>NaN</td>\n<td>“undefined”</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n', 2, '基础', 'js', '2021-04-01 20:30:21', '2021-04-10 17:01:17', 0, 0);
INSERT INTO `articles` VALUES (55, '1', '12', '<p>12</p>\n', 0, '学习经验', 'echarts', '2021-05-02 16:22:31', '2021-05-10 11:49:24', 0, 1);
INSERT INTO `articles` VALUES (56, '测试', '1', '<p>1</p>\n', 0, '测试一', '测试2,测试3', '2021-05-16 15:49:50', '2021-05-16 15:49:50', 0, 1);

-- ----------------------------
-- Table structure for commentreply
-- ----------------------------
DROP TABLE IF EXISTS `commentreply`;
CREATE TABLE `commentreply`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '回复编号',
  `i_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者昵称',
  `i_email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者邮箱',
  `r_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '回复者昵称',
  `r_email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '回复者邮箱',
  `c_reply` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '回复内容',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `comment_id` int(0) NOT NULL COMMENT '父级评论ID',
  `article_id` int(0) NOT NULL COMMENT '回复文章ID',
  `is_check` tinyint(0) UNSIGNED NOT NULL DEFAULT 0 COMMENT '审核状态',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `cr_key`(`comment_id`) USING BTREE,
  CONSTRAINT `cr_key` FOREIGN KEY (`comment_id`) REFERENCES `comments` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of commentreply
-- ----------------------------
INSERT INTO `commentreply` VALUES (1, '4321', '4321@qq.com', '哈', '13@qq.com', '123', '2021-04-01 19:45:59', 33, 45, 0, 1);
INSERT INTO `commentreply` VALUES (2, '小阮', '251706076@qq.com', '老王', '123456789@qq.com', '好的，谢谢喜欢', '2021-04-12 20:53:37', 36, 37, 1, 0);
INSERT INTO `commentreply` VALUES (3, '小阮', '2501706076@qq.com', '小阮', 'ruanmaoqi@qq.com', '学学学', '2021-05-12 11:30:39', 39, 39, 1, 0);
INSERT INTO `commentreply` VALUES (4, '小阮', 'ruanmaoqi@qq.com', '老王', '123456789@qq.com', '哈哈', '2021-05-16 15:12:30', 35, 37, 1, 0);

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '评论编号',
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '大佬' COMMENT '评论者昵称',
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者邮箱',
  `comment` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `article_id` int(0) NOT NULL COMMENT '评论文章ID',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `is_check` tinyint(1) NOT NULL DEFAULT 0 COMMENT '审核状态',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `ac_key`(`article_id`) USING BTREE,
  CONSTRAINT `ac_key` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 52 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES (33, '哈', '13@qq.com', '123', 45, '2021-04-01 19:45:18', 1, 1);
INSERT INTO `comments` VALUES (34, '4321', '4321@qq.com', '123', 45, '2021-04-01 19:48:58', 0, 1);
INSERT INTO `comments` VALUES (35, '老王', '123456789@qq.com', '有收获', 37, '2021-04-12 20:49:50', 1, 0);
INSERT INTO `comments` VALUES (36, '老王', '123456789@qq.com', '希望能多写写博客', 37, '2021-04-12 20:51:34', 1, 0);
INSERT INTO `comments` VALUES (37, '小阮', 'ruanmaoqi@qq.com', '欢迎评论', 37, '2021-05-02 16:29:38', 0, 1);
INSERT INTO `comments` VALUES (38, '小阮', 'ruanmaoqi@qq.com', '欢迎评论', 37, '2021-05-02 16:30:16', 1, 0);
INSERT INTO `comments` VALUES (39, '小阮', 'ruanmaoqi@qq.com', 'Vue3来咯，大家学起来', 39, '2021-05-12 11:29:15', 1, 0);
INSERT INTO `comments` VALUES (43, '小阮', 'ruanmaoqi@qq.com', '哈喽', 37, '2021-05-16 15:12:04', 1, 1);
INSERT INTO `comments` VALUES (44, '小阮', 'ruanmaoqi@qq.com', '哈哈', 37, '2021-05-16 15:12:14', 1, 1);
INSERT INTO `comments` VALUES (45, '小阮', 'ruanmaoqi@qq.com', '哈', 37, '2021-05-16 15:12:35', 1, 1);
INSERT INTO `comments` VALUES (46, '小阮', 'ruanmaoqi@qq.com', '哈', 37, '2021-05-16 15:12:37', 1, 1);
INSERT INTO `comments` VALUES (47, '小阮', 'ruanmaoqi@qq.com', '哈哈哈', 37, '2021-05-16 15:12:40', 1, 1);
INSERT INTO `comments` VALUES (48, '小阮', 'ruanmaoqi@qq.com', '哈哈哈', 37, '2021-05-16 15:12:43', 1, 1);
INSERT INTO `comments` VALUES (49, '小阮', 'ruanmaoqi@qq.com', '芜湖', 37, '2021-05-16 15:13:35', 1, 0);
INSERT INTO `comments` VALUES (50, '小阮', 'ruanmaoqi@qq.com', '666', 37, '2021-05-16 15:13:40', 1, 1);
INSERT INTO `comments` VALUES (51, '小阮', 'ruanmaoqi@qq.com', '加油干', 37, '2021-05-16 15:13:50', 1, 0);
INSERT INTO `comments` VALUES (52, '小阮', 'ruanmaoqi@qq.com', '数值需要好好学习一下', 54, '2021-05-19 09:29:12', 1, 0);
INSERT INTO `comments` VALUES (53, '小阮', 'ruanmaoqi@qq.com', '好好好', 37, '2021-05-19 11:43:29', 1, 0);

-- ----------------------------
-- Table structure for datas
-- ----------------------------
DROP TABLE IF EXISTS `datas`;
CREATE TABLE `datas`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `count` int(0) NOT NULL COMMENT '浏览记录',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 133 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of datas
-- ----------------------------
INSERT INTO `datas` VALUES (1, 1, '2020-11-23 11:48:47');
INSERT INTO `datas` VALUES (2, 1, '2020-11-23 11:51:43');
INSERT INTO `datas` VALUES (3, 1, '2020-11-23 11:51:48');
INSERT INTO `datas` VALUES (4, 1, '2020-11-23 11:52:06');
INSERT INTO `datas` VALUES (5, 1, '2020-11-23 11:52:37');
INSERT INTO `datas` VALUES (6, 1, '2020-11-23 15:35:04');
INSERT INTO `datas` VALUES (7, 1, '2020-11-23 16:09:22');
INSERT INTO `datas` VALUES (8, 1, '2020-11-23 16:10:03');
INSERT INTO `datas` VALUES (9, 1, '2020-11-23 16:11:26');
INSERT INTO `datas` VALUES (10, 1, '2020-11-23 16:14:56');
INSERT INTO `datas` VALUES (11, 1, '2020-11-26 16:40:37');
INSERT INTO `datas` VALUES (12, 1, '2020-11-30 14:47:54');
INSERT INTO `datas` VALUES (13, 1, '2020-11-30 14:50:16');
INSERT INTO `datas` VALUES (14, 1, '2020-12-04 16:28:41');
INSERT INTO `datas` VALUES (15, 1, '2020-12-04 16:31:13');
INSERT INTO `datas` VALUES (16, 1, '2020-12-05 09:11:05');
INSERT INTO `datas` VALUES (17, 1, '2020-12-05 11:03:47');
INSERT INTO `datas` VALUES (18, 1, '2020-12-05 22:22:05');
INSERT INTO `datas` VALUES (19, 1, '2020-12-05 22:30:41');
INSERT INTO `datas` VALUES (20, 1, '2020-12-07 16:19:26');
INSERT INTO `datas` VALUES (21, 1, '2020-12-07 16:45:17');
INSERT INTO `datas` VALUES (22, 1, '2020-12-07 16:45:30');
INSERT INTO `datas` VALUES (23, 1, '2020-12-08 16:05:13');
INSERT INTO `datas` VALUES (24, 1, '2020-12-16 10:44:21');
INSERT INTO `datas` VALUES (25, 1, '2020-12-16 10:45:06');
INSERT INTO `datas` VALUES (26, 1, '2020-12-16 10:48:22');
INSERT INTO `datas` VALUES (27, 1, '2020-12-18 10:28:34');
INSERT INTO `datas` VALUES (28, 1, '2020-12-18 10:28:44');
INSERT INTO `datas` VALUES (29, 1, '2020-12-18 10:58:34');
INSERT INTO `datas` VALUES (30, 1, '2020-12-18 11:23:51');
INSERT INTO `datas` VALUES (31, 1, '2020-12-18 11:36:28');
INSERT INTO `datas` VALUES (32, 1, '2020-12-18 11:37:19');
INSERT INTO `datas` VALUES (33, 1, '2020-12-18 15:48:45');
INSERT INTO `datas` VALUES (34, 1, '2020-12-24 10:59:27');
INSERT INTO `datas` VALUES (35, 1, '2020-12-26 21:56:24');
INSERT INTO `datas` VALUES (36, 1, '2020-12-27 12:18:32');
INSERT INTO `datas` VALUES (37, 1, '2021-02-27 21:16:37');
INSERT INTO `datas` VALUES (38, 1, '2021-02-27 21:17:00');
INSERT INTO `datas` VALUES (39, 1, '2021-02-28 11:34:58');
INSERT INTO `datas` VALUES (40, 1, '2021-02-28 11:39:15');
INSERT INTO `datas` VALUES (41, 1, '2021-02-28 16:01:40');
INSERT INTO `datas` VALUES (42, 1, '2021-02-28 16:02:44');
INSERT INTO `datas` VALUES (43, 1, '2021-02-28 16:20:59');
INSERT INTO `datas` VALUES (44, 1, '2021-02-28 16:33:16');
INSERT INTO `datas` VALUES (45, 1, '2021-02-28 16:33:25');
INSERT INTO `datas` VALUES (46, 1, '2021-02-28 16:54:33');
INSERT INTO `datas` VALUES (47, 1, '2021-02-28 16:57:32');
INSERT INTO `datas` VALUES (48, 1, '2021-02-28 16:58:46');
INSERT INTO `datas` VALUES (49, 1, '2021-02-28 16:59:54');
INSERT INTO `datas` VALUES (50, 1, '2021-02-28 17:00:41');
INSERT INTO `datas` VALUES (51, 1, '2021-02-28 17:04:14');
INSERT INTO `datas` VALUES (52, 1, '2021-02-28 17:06:50');
INSERT INTO `datas` VALUES (53, 1, '2021-02-28 17:22:11');
INSERT INTO `datas` VALUES (54, 1, '2021-02-28 17:23:03');
INSERT INTO `datas` VALUES (55, 1, '2021-02-28 17:48:43');
INSERT INTO `datas` VALUES (56, 1, '2021-02-28 17:49:52');
INSERT INTO `datas` VALUES (57, 1, '2021-02-28 17:53:48');
INSERT INTO `datas` VALUES (58, 1, '2021-03-07 16:06:31');
INSERT INTO `datas` VALUES (59, 1, '2021-03-14 10:30:35');
INSERT INTO `datas` VALUES (60, 1, '2021-03-14 10:57:30');
INSERT INTO `datas` VALUES (61, 1, '2021-03-14 10:58:25');
INSERT INTO `datas` VALUES (62, 1, '2021-03-14 11:00:03');
INSERT INTO `datas` VALUES (63, 1, '2021-03-14 11:01:45');
INSERT INTO `datas` VALUES (64, 1, '2021-03-14 11:05:04');
INSERT INTO `datas` VALUES (65, 1, '2021-03-14 11:19:33');
INSERT INTO `datas` VALUES (66, 1, '2021-03-14 11:22:36');
INSERT INTO `datas` VALUES (67, 1, '2021-03-14 11:23:38');
INSERT INTO `datas` VALUES (68, 1, '2021-03-14 15:45:00');
INSERT INTO `datas` VALUES (69, 1, '2021-03-14 17:16:01');
INSERT INTO `datas` VALUES (70, 1, '2021-03-14 17:17:10');
INSERT INTO `datas` VALUES (71, 1, '2021-03-14 19:05:41');
INSERT INTO `datas` VALUES (72, 1, '2021-03-14 19:07:34');
INSERT INTO `datas` VALUES (73, 1, '2021-04-01 19:28:40');
INSERT INTO `datas` VALUES (74, 1, '2021-04-01 19:46:28');
INSERT INTO `datas` VALUES (75, 1, '2021-04-01 19:46:47');
INSERT INTO `datas` VALUES (76, 1, '2021-04-01 19:56:23');
INSERT INTO `datas` VALUES (77, 1, '2021-04-01 19:56:36');
INSERT INTO `datas` VALUES (78, 1, '2021-04-01 20:49:45');
INSERT INTO `datas` VALUES (79, 1, '2021-04-06 20:10:33');
INSERT INTO `datas` VALUES (80, 1, '2021-04-06 21:00:34');
INSERT INTO `datas` VALUES (81, 1, '2021-04-10 12:29:43');
INSERT INTO `datas` VALUES (82, 1, '2021-04-10 12:31:11');
INSERT INTO `datas` VALUES (83, 1, '2021-04-12 20:24:31');
INSERT INTO `datas` VALUES (84, 1, '2021-04-12 20:25:19');
INSERT INTO `datas` VALUES (85, 1, '2021-04-12 20:41:29');
INSERT INTO `datas` VALUES (86, 1, '2021-04-12 20:45:41');
INSERT INTO `datas` VALUES (87, 1, '2021-04-12 20:52:01');
INSERT INTO `datas` VALUES (88, 1, '2021-04-12 20:53:58');
INSERT INTO `datas` VALUES (89, 1, '2021-04-12 21:15:59');
INSERT INTO `datas` VALUES (90, 1, '2021-04-13 10:07:30');
INSERT INTO `datas` VALUES (91, 1, '2021-04-13 10:10:46');
INSERT INTO `datas` VALUES (92, 1, '2021-04-13 15:41:42');
INSERT INTO `datas` VALUES (93, 1, '2021-04-13 15:45:38');
INSERT INTO `datas` VALUES (94, 1, '2021-04-14 10:07:46');
INSERT INTO `datas` VALUES (95, 1, '2021-05-02 16:28:50');
INSERT INTO `datas` VALUES (96, 1, '2021-05-10 11:55:44');
INSERT INTO `datas` VALUES (97, 1, '2021-05-10 11:55:57');
INSERT INTO `datas` VALUES (98, 1, '2021-05-10 11:56:11');
INSERT INTO `datas` VALUES (99, 1, '2021-05-10 11:59:47');
INSERT INTO `datas` VALUES (100, 1, '2021-05-10 12:00:47');
INSERT INTO `datas` VALUES (101, 1, '2021-05-10 12:02:32');
INSERT INTO `datas` VALUES (102, 1, '2021-05-12 11:24:14');
INSERT INTO `datas` VALUES (103, 1, '2021-05-12 11:26:16');
INSERT INTO `datas` VALUES (104, 1, '2021-05-12 11:27:41');
INSERT INTO `datas` VALUES (105, 1, '2021-05-12 11:29:58');
INSERT INTO `datas` VALUES (106, 1, '2021-05-12 11:31:05');
INSERT INTO `datas` VALUES (107, 1, '2021-05-13 10:29:33');
INSERT INTO `datas` VALUES (108, 1, '2021-05-13 11:13:38');
INSERT INTO `datas` VALUES (109, 1, '2021-05-14 16:52:46');
INSERT INTO `datas` VALUES (110, 1, '2021-05-14 16:54:35');
INSERT INTO `datas` VALUES (111, 1, '2021-05-14 16:56:02');
INSERT INTO `datas` VALUES (112, 1, '2021-05-14 16:57:51');
INSERT INTO `datas` VALUES (113, 1, '2021-05-14 16:58:17');
INSERT INTO `datas` VALUES (114, 1, '2021-05-14 16:59:24');
INSERT INTO `datas` VALUES (115, 1, '2021-05-14 17:00:32');
INSERT INTO `datas` VALUES (116, 1, '2021-05-14 17:00:50');
INSERT INTO `datas` VALUES (117, 1, '2021-05-14 17:12:32');
INSERT INTO `datas` VALUES (118, 1, '2021-05-14 17:30:56');
INSERT INTO `datas` VALUES (119, 1, '2021-05-14 17:33:43');
INSERT INTO `datas` VALUES (120, 1, '2021-05-15 15:08:29');
INSERT INTO `datas` VALUES (121, 1, '2021-05-16 11:23:14');
INSERT INTO `datas` VALUES (122, 1, '2021-05-16 11:27:56');
INSERT INTO `datas` VALUES (123, 1, '2021-05-16 15:10:48');
INSERT INTO `datas` VALUES (124, 1, '2021-05-16 15:13:03');
INSERT INTO `datas` VALUES (125, 1, '2021-05-16 15:14:00');
INSERT INTO `datas` VALUES (126, 1, '2021-05-16 15:17:26');
INSERT INTO `datas` VALUES (127, 1, '2021-05-16 15:17:40');
INSERT INTO `datas` VALUES (128, 1, '2021-05-16 15:50:28');
INSERT INTO `datas` VALUES (129, 1, '2021-05-16 15:51:15');
INSERT INTO `datas` VALUES (130, 1, '2021-05-17 21:02:22');
INSERT INTO `datas` VALUES (131, 1, '2021-05-18 11:24:24');
INSERT INTO `datas` VALUES (132, 1, '2021-05-19 08:29:15');
INSERT INTO `datas` VALUES (133, 1, '2021-05-19 09:19:24');
INSERT INTO `datas` VALUES (134, 1, '2021-05-19 09:35:17');
INSERT INTO `datas` VALUES (135, 1, '2021-05-19 09:36:34');
INSERT INTO `datas` VALUES (136, 1, '2021-05-19 11:43:54');
INSERT INTO `datas` VALUES (137, 1, '2021-05-19 11:44:24');
INSERT INTO `datas` VALUES (138, 1, '2021-05-19 11:45:52');

-- ----------------------------
-- Table structure for informations
-- ----------------------------
DROP TABLE IF EXISTS `informations`;
CREATE TABLE `informations`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '信息编号',
  `avatar` varchar(62) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `profile` varchar(120) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '个人简介',
  `qq` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'QQ号',
  `wechat` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '微信号',
  `github` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'GitHub账号',
  `csdn` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'CSDN账号',
  `description` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '个人语录',
  `qqQrCode` varchar(62) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'QQ二维码',
  `wechatQrCode` varchar(62) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '微信二维码',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of informations
-- ----------------------------
INSERT INTO `informations` VALUES (8, 'http://localhost:3002/uploads/b4b38e8a4aae522f5edb8d93056aed41', '保不住头发的前端小白', '2501706076', 'xr767rx', 'rmq767', '', '改天是哪天，下次是哪次，以后是多久，去经历，去后悔。保持热爱，奔赴山海。', 'http://localhost:3002/uploads/b097f229b817fba1d9f4bf2fabf2557a', 'http://localhost:3002/uploads/dec19c6854b30ffb496790913734c49a');

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '学习链接编号',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `link` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接地址',
  `description` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '描述',
  `image` varchar(62) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片',
  `type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of links
-- ----------------------------
INSERT INTO `links` VALUES (5, 'JavaScript', 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript', 'JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。', 'http://localhost:3002/uploads/38507588a1dca96afa3abf8b8596af2a', '初级', '2021-04-06 20:44:11', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (6, 'HTML', 'https://www.w3school.com.cn/html/index.asp', 'HTML 指的是超文本标记语言 (Hyper Text Markup Language)，HTML 不是一种编程语言，而是一种标记语言，HTML 使用标记标签来描述网页', 'http://localhost:3002/uploads/ed6ce85b084795dc41f21e8c2560a6ba', '初级', '2021-04-06 20:44:02', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (7, 'CSS', 'https://www.w3school.com.cn/css/index.asp', 'CSS 指层叠样式表 (Cascading Style Sheets)，样式定义如何显示 HTML 元素，', 'http://localhost:3002/uploads/d5ef048702e0218eaa35d3be961f62a1', '初级', '2021-04-06 20:43:53', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (8, 'jQuery', 'https://www.jquery123.com/', 'jQuery 是一个高效、精简并且功能丰富的 JavaScript 工具库。', 'http://localhost:3002/uploads/bdd44f49f9e462823895c4336ae2d102', '初级', '2021-04-06 20:43:43', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (9, 'ES6', 'https://www.runoob.com/w3cnote/es6-tutorial.html', 'ES6，全称ECMAScript 6.0，是 JavaScript 的下一个版本标准，2015.06发版。', 'http://localhost:3002/uploads/014805e5f2e1f0e49b157a9e3ecf10cf', '中级', '2021-04-06 20:43:33', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (10, 'Bootstrap', 'https://www.bootcss.com/', '简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。', 'http://localhost:3002/uploads/5b6ae630a89f713008efba90ff291e76', '中级', '2021-04-06 20:43:21', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (11, 'Vue', 'https://cn.vuejs.org/', '渐进式JavaScript框架', 'http://localhost:3002/uploads/639448466f8abaaaf2d6877d1c73270a', '中级', '2021-04-06 20:43:12', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (12, 'React', 'https://react.docschina.org/', '用于构建用户界面的 JavaScript 库', 'http://localhost:3002/uploads/38a2c73e5fa473c252d3a9f785fcf317', '中级', '2021-04-06 20:43:03', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (13, 'Node', 'http://nodejs.cn/', 'Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时', 'http://localhost:3002/uploads/c40e0ad71139b798571b041d8344ab5e', '高级', '2021-04-06 20:42:50', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (14, 'Git', 'https://www.runoob.com/git/git-tutorial.html', 'Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目', 'http://localhost:3002/uploads/92e96622b05c05b767f7a801508bc0fe', '高级', '2021-04-06 20:42:42', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (15, 'MongoDB', 'https://www.runoob.com/mongodb/mongodb-tutorial.html', 'MongoDB 是一个基于分布式文件存储的数据库。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。', 'http://localhost:3002/uploads/182de6a0692cb2087e2de224d80bd32b', '高级', '2021-04-06 20:42:35', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (16, 'Webpack', 'https://webpack.js.org/', 'Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。', 'http://localhost:3002/uploads/8c4c15ec5b8e18f57bc34b30a7621b8f', '高级', '2021-04-06 20:42:28', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (17, 'Flutter', 'https://flutterchina.club/', 'Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。', 'http://localhost:3002/uploads/8f79f3ec83e9392b61013ab9ae5a664e', '其他', '2021-04-06 20:42:20', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (18, 'Sass', 'https://www.sass.hk/', '世界上最成熟、最稳定、最强大的专业级CSS扩展语言！', 'http://localhost:3002/uploads/c05df6d586f9021ff14a127fb1103335', '其他', '2021-04-06 20:42:12', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (19, 'Less', 'http://lesscss.cn/', 'Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。Less 可以运行在 Node 或浏览器端。', 'http://localhost:3002/uploads/858d422b935fb4301c279f2161b81139', '其他', '2021-04-06 20:42:05', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (20, 'TypeScript', 'https://www.tslang.cn/', 'TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。\n', 'http://localhost:3002/uploads/d46a70f7b8b7f3df15b72a6cb0db3387', '其他', '2021-04-06 20:41:58', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (21, 'LeetCode', 'https://leetcode-cn.com/', '力扣是一个为全球程序员提供IT技术职业化提升的平台，提供了完善的在线判题服务、学习工具、社区讨论及模拟面试功能，全方位打磨程序员职业所需的核心技能。', 'http://localhost:3002/uploads/01725d9a9c89075998875e71f6a289af', '提升', '2021-04-06 20:41:52', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (22, 'Lodash', 'https://www.lodashjs.com/', 'Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。', 'http://localhost:3002/uploads/fc16b037c99589c3fd27b420e42ae719', '其他', '2021-04-06 20:41:43', '2021-04-12 20:36:29', 0);
INSERT INTO `links` VALUES (23, '测试', '哈哈', '1234', 'http://localhost:3002/uploads/7323df5f0a1a7de98b941ad5a51dc604', '其他', '2021-05-10 11:53:16', '2021-05-10 11:53:49', 1);

-- ----------------------------
-- Table structure for messages
-- ----------------------------
DROP TABLE IF EXISTS `messages`;
CREATE TABLE `messages`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '留言编号',
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '大佬' COMMENT '留言昵称',
  `message` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '留言内容',
  `background` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '留言背景',
  `posTop` int(0) NOT NULL COMMENT '上边距',
  `posLeft` int(0) NOT NULL COMMENT '左边距',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_check` tinyint(1) NOT NULL DEFAULT 0 COMMENT '审核状态',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of messages
-- ----------------------------
INSERT INTO `messages` VALUES (1, '小阮', 'hello world', 'rgba(0, 255, 123, 0.81)', 200, 200, '2020-11-23 15:43:36', '2021-04-12 20:28:47', 1, 0);
INSERT INTO `messages` VALUES (4, '芜湖', '哈哈1', 'rgba(25, 129, 255, 1)', 864, 1536, '2021-05-10 11:46:14', '2021-05-10 11:49:14', 1, 1);
INSERT INTO `messages` VALUES (5, '芜湖', '起飞~', 'rgba(99, 143, 255, 1)', 864, 1536, '2021-05-10 11:50:49', '2021-05-10 11:59:14', 1, 1);
INSERT INTO `messages` VALUES (6, '芜湖', '起飞！', 'rgba(0, 255, 81, 1)', 564, 1236, '2021-05-10 11:59:42', '2021-05-10 11:59:42', 1, 0);
INSERT INTO `messages` VALUES (7, '轩辕长卿', '今天天气真好', 'rgba(129,41,206,0.8)', 18, 583, '2021-05-12 11:27:30', '2021-05-12 11:27:38', 1, 0);
INSERT INTO `messages` VALUES (8, '四川王嘉尔', '嘎嘎噶', 'rgba(255, 0, 242, 1)', 210, 1100, '2021-05-14 16:54:26', '2021-05-14 18:56:45', 1, 0);
INSERT INTO `messages` VALUES (9, '北宫景跃', '好好、', 'rgba(120,181,20,0.8)', 95, 519, '2021-05-19 11:44:13', '2021-05-19 11:44:13', 1, 0);

-- ----------------------------
-- Table structure for notices
-- ----------------------------
DROP TABLE IF EXISTS `notices`;
CREATE TABLE `notices`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '公告编号',
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `notice` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of notices
-- ----------------------------
INSERT INTO `notices` VALUES (1, '完成留言', '对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查', '2020-03-15 15:26:59', '2021-04-12 21:01:14', 1);
INSERT INTO `notices` VALUES (2, '后台进度', '完成后台页面开发', '2020-03-18 15:56:17', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (3, '后台进度', '完成后台数据库操作', '2020-03-18 15:56:17', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (4, '前台进度', '完成前端页面搭建', '2020-03-18 15:56:17', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (5, 'Welcome', '欢迎来到小阮的博客', '2020-04-11 15:54:51', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (6, '最新', '项目已没有维护，博客在CSDN，https://blog.csdn.net/qq_44775782', '2020-10-15 05:09:51', '2021-04-12 21:01:14', 1);
INSERT INTO `notices` VALUES (7, '博客更新', '新增文章主题分类，留言改版，新增学习链接，后台优化', '2020-11-18 09:56:20', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (8, '后台管理', '后台表单添加验证', '2020-11-23 15:51:56', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (9, '新增功能', '新增文章置顶功能', '2020-12-18 11:37:15', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (10, '新增功能', '新增评论留言审核功能', '2021-04-01 20:49:40', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (11, '新增个人项目', '新增个人项目的栏目，可以浏览我的项目源码', '2021-04-10 12:31:05', '2021-04-12 21:01:14', 0);
INSERT INTO `notices` VALUES (12, '测试', '1234', '2021-04-12 21:08:12', '2021-04-12 21:08:26', 1);
INSERT INTO `notices` VALUES (13, '修复Bug', '修复已知部分问题', '2021-05-10 11:51:27', '2021-05-10 11:51:41', 0);
INSERT INTO `notices` VALUES (15, '新增功能', '新增游客管理功能', '2021-05-16 15:16:32', '2021-05-16 15:16:32', 0);

-- ----------------------------
-- Table structure for projects
-- ----------------------------
DROP TABLE IF EXISTS `projects`;
CREATE TABLE `projects`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '项目编号',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `link` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接地址',
  `description` varchar(240) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '项目描述',
  `createTime` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更改时间',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of projects
-- ----------------------------
INSERT INTO `projects` VALUES (1, 'Bootstrap的demo', 'https://github.com/rmq767/bootstrap-demo', '练习响应式网页布局等', '2021-04-10 12:23:07', '2021-04-12 20:37:29', 0);
INSERT INTO `projects` VALUES (2, '王者荣耀管理系统', 'https://github.com/rmq767/MOBA', '根据B站UP主-全栈之巅，练习的一个全栈的项目', '2021-04-10 12:24:33', '2021-04-12 20:37:29', 0);
INSERT INTO `projects` VALUES (3, 'BLOG-API', 'https://github.com/rmq767/BLOG-API', '一个NodeJS+NestJS的后端接口练习项目', '2021-04-10 12:26:17', '2021-04-12 20:37:29', 0);
INSERT INTO `projects` VALUES (4, 'Webpack的学习', 'https://github.com/rmq767/webpack-study', '关于webpack的学习笔记和配置', '2021-04-10 12:27:07', '2021-04-12 20:37:29', 0);
INSERT INTO `projects` VALUES (5, '博客项目', 'https://github.com/rmq767/MyBlog', '本博客的项目源码', '2021-04-10 12:27:52', '2021-04-12 20:37:29', 0);
INSERT INTO `projects` VALUES (6, '测试', '123', '哈哈1', '2021-05-10 11:55:03', '2021-05-10 11:55:31', 1);

-- ----------------------------
-- Table structure for themes
-- ----------------------------
DROP TABLE IF EXISTS `themes`;
CREATE TABLE `themes`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '主题编号',
  `theme` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '主题名称',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of themes
-- ----------------------------
INSERT INTO `themes` VALUES (1, '基础', 0);
INSERT INTO `themes` VALUES (2, '技术', 0);
INSERT INTO `themes` VALUES (3, '实用', 0);
INSERT INTO `themes` VALUES (4, '其他', 0);
INSERT INTO `themes` VALUES (5, '组件', 0);
INSERT INTO `themes` VALUES (6, '面试', 1);
INSERT INTO `themes` VALUES (7, '实习', 0);
INSERT INTO `themes` VALUES (12, '问题及解决方案', 0);
INSERT INTO `themes` VALUES (13, '学习经验', 0);
INSERT INTO `themes` VALUES (17, '哈1', 1);
INSERT INTO `themes` VALUES (18, '测试一', 1);

-- ----------------------------
-- Table structure for types
-- ----------------------------
DROP TABLE IF EXISTS `types`;
CREATE TABLE `types`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '分类编号',
  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of types
-- ----------------------------
INSERT INTO `types` VALUES (1, 'vue', 0);
INSERT INTO `types` VALUES (2, 'js', 0);
INSERT INTO `types` VALUES (3, 'elementUI', 0);
INSERT INTO `types` VALUES (4, 'node', 0);
INSERT INTO `types` VALUES (5, 'mongoDB', 0);
INSERT INTO `types` VALUES (6, '服务器部署', 1);
INSERT INTO `types` VALUES (7, '其他', 0);
INSERT INTO `types` VALUES (8, 'es6', 0);
INSERT INTO `types` VALUES (9, '算法', 0);
INSERT INTO `types` VALUES (10, 'css', 0);
INSERT INTO `types` VALUES (20, 'echarts', 0);
INSERT INTO `types` VALUES (25, '哈2', 1);
INSERT INTO `types` VALUES (26, '测试2', 1);
INSERT INTO `types` VALUES (27, '测试3', 1);

-- ----------------------------
-- Table structure for visitor
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '游客编号',
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '昵称',
  `createTime` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 21 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitor
-- ----------------------------
INSERT INTO `visitor` VALUES (11, '13@qq.com', '哈', '2021-04-01 19:45:14', 1);
INSERT INTO `visitor` VALUES (12, '4321@qq.com', '4321', '2021-04-01 19:45:56', 1);
INSERT INTO `visitor` VALUES (13, '123456789@qq.com', '老王', '2021-04-12 20:49:49', 0);
INSERT INTO `visitor` VALUES (18, 'ruanmaoqi@qq.com', '小阮', '2021-05-02 16:29:34', 0);
INSERT INTO `visitor` VALUES (19, '2501706076@qq.com', '小阮', '2021-05-12 11:30:36', 0);

SET FOREIGN_KEY_CHECKS = 1;
