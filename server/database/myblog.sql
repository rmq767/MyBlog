/*
SQLyog Ultimate v11.24 (32 bit)
MySQL - 5.1.49-community : Database - myblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`myblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `myblog`;

/*Table structure for table `admins` */

DROP TABLE IF EXISTS `admins`;

CREATE TABLE `admins` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `username` char(16) DEFAULT '萌新',
  `email` char(30) NOT NULL,
  `password` char(60) NOT NULL,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  `is_super` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

/*Data for the table `admins` */

insert  into `admins`(`id`,`username`,`email`,`password`,`is_delete`,`is_super`) values (14,'小阮','111@11.com','$2a$08$AT2Y5o3nTr350Gd.P4VaXOv99U2MIhJtUWa1yKlWx.LgjzzdCcHq2',0,1);

/*Table structure for table `articles` */

DROP TABLE IF EXISTS `articles`;

CREATE TABLE `articles` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `title` char(100) NOT NULL,
  `content_md` text NOT NULL,
  `content_html` text NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `clicks` int(4) NOT NULL DEFAULT '0',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

/*Data for the table `articles` */

insert  into `articles`(`id`,`title`,`content_md`,`content_html`,`date`,`clicks`,`is_delete`) values (12,'vue滚动监听动画事件','## 在项目中，我们时常要用到固定侧边栏、广告等，但是仅仅用position:fixed;太单调了，我们就需要给它加一个动画\n### 那么怎么给它加一个好看的动画呢？\n+ `<div class=\"new_message\" ref=\"newMessage\">`\n+ `<div class=\"about_me\" ref=\"aboutMe\">`\n\n+ 这是我实现的一个超级简单的向下滚动的动画，虽然简单但是很好看。\n```js\n// 1.在mounted中添加滚动事件\nmounted() {\n    window.addEventListener(\'scroll\', this.toScoll)\n}\n//2.在方法中写处理事件\n    methods: {\n      toScoll(){//向下滑动动画\n        let newMessage = this.$refs.newMessage\n        let aboutMe = this.$refs.aboutMe\n        let long = document.documentElement.scrollTop\n        if (long > 100) {\n          newMessage.style.top = long + \"px\";\n          aboutMe.style.top = long + \"px\";\n        }else if (long < 100) {\n          newMessage.style.top = \"0px\";\n          aboutMe.style.top = \"0px\";\n        }\n      }\n    }\n```\n**记住不要给元素加==position:fixed==;并css给将要进行动画的元素，添加上==transition: all 0.5s ease-in-out;==**，这里设置绝对定位，需要给父元素(最好自己设个div)设置 **position:relative;width:100%;** 把div撑起来\n+ `      .new_message{\n		position:absolute;\n        transition: all 0.5s ease-in-out;}`\n+ `      .about_me{\n		position:absolute;\n        transition: all 0.5s ease-in-out;\n      }`\n\n### 遇到的问题\n注意，如果离开该页面需要移除这个监听的事件，不然会报错。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191105152803356.png)\n+ 解决方案\n	```js\n	destroyed () {\n      window.removeEventListener(\'scroll\', this.toScoll)\n    },\n	```\n','<h2><a id=\"positionfixed_0\"></a>在项目中，我们时常要用到固定侧边栏、广告等，但是仅仅用position:fixed;太单调了，我们就需要给它加一个动画</h2>\n<h3><a id=\"_1\"></a>那么怎么给它加一个好看的动画呢？</h3>\n<ul>\n<li>\n<p><code>&lt;div class=&quot;new_message&quot; ref=&quot;newMessage&quot;&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;div class=&quot;about_me&quot; ref=&quot;aboutMe&quot;&gt;</code></p>\n</li>\n<li>\n<p>这是我实现的一个超级简单的向下滚动的动画，虽然简单但是很好看。</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 1.在mounted中添加滚动事件</span>\nmounted() {\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'scroll\'</span>, <span class=\"hljs-keyword\">this</span>.toScoll)\n}\n<span class=\"hljs-comment\">//2.在方法中写处理事件</span>\n    methods: {\n      toScoll(){<span class=\"hljs-comment\">//向下滑动动画</span>\n        <span class=\"hljs-keyword\">let</span> newMessage = <span class=\"hljs-keyword\">this</span>.$refs.newMessage\n        <span class=\"hljs-keyword\">let</span> aboutMe = <span class=\"hljs-keyword\">this</span>.$refs.aboutMe\n        <span class=\"hljs-keyword\">let</span> long = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop\n        <span class=\"hljs-keyword\">if</span> (long &gt; <span class=\"hljs-number\">100</span>) {\n          newMessage.style.top = long + <span class=\"hljs-string\">\"px\"</span>;\n          aboutMe.style.top = long + <span class=\"hljs-string\">\"px\"</span>;\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (long &lt; <span class=\"hljs-number\">100</span>) {\n          newMessage.style.top = <span class=\"hljs-string\">\"0px\"</span>;\n          aboutMe.style.top = <span class=\"hljs-string\">\"0px\"</span>;\n        }\n      }\n    }\n</code></div></pre>\n<p><strong>记住不要给元素加<mark>position:fixed</mark>;并css给将要进行动画的元素，添加上<mark>transition: all 0.5s ease-in-out;</mark></strong>，这里设置绝对定位，需要给父元素(最好自己设个div)设置 <strong>position:relative;width:100%;</strong> 把div撑起来</p>\n<ul>\n<li><code>.new_message{ 	position:absolute; transition: all 0.5s ease-in-out;}</code></li>\n<li><code>.about_me{ 	position:absolute; transition: all 0.5s ease-in-out; }</code></li>\n</ul>\n<h3><a id=\"_36\"></a>遇到的问题</h3>\n<p>注意，如果离开该页面需要移除这个监听的事件，不然会报错。<br />\n<img src=\"https://img-blog.csdnimg.cn/20191105152803356.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>解决方案<pre><div class=\"hljs\"><code class=\"lang-js\">destroyed () {\n  <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">\'scroll\'</span>, <span class=\"hljs-keyword\">this</span>.toScoll)\n},\n</code></div></pre>\n</li>\n</ul>\n','2020-04-03 17:12:20',9,0),(13,'vue运用animate.css设置transition动画','### vue的transition动画\n+ 关于vue中animation动画问题\n    - 1.找到要用动画的元素。我是想要实现切换页面的动画效果，所以找到app.vue中的router-view，用transition将它包裹起来。\n    - 2.用动画库animate.css，需要==npm install animate.css --save==\n    - 3.在main.js中引入动画\n    ```js\n    import animated from \'animate.css\'//引入动画\n    Vue.use(animated)\n    ```\n    - 4.开始写transition动画了\n    ```js\n    <template>\n        <div id=\"app\">\n            <Navbar></Navbar>\n            <!-- 设置进入、离开动画 -->\n            <transition\n            enter-active-class=\"animated zoomIn faster\"\n            leave-active-class=\"animated zoomOut faster\"\n            class=\"tran\"\n            mode=\"out-in\"\n            >\n            <router-view class=\"show_animate\"/>\n            </transition>\n        </div>\n    </template>\n    ```\n    **注意：需要给transition加一个class类,设置==position: relative==，然后给将要进行动画的元素设置==position: absolute==，否则动画位置会很乱。还需要设置给transition设置==mode=\"out-in\"==，是上个动画结束再执行下一个，不然看起来会很怪。**\n\n+ transition-group也同理\n    - [这里就给个链接](https://blog.csdn.net/weixin_42218847/article/details/81474923)','<h3><a id=\"vuetransition_0\"></a>vue的transition动画</h3>\n<ul>\n<li>\n<p>关于vue中animation动画问题</p>\n<ul>\n<li>1.找到要用动画的元素。我是想要实现切换页面的动画效果，所以找到app.vue中的router-view，用transition将它包裹起来。</li>\n<li>2.用动画库animate.css，需要<mark>npm install animate.css --save</mark></li>\n<li>3.在main.js中引入动画</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">import</span> animated <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'animate.css\'</span><span class=\"hljs-comment\">//引入动画</span>\nVue.use(animated)\n</code></div></pre>\n<ul>\n<li>4.开始写transition动画了</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">&lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navbar</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navbar</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 设置进入、离开动画 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n        <span class=\"hljs-attr\">enter-active-class</span>=<span class=\"hljs-string\">\"animated zoomIn faster\"</span>\n        <span class=\"hljs-attr\">leave-active-class</span>=<span class=\"hljs-string\">\"animated zoomOut faster\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"tran\"</span>\n        <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">\"out-in\"</span>\n        &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"show_animate\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n</code></div></pre>\n<p><strong>注意：需要给transition加一个class类,设置<mark>position: relative</mark>，然后给将要进行动画的元素设置<mark>position: absolute</mark>，否则动画位置会很乱。还需要设置给transition设置<mark>mode=“out-in”</mark>，是上个动画结束再执行下一个，不然看起来会很怪。</strong></p>\n</li>\n<li>\n<p>transition-group也同理</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_42218847/article/details/81474923\" target=\"_blank\">这里就给个链接</a></li>\n</ul>\n</li>\n</ul>\n','2020-04-03 17:12:20',5,0),(14,'关于elementUI使用el-date-picker时问题','#### 当我们在使用el-date-picker，会存在一些问题\n##### 1.数据格式化问题\n* **format**	显示在输入框中的格式	string	见日期格式	yyyy-MM-dd\n* **value-format**	可选，绑定值的格式。不指定则绑定值为 Date 对象	string	见日期格式	— **==这是后台传输时的数据格式==**\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/2019122110035736.png)\n* 这是显示的时间格式\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221100657657.png)\n* 这是后台拿到的时间格式\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221100827634.png)\n\n#### 2.时间回显问题\n* 我尝试从数据库拿到时间，进行回显，作修改用，但是一直不行。\n* 原因：当你用**v-model**绑定数据时，绑定时间的数据，一定要命名为**==date==**，否则不能回显。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101320880.png)\n* 我们看下别的命名\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101432536.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101453819.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191221101518850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n* **==最关键就是date==**\n','<h4><a id=\"eldatepicker_0\"></a>当我们在使用el-date-picker，会存在一些问题</h4>\n<h5><a id=\"1_1\"></a>1.数据格式化问题</h5>\n<ul>\n<li><strong>format</strong>	显示在输入框中的格式	string	见日期格式	yyyy-MM-dd</li>\n<li><strong>value-format</strong>	可选，绑定值的格式。不指定则绑定值为 Date 对象	string	见日期格式	— <strong><mark>这是后台传输时的数据格式</mark></strong><br />\n<img src=\"https://img-blog.csdnimg.cn/2019122110035736.png\" alt=\"在这里插入图片描述\" /></li>\n<li>这是显示的时间格式<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221100657657.png\" alt=\"在这里插入图片描述\" /></li>\n<li>这是后台拿到的时间格式<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221100827634.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h4><a id=\"2_10\"></a>2.时间回显问题</h4>\n<ul>\n<li>我尝试从数据库拿到时间，进行回显，作修改用，但是一直不行。</li>\n<li>原因：当你用<strong>v-model</strong>绑定数据时，绑定时间的数据，一定要命名为**<mark>date</mark>**，否则不能回显。<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101320880.png\" alt=\"在这里插入图片描述\" /></li>\n<li>我们看下别的命名<br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101432536.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101453819.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20191221101518850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><strong><mark>最关键就是date</mark></strong></li>\n</ul>\n','2020-04-03 17:12:20',5,0),(15,'express+mongodb开发通用 CRUD 接口','**通用 CRUD 接口，就是后台通过前端的URL，动态获取到里面的需要的参数，将参数处理成我们的DB模型接口，就可以使用了**\n#### 1.改造接口，形成动态接口\n```js\n// 改造前\nconst express = require(\"express\");\nconst router = express.Router();\nconst Category = require(\"../models/Category\");\nrouter.get(\"/categories\", async (req, res) => {\n  let result = await Category.create(req.body);\n  res.send(result);\n});\n\n// 改造后\nconst express = require(\"express\");\nconst router = express.Router({\n  mergeParams: true //合并url参数，获取url传的{:resource}\n});\nrouter.get(\"/\", async (req, res) => {\n  let Model = require(`../../models/${req.params.resource}`);\n  res.send(result);\n});\napp.use(\"/admin/api/rest/:resource\", router);\n```\n==改造后的请求接口==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191923236.png)会报错![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202190255305.png)\n==因为我们拿到的是categories==，但是我们要的是Category。\n\n#### 2.处理接口参数\n- npm i inflection(处理格式的插件)，这里我们要拿到**Category**，因为我们model定义的是**Category**。\n![-](https://img-blog.csdnimg.cn/20200202192524149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n-下面是获取 **Category**\n```js\nconst modelName = require(\"inflection\").classify(req.params.resource); //复数转单数，首字母大写\nres.send(modelName);\nreq.Model = require(`../../models/${modelName}`); //req.Model表示给请求对象上加上Model，之后的req都可以引用\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191013748.png)\n- **为了避免给每个接口添加这两句，所以要在app.use()中使用中间件**\n\n```javascript\n    // 通用CRUD接口\n    app.use(\"/admin/api/rest/:resource\",async (req, res, next) => {\n	    const modelName = require(\"inflection\").classify(req.params.resource); //复数转单数，首字母大写\n	    req.Model = require(`../../models/${modelName}`); //req.Model表示给请求对象上加上Model，之后的req都可以引用\n	    next();\n      }, router);\n```\n#### 改造完成\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202191747256.png)\n之后我们就可以通过**Request URL**，进行通用的增删改查，大大简化代码。\n','<p><strong>通用 CRUD 接口，就是后台通过前端的URL，动态获取到里面的需要的参数，将参数处理成我们的DB模型接口，就可以使用了</strong></p>\n<h4><a id=\"1_1\"></a>1.改造接口，形成动态接口</h4>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 改造前</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> router = express.Router();\n<span class=\"hljs-keyword\">const</span> Category = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../models/Category\"</span>);\nrouter.get(<span class=\"hljs-string\">\"/categories\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> Category.create(req.body);\n  res.send(result);\n});\n\n<span class=\"hljs-comment\">// 改造后</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>);\n<span class=\"hljs-keyword\">const</span> router = express.Router({\n  <span class=\"hljs-attr\">mergeParams</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">//合并url参数，获取url传的{:resource}</span>\n});\nrouter.get(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">let</span> Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${req.params.resource}</span>`</span>);\n  res.send(result);\n});\napp.use(<span class=\"hljs-string\">\"/admin/api/rest/:resource\"</span>, router);\n</code></div></pre>\n<p><mark>改造后的请求接口</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200202191923236.png\" alt=\"在这里插入图片描述\" />会报错<img src=\"https://img-blog.csdnimg.cn/20200202190255305.png\" alt=\"在这里插入图片描述\" /><br />\n<mark>因为我们拿到的是categories</mark>，但是我们要的是Category。</p>\n<h4><a id=\"2_27\"></a>2.处理接口参数</h4>\n<ul>\n<li>npm i inflection(处理格式的插件)，这里我们要拿到<strong>Category</strong>，因为我们model定义的是<strong>Category</strong>。<br />\n<img src=\"https://img-blog.csdnimg.cn/20200202192524149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"-\" /><br />\n-下面是获取 <strong>Category</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> modelName = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"inflection\"</span>).classify(req.params.resource); <span class=\"hljs-comment\">//复数转单数，首字母大写</span>\nres.send(modelName);\nreq.Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${modelName}</span>`</span>); <span class=\"hljs-comment\">//req.Model表示给请求对象上加上Model，之后的req都可以引用</span>\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200202191013748.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li><strong>为了避免给每个接口添加这两句，所以要在app.use()中使用中间件</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    <span class=\"hljs-comment\">// 通用CRUD接口</span>\n    app.use(<span class=\"hljs-string\">\"/admin/api/rest/:resource\"</span>,<span class=\"hljs-keyword\">async</span> (req, res, next) =&gt; {\n	    <span class=\"hljs-keyword\">const</span> modelName = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"inflection\"</span>).classify(req.params.resource); <span class=\"hljs-comment\">//复数转单数，首字母大写</span>\n	    req.Model = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">`../../models/<span class=\"hljs-subst\">${modelName}</span>`</span>); <span class=\"hljs-comment\">//req.Model表示给请求对象上加上Model，之后的req都可以引用</span>\n	    next();\n      }, router);\n</code></div></pre>\n<h4><a id=\"_47\"></a>改造完成</h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20200202191747256.png\" alt=\"在这里插入图片描述\" /><br />\n之后我们就可以通过<strong>Request URL</strong>，进行通用的增删改查，大大简化代码。</p>\n','2020-04-03 17:12:20',10,0),(16,'vue封装一个卡片组件','### **会用到的知识**\n- 父组件向子组件传值\n- slot插槽\n##### 我想要做一个这样的组件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200203153357958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 头部基本不变，只需要改变图标和标题\n- 下面的内容需要我们改变，可以是视频、资料、新闻等。\n\n#### 1.先定义一个Card.vue的组件\n接收父组件动态传过来的图标和标题\n\n```javascript\n<template>\n  <div>\n    <!-- card -->\n    <div class=\"card p-3 mt-3 bg-white\">\n      <div class=\"card-header d-flex pb-3\">\n        <!-- 图标 -->\n        <i class=\"iconfont\" :class=\"`icon-${icon}`\"></i>\n        <!-- 标题 -->\n        <div class=\"fs-xl flex-1 ml-2\">{{ title }}</div>\n        <i class=\"iconfont icon-menu\"></i>\n      </div>\n      <div class=\"card-body pt-3\">\n      <!-- slot用来接收之后的自己定义的内容，就是下面body的内容 -->\n        <slot></slot>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  props: {//父组件传来的值\n    title: { type: String, required: true },\n    icon: { type: String, required: true }\n  },\n</script>\n```\n==记得把组件挂载到**main.js**上，方便全局引用==\n```javascript\nimport Card from \"./components/Card\";\nVue.component(\"m-card\", Card);\n```\n\n#### 2.再定义一个，CardList.vue组件\n接收父组件传过来列表的数据，进行展示。并把图标和标题传给Card.vue。\n\n```javascript\n<template>\n  <div>\n    <m-card :icon=\"icon\" :title=\"title\">\n      <div class=\"body\">\n        <!-- 导航栏 -->\n        <div class=\"nav pt-3 jc-between\">\n          <div\n            class=\"nav-item\"\n            :class=\"{active:active===index}\"\n            v-for=\"(category,index) in categories\"\n            :key=\"index\"\n            @click=\"active = index\"\n          >\n            <div class=\"nav-link\">{{category.name}}</div>\n          </div>\n        </div>\n        <!-- 轮播图 -->\n        <div class=\"pt-2\">\n          <swiper>\n            <swiper-slide v-for=\"(category,index) in categories\" :key=\"index\">\n            <!-- slot接收显示的列表数据，这里要用具名的solt父组件需要拿到category这个值 -->\n              <slot name=\"items\" :category=\"category\"></slot>\n            </swiper-slide>\n          </swiper>\n        </div>\n      </div>\n    </m-card>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: { type: String, require: true },\n    icon: { type: String, require: true },\n    categories: { type: Array, require: true }//这是父组件传的列表数据，是个数组\n  },\n  data() {\n    return {\n      active: 0\n    };\n  },\n};\n</script>\n```\n==再挂载到**main.js**上，方便全局引用==\n```javascript\nimport ListCard from \'./components/ListCard\'\nVue.component(\"m-list-card\", ListCard);\n```\n**注意：这两个组件的slot各自的作用**\n\n#### 3.父组件传值\n\n```javascript\n    <!-- 卡片组件 -->\n    <m-list-card title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\">\n      <template v-slot:items=\"{ category }\">\n        <div\n          v-for=\"(item, index) in category.newsList\"\n          :key=\"index\"\n          class=\"py-2\"\n        >\n          <span>[{{ item.categoryName }}]</span>\n          <span>|</span>\n          <span>{{ item.title }}</span>\n          <span>{{ item.date }}</span>\n        </div>\n      </template>\n    </m-list-card>\n    \n    //列表数据\n      newsCat: [\n        {\n          name: \"热门\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"公告\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"新闻\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"新闻\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"活动\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"活动\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"赛事\",\n          newsList: new Array(5).fill({}).map(() => ({\n            categoryName: \"赛事\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        }\n      ]\n```\n父组件需要传3个值`<m-list-card title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\">`。\n- 父组件传（**title=\"新闻资讯\" icon=\"menu1\" :categories=\"newsCat\"**）==> *CardList.vue*（**props**）接收\n- *CardList.vue*（**title=\"新闻资讯\" icon=\"menu1\"**）==> *Card.vue*（**props**）接收展示\n- *CardList.vue*（**:categories=\"newsCat\"**）v-for循环展示，但是为了复用性，我们需要把`<slot name=\"items\" :category=\"category\"></slot>`里面的数据传给父组件，让父组件展示来。\n- 最后父组件通过`<template v-slot:items=\"{ category }\">`拿到**CardList.vue**传过来的列表数据，进行循环展示。==v-slot:items==是用来绑定slot的==name==，数据则是==category==\n- **注意**：每个子组件的==slot==的用处，和父组件的==template==用处','<h3><a id=\"_0\"></a><strong>会用到的知识</strong></h3>\n<ul>\n<li>父组件向子组件传值</li>\n<li>slot插槽</li>\n</ul>\n<h5><a id=\"_3\"></a>我想要做一个这样的组件</h5>\n<p><img src=\"https://img-blog.csdnimg.cn/20200203153357958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>头部基本不变，只需要改变图标和标题</li>\n<li>下面的内容需要我们改变，可以是视频、资料、新闻等。</li>\n</ul>\n<h4><a id=\"1Cardvue_8\"></a>1.先定义一个Card.vue的组件</h4>\n<p>接收父组件动态传过来的图标和标题</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- card --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card p-3 mt-3 bg-white\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-header d-flex pb-3\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 图标 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"iconfont\"</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"`icon-${icon}`\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 标题 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fs-xl flex-1 ml-2\"</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"iconfont icon-menu\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-body pt-3\"</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- slot用来接收之后的自己定义的内容，就是下面body的内容 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/template&gt;\n&lt;script&gt;\nexport default {\n  props: {/</span><span class=\"hljs-regexp\">/父组件传来的值\n    title: { type: String, required: true },\n    icon: { type: String, required: true }\n  },\n&lt;/</span>script&gt;\n</code></div></pre>\n<p><mark>记得把组件挂载到<strong>main.js</strong>上，方便全局引用</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> Card <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/Card\"</span>;\nVue.component(<span class=\"hljs-string\">\"m-card\"</span>, Card);\n</code></div></pre>\n<h4><a id=\"2CardListvue_44\"></a>2.再定义一个，CardList.vue组件</h4>\n<p>接收父组件传过来列表的数据，进行展示。并把图标和标题传给Card.vue。</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-card</span> <span class=\"hljs-attr\">:icon</span>=<span class=\"hljs-string\">\"icon\"</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"body\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 导航栏 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav pt-3 jc-between\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-item\"</span>\n            <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{active:active===index}\"</span>\n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(category,index) in categories\"</span>\n            <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n            @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"active = index\"</span>\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav-link\"</span>&gt;</span>{{category.name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- 轮播图 --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pt-2\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper-slide</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(category,index) in categories\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- slot接收显示的列表数据，这里要用具名的solt父组件需要拿到category这个值 --&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"items\"</span> <span class=\"hljs-attr\">:category</span>=<span class=\"hljs-string\">\"category\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper-slide</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">m-card</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">title</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> },\n    <span class=\"hljs-attr\">icon</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> },\n    <span class=\"hljs-attr\">categories</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Array</span>, <span class=\"hljs-attr\">require</span>: <span class=\"hljs-literal\">true</span> }<span class=\"hljs-comment\">//这是父组件传的列表数据，是个数组</span>\n  },\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">active</span>: <span class=\"hljs-number\">0</span>\n    };\n  },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></div></pre>\n<p><mark>再挂载到<strong>main.js</strong>上，方便全局引用</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> ListCard <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./components/ListCard\'</span>\nVue.component(<span class=\"hljs-string\">\"m-list-card\"</span>, ListCard);\n</code></div></pre>\n<p><strong>注意：这两个组件的slot各自的作用</strong></p>\n<h4><a id=\"3_99\"></a>3.父组件传值</h4>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    &lt;!-- 卡片组件 --&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-list-card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"新闻资讯\"</span> <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">\"menu1\"</span> <span class=\"hljs-attr\">:categories</span>=<span class=\"hljs-string\">\"newsCat\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:items</span>=<span class=\"hljs-string\">\"{ category }\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n          <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in category.newsList\"</span>\n          <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>\n          <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"py-2\"</span>\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>[{{ item.categoryName }}]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ item.title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ item.date }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">m-list-card</span>&gt;</span>\n    \n    //列表数据\n      newsCat: [\n        {\n          name: \"热门\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"公告\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"新闻\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"新闻\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"活动\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"活动\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        },\n        {\n          name: \"赛事\",\n          newsList: new Array(5).fill({}).map(() =&gt; ({\n            categoryName: \"赛事\",\n            title: \"这是一条广告\",\n            date: \"06/01\"\n          }))\n        }\n      ]\n</span></code></div></pre>\n<p>父组件需要传3个值<code>&lt;m-list-card title=&quot;新闻资讯&quot; icon=&quot;menu1&quot; :categories=&quot;newsCat&quot;&gt;</code>。</p>\n<ul>\n<li>父组件传（<strong>title=“新闻资讯” icon=“menu1” :categories=“newsCat”</strong>）==&gt; <em>CardList.vue</em>（<strong>props</strong>）接收</li>\n<li><em>CardList.vue</em>（<strong>title=“新闻资讯” icon=“menu1”</strong>）==&gt; <em>Card.vue</em>（<strong>props</strong>）接收展示</li>\n<li><em>CardList.vue</em>（<strong>:categories=“newsCat”</strong>）v-for循环展示，但是为了复用性，我们需要把<code>&lt;slot name=&quot;items&quot; :category=&quot;category&quot;&gt;&lt;/slot&gt;</code>里面的数据传给父组件，让父组件展示来。</li>\n<li>最后父组件通过<code>&lt;template v-slot:items=&quot;{ category }&quot;&gt;</code>拿到<strong>CardList.vue</strong>传过来的列表数据，进行循环展示。<mark>v-slot:items</mark>是用来绑定slot的<mark>name</mark>，数据则是<mark>category</mark></li>\n<li><strong>注意</strong>：每个子组件的<mark>slot</mark>的用处，和父组件的<mark>template</mark>用处</li>\n</ul>\n','2020-04-03 17:12:20',33,0),(17,'VUE项目发布和部署 (阿里云)','## 以下是我看[全栈之巅](https://www.bilibili.com/video/av58969687?p=1)整理的，有兴趣可以看一下\n这是我写好的项目（后台管理：admin，前台展示：web，服务端：server）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214133603624.png)\n### 1. 生产环境编译\n- 1.修改axios的**baseURL**\n```js\nconst http = axios.create({\n    // baseURL: \"http://localhost:3000/admin/api\"\n    baseURL: process.env.VUE_APP_API_URL || \'/admin/api\',\n});\n```\n- 2.在admin的根目录添加环境变量文件 ==.env.development==，添加 ==VUE_APP_API_URL = http://localhost:3000/admin/api==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135501887.png)\n- 3.在==server==的==main.js==，中添加`app.use(\'/admin\', express.static(__dirname + \'/admin\')) //静态文件 `\n- 4.在==admin==中，创建==vue.config.js==配置文件，进行配置![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135532853.png)\n```js\nmodule.exports = {\n  outputDir: __dirname + \"/../server/admin/\", //将文件输出到server/admin\n  publicPath: process.env.NODE_ENV === \"production\" ? \"/admin/\" : \"/\" //当生产环境，就会使用/admin的publicPath\n}\n```\n- 5.==admin==中`npm run build`，就会在server中生成之前配置的admin文件夹\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214135840340.png)\n- 6.成功访问\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140034453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 7. 在==web==文件夹下执行上面相同的步骤。就会在==server==文件夹，生成**build**的web文件夹。 \n注意：==vue.config.js==，配置不同，我们访问的根路径就是前台，所以不用加**web**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140646720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140612153.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140712345.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214140842324.png?x-ossprocess=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 2. 购买域名和服务器\n- 1.购买域名![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141247340.png)\n- 2.购买服务器（境内要备案，境外可以不用备案），选择镜像==Ubuntu18==\n		![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141441695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141557328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214141633714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142314210.png)\n### 3. 域名解析\n- 记录值为服务器的**公网IP**![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142153148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 在==git bash here==中执行`ssh root@test.topfullstack.com`![在这里插入图片描述](https://img-blog.csdnimg.cn/202002141426170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n\n### 4. Nginx 安装和配置\n- `apt update`\n- `apt install nginx -y`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214142953450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- **如果没有显示，去阿里云安全组，开启80端口**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214143209193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 5. MongoDB数据库的安装和配置\n- `apt install mongodb-server -y`\n### 6. git 安装、配置ssh-key\n- `apt install -y git`\n- `ssh-keygen`\n- `cat /root/.ssh/id_rsa.pub`，获取到的==ssh-key==，要保存下来![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214143851820.png)\n### 7. Node.js 安装、配置淘宝镜像\n- `apt install -y nodejs`\n- `apt install -y npm`\n- `npm config set registry https://registry.npm.taobao.org`\n- `npm i -g nrm`\n- `npm i -g n`\n- `n use latest`\n- 退出重新连接`exit`，`ssh root@test.topfullstack.com`\n### 8. 拉取代码，安装pm2并启动项目\n- 向github或者gitee提交代码\n- 把ssh-keygen，添加到仓库的公钥，拉取克隆代码![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145050916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 创建一个文件夹，进入文件夹![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145221939.png)\n- clone代码![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145308802.png)\n- 进入==moba==文件夹的==server==文件夹，运行`npm i`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145433737.png)\n- `npm i -g pm2`\n- `pm2 start index.js`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214145609924.png)\n### 9. 配置 Nginx 的反向代理\n- 在vscode中找到 ==remote-ssh==插件![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150029557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 点击设置配置文件，点击小窗口进入![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150146826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150227218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 输入密码，连接![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415033060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 进入==/etc/nginx/==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214150435516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 去nginx配置网站，**https://www.digitalocean.com/community/tools/nginx**\n- 选择==nodejs==，进入==server==，填入自己域名，==https==不启用，最后下载。![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151113624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415124556.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151327721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 把==nginxconfig.io==文件夹复制过去，把==available==里面的文件复制过去，把==enabled==里面的文件复制过去![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214151426540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 重载nginx的配置文件，`service nginx reload` ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152040485.png)\n- 重启服务器`pm2 start server/index.js`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152027428.png)\n- 成功显示出来![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152125435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n### 10. 迁移本地数据到服务器 (mongodump)\n- 导出数据库，`mongodump -d node-vue-moba`![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152323399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152613482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 进入服务器/root/，将dump文件夹复制过去![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152543341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152814216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- `mongorestore`，恢复数据库	![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214152943894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 重启服务器![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415301627.png)\n- 后台就有数据了![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153042919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 后台的图片链接还是**localhost:3000**，需要**修改上传图片的接口**![在这里插入图片描述](https://img-blog.csdnimg.cn/2020021415324789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n- 先上传git，再服务器上去拉取![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153404367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153532403.png)\n- 重启服务器，`pm2 reload index`\n- 通过ssh登录数据库，修改图片链接![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153849916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200214153954849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)','<h2><a id=\"httpswwwbilibilicomvideoav58969687p1_0\"></a>以下是我看<a href=\"https://www.bilibili.com/video/av58969687?p=1\" target=\"_blank\">全栈之巅</a>整理的，有兴趣可以看一下</h2>\n<p>这是我写好的项目（后台管理：admin，前台展示：web，服务端：server）<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214133603624.png\" alt=\"在这里插入图片描述\" /></p>\n<h3><a id=\"1__3\"></a>1. 生产环境编译</h3>\n<ul>\n<li>1.修改axios的<strong>baseURL</strong></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> http = axios.create({\n    <span class=\"hljs-comment\">// baseURL: \"http://localhost:3000/admin/api\"</span>\n    baseURL: process.env.VUE_APP_API_URL || <span class=\"hljs-string\">\'/admin/api\'</span>,\n});\n</code></div></pre>\n<ul>\n<li>2.在admin的根目录添加环境变量文件 <mark>.env.development</mark>，添加 <mark>VUE_APP_API_URL = http://localhost:3000/admin/api</mark><img src=\"https://img-blog.csdnimg.cn/20200214135501887.png\" alt=\"在这里插入图片描述\" /></li>\n<li>3.在<mark>server</mark>的<mark>main.js</mark>，中添加<code>app.use(\'/admin\', express.static(__dirname + \'/admin\')) //静态文件</code></li>\n<li>4.在<mark>admin</mark>中，创建<mark>vue.config.js</mark>配置文件，进行配置<img src=\"https://img-blog.csdnimg.cn/20200214135532853.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">outputDir</span>: __dirname + <span class=\"hljs-string\">\"/../server/admin/\"</span>, <span class=\"hljs-comment\">//将文件输出到server/admin</span>\n  publicPath: process.env.NODE_ENV === <span class=\"hljs-string\">\"production\"</span> ? <span class=\"hljs-string\">\"/admin/\"</span> : <span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-comment\">//当生产环境，就会使用/admin的publicPath</span>\n}\n</code></div></pre>\n<ul>\n<li>5.<mark>admin</mark>中<code>npm run build</code>，就会在server中生成之前配置的admin文件夹<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214135840340.png\" alt=\"在这里插入图片描述\" /></li>\n<li>6.成功访问<br />\n<img src=\"https://img-blog.csdnimg.cn/20200214140034453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>\n<ol start=\"7\">\n<li>在<mark>web</mark>文件夹下执行上面相同的步骤。就会在<mark>server</mark>文件夹，生成<strong>build</strong>的web文件夹。<br />\n注意：<mark>vue.config.js</mark>，配置不同，我们访问的根路径就是前台，所以不用加<strong>web</strong><img src=\"https://img-blog.csdnimg.cn/20200214140646720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140612153.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140712345.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214140842324.png?x-ossprocess=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n</li>\n</ul>\n<h3><a id=\"2__26\"></a>2. 购买域名和服务器</h3>\n<ul>\n<li>1.购买域名<img src=\"https://img-blog.csdnimg.cn/20200214141247340.png\" alt=\"在这里插入图片描述\" /></li>\n<li>2.购买服务器（境内要备案，境外可以不用备案），选择镜像<mark>Ubuntu18</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214141441695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214141557328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214141633714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214142314210.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"3__30\"></a>3. 域名解析</h3>\n<ul>\n<li>记录值为服务器的<strong>公网IP</strong><img src=\"https://img-blog.csdnimg.cn/20200214142153148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>在<mark>git bash here</mark>中执行<code>ssh root@test.topfullstack.com</code><img src=\"https://img-blog.csdnimg.cn/202002141426170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"4_Nginx__34\"></a>4. Nginx 安装和配置</h3>\n<ul>\n<li><code>apt update</code></li>\n<li><code>apt install nginx -y</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214142953450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><strong>如果没有显示，去阿里云安全组，开启80端口</strong><br />\n<img src=\"https://img-blog.csdnimg.cn/20200214143209193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"5_MongoDB_40\"></a>5. MongoDB数据库的安装和配置</h3>\n<ul>\n<li><code>apt install mongodb-server -y</code></li>\n</ul>\n<h3><a id=\"6_git_sshkey_42\"></a>6. git 安装、配置ssh-key</h3>\n<ul>\n<li><code>apt install -y git</code></li>\n<li><code>ssh-keygen</code></li>\n<li><code>cat /root/.ssh/id_rsa.pub</code>，获取到的<mark>ssh-key</mark>，要保存下来<img src=\"https://img-blog.csdnimg.cn/20200214143851820.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"7_Nodejs__46\"></a>7. Node.js 安装、配置淘宝镜像</h3>\n<ul>\n<li><code>apt install -y nodejs</code></li>\n<li><code>apt install -y npm</code></li>\n<li><code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li><code>npm i -g nrm</code></li>\n<li><code>npm i -g n</code></li>\n<li><code>n use latest</code></li>\n<li>退出重新连接<code>exit</code>，<code>ssh root@test.topfullstack.com</code></li>\n</ul>\n<h3><a id=\"8_pm2_54\"></a>8. 拉取代码，安装pm2并启动项目</h3>\n<ul>\n<li>向github或者gitee提交代码</li>\n<li>把ssh-keygen，添加到仓库的公钥，拉取克隆代码<img src=\"https://img-blog.csdnimg.cn/20200214145050916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>创建一个文件夹，进入文件夹<img src=\"https://img-blog.csdnimg.cn/20200214145221939.png\" alt=\"在这里插入图片描述\" /></li>\n<li>clone代码<img src=\"https://img-blog.csdnimg.cn/20200214145308802.png\" alt=\"在这里插入图片描述\" /></li>\n<li>进入<mark>moba</mark>文件夹的<mark>server</mark>文件夹，运行<code>npm i</code><img src=\"https://img-blog.csdnimg.cn/20200214145433737.png\" alt=\"在这里插入图片描述\" /></li>\n<li><code>npm i -g pm2</code></li>\n<li><code>pm2 start index.js</code><img src=\"https://img-blog.csdnimg.cn/20200214145609924.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"9__Nginx__62\"></a>9. 配置 Nginx 的反向代理</h3>\n<ul>\n<li>在vscode中找到 <mark>remote-ssh</mark>插件<img src=\"https://img-blog.csdnimg.cn/20200214150029557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>点击设置配置文件，点击小窗口进入<img src=\"https://img-blog.csdnimg.cn/20200214150146826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214150227218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>输入密码，连接<img src=\"https://img-blog.csdnimg.cn/2020021415033060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>进入==/etc/nginx/==<img src=\"https://img-blog.csdnimg.cn/20200214150435516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>去nginx配置网站，<strong>https://www.digitalocean.com/community/tools/nginx</strong></li>\n<li>选择<mark>nodejs</mark>，进入<mark>server</mark>，填入自己域名，<mark>https</mark>不启用，最后下载。<img src=\"https://img-blog.csdnimg.cn/20200214151113624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/2020021415124556.png\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214151327721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>把<mark>nginxconfig.io</mark>文件夹复制过去，把<mark>available</mark>里面的文件复制过去，把<mark>enabled</mark>里面的文件复制过去<img src=\"https://img-blog.csdnimg.cn/20200214151426540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>重载nginx的配置文件，<code>service nginx reload</code> <img src=\"https://img-blog.csdnimg.cn/20200214152040485.png\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器<code>pm2 start server/index.js</code><img src=\"https://img-blog.csdnimg.cn/20200214152027428.png\" alt=\"在这里插入图片描述\" /></li>\n<li>成功显示出来<img src=\"https://img-blog.csdnimg.cn/20200214152125435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h3><a id=\"10__mongodump_73\"></a>10. 迁移本地数据到服务器 (mongodump)</h3>\n<ul>\n<li>导出数据库，<code>mongodump -d node-vue-moba</code><img src=\"https://img-blog.csdnimg.cn/20200214152323399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214152613482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>进入服务器/root/，将dump文件夹复制过去<img src=\"https://img-blog.csdnimg.cn/20200214152543341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214152814216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li><code>mongorestore</code>，恢复数据库	<img src=\"https://img-blog.csdnimg.cn/20200214152943894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器<img src=\"https://img-blog.csdnimg.cn/2020021415301627.png\" alt=\"在这里插入图片描述\" /></li>\n<li>后台就有数据了<img src=\"https://img-blog.csdnimg.cn/20200214153042919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>后台的图片链接还是<strong>localhost:3000</strong>，需要<strong>修改上传图片的接口</strong><img src=\"https://img-blog.csdnimg.cn/2020021415324789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>先上传git，再服务器上去拉取<img src=\"https://img-blog.csdnimg.cn/20200214153404367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214153532403.png\" alt=\"在这里插入图片描述\" /></li>\n<li>重启服务器，<code>pm2 reload index</code></li>\n<li>通过ssh登录数据库，修改图片链接<img src=\"https://img-blog.csdnimg.cn/20200214153849916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><img src=\"https://img-blog.csdnimg.cn/20200214153954849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n','2020-04-03 17:12:20',64,0),(18,'使用免费SSL证书启用HTTPS安全连接','#### 前提：需要我们把项目已经完全部署在了服务器上\n- 1.进入[certbot](https://certbot.eff.org/)\n- 2.选择自己配置的服务器和系统（我的是Nginx和Ubuntu18）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213195906144.png)\n- 3.在服务器上依次运行\n	- `apt-get update`\n	- `apt-get install software-properties-common`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200524813.png)\n	- `add-apt-repository universe`\n	- `add-apt-repository ppa:certbot/certbot`\n	- `apt-get update`\n	- `apt-get install certbot python-certbot-nginx`\n	- `certbot --nginx`\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200842344.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200910564.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200933337.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213200956813.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202002132010339.png)\n- 4.最后你需要在阿里云安全组配置443端口，==不然刷新网站之后无响应==\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213201153958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n	- 在刷新网站就可以了![在这里插入图片描述](https://img-blog.csdnimg.cn/20200213201315452.png)','<h4><a id=\"_0\"></a>前提：需要我们把项目已经完全部署在了服务器上</h4>\n<ul>\n<li>1.进入<a href=\"https://certbot.eff.org/\" target=\"_blank\">certbot</a></li>\n<li>2.选择自己配置的服务器和系统（我的是Nginx和Ubuntu18）<img src=\"https://img-blog.csdnimg.cn/20200213195906144.png\" alt=\"在这里插入图片描述\" /></li>\n<li>3.在服务器上依次运行\n<ul>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install software-properties-common</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200524813.png\" alt=\"在这里插入图片描述\" /></li>\n<li><code>add-apt-repository universe</code></li>\n<li><code>add-apt-repository ppa:certbot/certbot</code></li>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install certbot python-certbot-nginx</code></li>\n<li><code>certbot --nginx</code><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200842344.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200910564.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200933337.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213200956813.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/202002132010339.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n</li>\n<li>4.最后你需要在阿里云安全组配置443端口，<mark>不然刷新网站之后无响应</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200213201153958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n<ul>\n<li>在刷新网站就可以了<img src=\"https://img-blog.csdnimg.cn/20200213201315452.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n</li>\n</ul>\n','2020-04-03 17:12:20',130,0),(19,'阿里云OSS文件上传','### 如何把文件上传到阿里云的OSS存储\n1. npm一个支持阿里云oss存储的包\n2. `npm install --save multer-aliyun-oss`\n3. mian中引入包，在multer模块中将本地存储换成oss存储\n```js\nconst multer = require(\'multer\');\nconst MAO = require(\'multer-aliyun-oss\');\n \nconst upload = multer({\n    storage: MAO({\n        config: {\n            region: \'<region>\',\n            accessKeyId: \'<accessKeyId>\',\n            accessKeySecret: \'<accessKeySecret>\',\n            bucket: \'<bucket>\'\n        }\n    })\n});\n```\n4. 创建oss存储\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307174626689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n5. 圈是==bucket==，线是==region==![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307174914591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n6. 创建AccessKey\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175128563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020030717522281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175254265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175516502.png)\n7.添加权限，否则上传会报500\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175649747.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175710279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)\n8.完成\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200307175851400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70)','<h3><a id=\"OSS_0\"></a>如何把文件上传到阿里云的OSS存储</h3>\n<ol>\n<li>npm一个支持阿里云oss存储的包</li>\n<li><code>npm install --save multer-aliyun-oss</code></li>\n<li>mian中引入包，在multer模块中将本地存储换成oss存储</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> multer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'multer\'</span>);\n<span class=\"hljs-keyword\">const</span> MAO = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'multer-aliyun-oss\'</span>);\n \n<span class=\"hljs-keyword\">const</span> upload = multer({\n    <span class=\"hljs-attr\">storage</span>: MAO({\n        <span class=\"hljs-attr\">config</span>: {\n            <span class=\"hljs-attr\">region</span>: <span class=\"hljs-string\">\'&lt;region&gt;\'</span>,\n            <span class=\"hljs-attr\">accessKeyId</span>: <span class=\"hljs-string\">\'&lt;accessKeyId&gt;\'</span>,\n            <span class=\"hljs-attr\">accessKeySecret</span>: <span class=\"hljs-string\">\'&lt;accessKeySecret&gt;\'</span>,\n            <span class=\"hljs-attr\">bucket</span>: <span class=\"hljs-string\">\'&lt;bucket&gt;\'</span>\n        }\n    })\n});\n</code></div></pre>\n<ol start=\"4\">\n<li>创建oss存储<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307174626689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>圈是<mark>bucket</mark>，线是<mark>region</mark><img src=\"https://img-blog.csdnimg.cn/20200307174914591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>创建AccessKey<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175128563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/2020030717522281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175254265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175516502.png\" alt=\"在这里插入图片描述\" /><br />\n7.添加权限，否则上传会报500<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175649747.png\" alt=\"在这里插入图片描述\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175710279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n8.完成<br />\n<img src=\"https://img-blog.csdnimg.cn/20200307175851400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Nzc1Nzgy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n</ol>\n','2020-04-03 16:56:32',346,0),(25,'面试复习一','### var/let/const\n\n*   ==let==不存在变量提升，var存在变量提升\n*   ==let==在同一作用域下，不允许重复声明\n*   ==var==是函数作用域，==let==是块级作用域\n*   ==const==声明只读常量，一旦声明不能再改变，也是块级作用域\n\n### 箭头函数\n\n`let f = v=>{\nreturn v;\n}\nf(10)\n//10\n谁调用箭头函数，this指向谁` \n\n### set与map\n\n*   set数组去重\n\n```js  \n    //const s = new Set();\n    //s.add(1).add(2);\n    var a = [1,2,3,4,4,5,1,2];\n    var b = [...new Set(a)];\n    console.log(b)\n    //[1, 2, 3, 4, 5]\n```\n\n    \n\n*   map\n\n```js\nconst m = new Map();\nm.set(\'name\',\'rmq\').set(\'age\',\'18\');\nfor(let [key,value] of m){}\n```\n','<h3><a id=\"varletconst_0\"></a>var/let/const</h3>\n<ul>\n<li><mark>let</mark>不存在变量提升，var存在变量提升</li>\n<li><mark>let</mark>在同一作用域下，不允许重复声明</li>\n<li><mark>var</mark>是函数作用域，<mark>let</mark>是块级作用域</li>\n<li><mark>const</mark>声明只读常量，一旦声明不能再改变，也是块级作用域</li>\n</ul>\n<h3><a id=\"_7\"></a>箭头函数</h3>\n<p><code>let f = v=&gt;{ return v; } f(10) //10 谁调用箭头函数，this指向谁</code></p>\n<h3><a id=\"setmap_16\"></a>set与map</h3>\n<ul>\n<li>set数组去重</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">    <span class=\"hljs-comment\">//const s = new Set();</span>\n    <span class=\"hljs-comment\">//s.add(1).add(2);</span>\n    <span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">var</span> b = [...new <span class=\"hljs-built_in\">Set</span>(a)];\n    <span class=\"hljs-built_in\">console</span>.log(b)\n    <span class=\"hljs-comment\">//[1, 2, 3, 4, 5]</span>\n</code></div></pre>\n<ul>\n<li>map</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nm.set(<span class=\"hljs-string\">\'name\'</span>,<span class=\"hljs-string\">\'rmq\'</span>).set(<span class=\"hljs-string\">\'age\'</span>,<span class=\"hljs-string\">\'18\'</span>);\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [key,value] <span class=\"hljs-keyword\">of</span> m){}\n</code></div></pre>\n','2020-04-03 17:12:20',0,0);

/*Table structure for table `commentreply` */

DROP TABLE IF EXISTS `commentreply`;

CREATE TABLE `commentreply` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `i_name` char(20) NOT NULL,
  `r_name` char(20) NOT NULL,
  `c_reply` char(240) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  `comment_id` int(4) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `cr_key` (`comment_id`),
  CONSTRAINT `cr_key` FOREIGN KEY (`comment_id`) REFERENCES `comments` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `commentreply` */

/*Table structure for table `comments` */

DROP TABLE IF EXISTS `comments`;

CREATE TABLE `comments` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `name` char(16) NOT NULL DEFAULT '大佬',
  `comment` varchar(300) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `article_id` int(4) NOT NULL,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `ac_key` (`article_id`),
  CONSTRAINT `ac_key` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `comments` */

/*Table structure for table `informations` */

DROP TABLE IF EXISTS `informations`;

CREATE TABLE `informations` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `my_message` char(100) NOT NULL,
  `my_info` char(100) NOT NULL,
  `my_hope` char(200) DEFAULT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Data for the table `informations` */

insert  into `informations`(`id`,`my_message`,`my_info`,`my_hope`,`date`,`is_delete`) values (8,'欢迎来到小阮的博客','一个爱吃、爱敲代码的程序员','到处旅游，赏美景，吃美食','2020-03-15 15:26:59',0);

/*Table structure for table `life` */

DROP TABLE IF EXISTS `life`;

CREATE TABLE `life` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `image` char(100) NOT NULL,
  `description` char(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `content` char(200) DEFAULT NULL,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Data for the table `life` */

insert  into `life`(`id`,`image`,`description`,`date`,`content`,`is_delete`) values (1,'http://localhost:3002/uploads/463f3110af3c8ff49bce496cfddc15aa','春暖花开，奔你而来','2020-03-15 19:23:01','打卡成都',0),(2,'http://localhost:3002/uploads/954dc3b84b12d83a56a2b7386e74fe93','心如止水','2020-03-18 15:56:17','打卡南京',0);

/*Table structure for table `links` */

DROP TABLE IF EXISTS `links`;

CREATE TABLE `links` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `title` char(100) NOT NULL,
  `link` char(255) NOT NULL,
  `description` char(240) NOT NULL,
  `image` char(100) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `links` */

insert  into `links`(`id`,`title`,`link`,`description`,`image`,`date`,`is_delete`) values (2,'王若飞的博客','http://www.feicheng.xyz/','java工程师','http://localhost:3002/uploads/4f51566f0acc50f0580291fef2d4a491','2020-03-31 18:32:53',0),(4,'仲威','https://www.blogme.top/blog/#/','前端工程师','http://localhost:3002/uploads/4f51566f0acc50f0580291fef2d4a491','2020-03-23 19:31:08',0);

/*Table structure for table `messagereply` */

DROP TABLE IF EXISTS `messagereply`;

CREATE TABLE `messagereply` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `i_name` char(20) NOT NULL,
  `r_name` char(20) NOT NULL,
  `m_reply` char(240) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` int(1) NOT NULL DEFAULT '0',
  `message_id` int(4) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `mr_key` (`message_id`),
  CONSTRAINT `mr_key` FOREIGN KEY (`message_id`) REFERENCES `messages` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `messagereply` */

/*Table structure for table `messages` */

DROP TABLE IF EXISTS `messages`;

CREATE TABLE `messages` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `name` char(20) NOT NULL DEFAULT '大佬',
  `message` char(240) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `messages` */

/*Table structure for table `notices` */

DROP TABLE IF EXISTS `notices`;

CREATE TABLE `notices` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `title` char(50) NOT NULL,
  `notice` char(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `notices` */

insert  into `notices`(`id`,`title`,`notice`,`date`,`is_delete`) values (1,'完成留言','对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查对留言进行增删改查','2020-03-15 15:26:59',0),(2,'后台进度','完成后台页面开发','2020-03-18 15:56:17',0),(3,'后台进度','完成后台数据库操作','2020-03-18 15:56:17',0),(4,'前台进度','完成前端页面搭建','2020-03-18 15:56:17',0);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
